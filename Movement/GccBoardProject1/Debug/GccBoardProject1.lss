
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b8c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083b8c  00083b8c  0000bb8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000994  20070000  00083b94  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000d4  20070994  00084528  00010994  2**2
                  ALLOC
  4 .stack        00002000  20070a68  000845fc  00010994  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010994  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109bd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000946e  00000000  00000000  00010a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ab3  00000000  00000000  00019e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000038df  00000000  00000000  0001b939  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000908  00000000  00000000  0001f218  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000818  00000000  00000000  0001fb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00016872  00000000  00000000  00020338  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000bb1f  00000000  00000000  00036baa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006a5c0  00000000  00000000  000426c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001d58  00000000  00000000  000acc8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072a68 	.word	0x20072a68
   80004:	00080941 	.word	0x00080941
   80008:	0008093d 	.word	0x0008093d
   8000c:	0008093d 	.word	0x0008093d
   80010:	0008093d 	.word	0x0008093d
   80014:	0008093d 	.word	0x0008093d
   80018:	0008093d 	.word	0x0008093d
	...
   8002c:	0008093d 	.word	0x0008093d
   80030:	0008093d 	.word	0x0008093d
   80034:	00000000 	.word	0x00000000
   80038:	0008093d 	.word	0x0008093d
   8003c:	0008093d 	.word	0x0008093d
   80040:	0008093d 	.word	0x0008093d
   80044:	0008093d 	.word	0x0008093d
   80048:	0008093d 	.word	0x0008093d
   8004c:	0008093d 	.word	0x0008093d
   80050:	0008093d 	.word	0x0008093d
   80054:	0008093d 	.word	0x0008093d
   80058:	0008093d 	.word	0x0008093d
   8005c:	0008093d 	.word	0x0008093d
   80060:	0008093d 	.word	0x0008093d
   80064:	0008093d 	.word	0x0008093d
   80068:	00000000 	.word	0x00000000
   8006c:	000807ad 	.word	0x000807ad
   80070:	000807c1 	.word	0x000807c1
   80074:	000807d5 	.word	0x000807d5
   80078:	000807e9 	.word	0x000807e9
	...
   80084:	0008093d 	.word	0x0008093d
   80088:	0008093d 	.word	0x0008093d
   8008c:	0008093d 	.word	0x0008093d
   80090:	0008093d 	.word	0x0008093d
   80094:	0008093d 	.word	0x0008093d
   80098:	0008093d 	.word	0x0008093d
   8009c:	0008093d 	.word	0x0008093d
   800a0:	0008093d 	.word	0x0008093d
   800a4:	00000000 	.word	0x00000000
   800a8:	0008093d 	.word	0x0008093d
   800ac:	0008093d 	.word	0x0008093d
   800b0:	0008093d 	.word	0x0008093d
   800b4:	0008093d 	.word	0x0008093d
   800b8:	0008093d 	.word	0x0008093d
   800bc:	0008093d 	.word	0x0008093d
   800c0:	0008093d 	.word	0x0008093d
   800c4:	0008093d 	.word	0x0008093d
   800c8:	0008093d 	.word	0x0008093d
   800cc:	0008093d 	.word	0x0008093d
   800d0:	0008093d 	.word	0x0008093d
   800d4:	0008093d 	.word	0x0008093d
   800d8:	0008093d 	.word	0x0008093d
   800dc:	0008093d 	.word	0x0008093d
   800e0:	0008093d 	.word	0x0008093d
   800e4:	0008093d 	.word	0x0008093d
   800e8:	0008093d 	.word	0x0008093d
   800ec:	0008093d 	.word	0x0008093d
   800f0:	0008093d 	.word	0x0008093d

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070994 	.word	0x20070994
   80110:	00000000 	.word	0x00000000
   80114:	00083b94 	.word	0x00083b94

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00083b94 	.word	0x00083b94
   8013c:	20070998 	.word	0x20070998
   80140:	00083b94 	.word	0x00083b94
   80144:	00000000 	.word	0x00000000

00080148 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80148:	b5f0      	push	{r4, r5, r6, r7, lr}
   8014a:	b083      	sub	sp, #12
   8014c:	4604      	mov	r4, r0
   8014e:	460d      	mov	r5, r1
	uint32_t val = 0;
   80150:	2300      	movs	r3, #0
   80152:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80154:	4b1f      	ldr	r3, [pc, #124]	; (801d4 <usart_serial_getchar+0x8c>)
   80156:	4298      	cmp	r0, r3
   80158:	d107      	bne.n	8016a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   8015a:	461f      	mov	r7, r3
   8015c:	4e1e      	ldr	r6, [pc, #120]	; (801d8 <usart_serial_getchar+0x90>)
   8015e:	4638      	mov	r0, r7
   80160:	4629      	mov	r1, r5
   80162:	47b0      	blx	r6
   80164:	2800      	cmp	r0, #0
   80166:	d1fa      	bne.n	8015e <usart_serial_getchar+0x16>
   80168:	e019      	b.n	8019e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8016a:	4b1c      	ldr	r3, [pc, #112]	; (801dc <usart_serial_getchar+0x94>)
   8016c:	4298      	cmp	r0, r3
   8016e:	d109      	bne.n	80184 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80170:	461f      	mov	r7, r3
   80172:	4e1b      	ldr	r6, [pc, #108]	; (801e0 <usart_serial_getchar+0x98>)
   80174:	4638      	mov	r0, r7
   80176:	a901      	add	r1, sp, #4
   80178:	47b0      	blx	r6
   8017a:	2800      	cmp	r0, #0
   8017c:	d1fa      	bne.n	80174 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   8017e:	9b01      	ldr	r3, [sp, #4]
   80180:	702b      	strb	r3, [r5, #0]
   80182:	e019      	b.n	801b8 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80184:	4b17      	ldr	r3, [pc, #92]	; (801e4 <usart_serial_getchar+0x9c>)
   80186:	4298      	cmp	r0, r3
   80188:	d109      	bne.n	8019e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   8018a:	461e      	mov	r6, r3
   8018c:	4c14      	ldr	r4, [pc, #80]	; (801e0 <usart_serial_getchar+0x98>)
   8018e:	4630      	mov	r0, r6
   80190:	a901      	add	r1, sp, #4
   80192:	47a0      	blx	r4
   80194:	2800      	cmp	r0, #0
   80196:	d1fa      	bne.n	8018e <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80198:	9b01      	ldr	r3, [sp, #4]
   8019a:	702b      	strb	r3, [r5, #0]
   8019c:	e018      	b.n	801d0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8019e:	4b12      	ldr	r3, [pc, #72]	; (801e8 <usart_serial_getchar+0xa0>)
   801a0:	429c      	cmp	r4, r3
   801a2:	d109      	bne.n	801b8 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   801a4:	461e      	mov	r6, r3
   801a6:	4c0e      	ldr	r4, [pc, #56]	; (801e0 <usart_serial_getchar+0x98>)
   801a8:	4630      	mov	r0, r6
   801aa:	a901      	add	r1, sp, #4
   801ac:	47a0      	blx	r4
   801ae:	2800      	cmp	r0, #0
   801b0:	d1fa      	bne.n	801a8 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   801b2:	9b01      	ldr	r3, [sp, #4]
   801b4:	702b      	strb	r3, [r5, #0]
   801b6:	e00b      	b.n	801d0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801b8:	4b0c      	ldr	r3, [pc, #48]	; (801ec <usart_serial_getchar+0xa4>)
   801ba:	429c      	cmp	r4, r3
   801bc:	d108      	bne.n	801d0 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   801be:	461e      	mov	r6, r3
   801c0:	4c07      	ldr	r4, [pc, #28]	; (801e0 <usart_serial_getchar+0x98>)
   801c2:	4630      	mov	r0, r6
   801c4:	a901      	add	r1, sp, #4
   801c6:	47a0      	blx	r4
   801c8:	2800      	cmp	r0, #0
   801ca:	d1fa      	bne.n	801c2 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   801cc:	9b01      	ldr	r3, [sp, #4]
   801ce:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   801d0:	b003      	add	sp, #12
   801d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   801d4:	400e0800 	.word	0x400e0800
   801d8:	00080429 	.word	0x00080429
   801dc:	40098000 	.word	0x40098000
   801e0:	00080451 	.word	0x00080451
   801e4:	4009c000 	.word	0x4009c000
   801e8:	400a0000 	.word	0x400a0000
   801ec:	400a4000 	.word	0x400a4000

000801f0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   801f0:	b570      	push	{r4, r5, r6, lr}
   801f2:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   801f4:	4b21      	ldr	r3, [pc, #132]	; (8027c <usart_serial_putchar+0x8c>)
   801f6:	4298      	cmp	r0, r3
   801f8:	d107      	bne.n	8020a <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   801fa:	461e      	mov	r6, r3
   801fc:	4d20      	ldr	r5, [pc, #128]	; (80280 <usart_serial_putchar+0x90>)
   801fe:	4630      	mov	r0, r6
   80200:	4621      	mov	r1, r4
   80202:	47a8      	blx	r5
   80204:	2800      	cmp	r0, #0
   80206:	d1fa      	bne.n	801fe <usart_serial_putchar+0xe>
   80208:	e02b      	b.n	80262 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8020a:	4b1e      	ldr	r3, [pc, #120]	; (80284 <usart_serial_putchar+0x94>)
   8020c:	4298      	cmp	r0, r3
   8020e:	d107      	bne.n	80220 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80210:	461e      	mov	r6, r3
   80212:	4d1d      	ldr	r5, [pc, #116]	; (80288 <usart_serial_putchar+0x98>)
   80214:	4630      	mov	r0, r6
   80216:	4621      	mov	r1, r4
   80218:	47a8      	blx	r5
   8021a:	2800      	cmp	r0, #0
   8021c:	d1fa      	bne.n	80214 <usart_serial_putchar+0x24>
   8021e:	e022      	b.n	80266 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80220:	4b1a      	ldr	r3, [pc, #104]	; (8028c <usart_serial_putchar+0x9c>)
   80222:	4298      	cmp	r0, r3
   80224:	d107      	bne.n	80236 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80226:	461e      	mov	r6, r3
   80228:	4d17      	ldr	r5, [pc, #92]	; (80288 <usart_serial_putchar+0x98>)
   8022a:	4630      	mov	r0, r6
   8022c:	4621      	mov	r1, r4
   8022e:	47a8      	blx	r5
   80230:	2800      	cmp	r0, #0
   80232:	d1fa      	bne.n	8022a <usart_serial_putchar+0x3a>
   80234:	e019      	b.n	8026a <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80236:	4b16      	ldr	r3, [pc, #88]	; (80290 <usart_serial_putchar+0xa0>)
   80238:	4298      	cmp	r0, r3
   8023a:	d107      	bne.n	8024c <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   8023c:	461e      	mov	r6, r3
   8023e:	4d12      	ldr	r5, [pc, #72]	; (80288 <usart_serial_putchar+0x98>)
   80240:	4630      	mov	r0, r6
   80242:	4621      	mov	r1, r4
   80244:	47a8      	blx	r5
   80246:	2800      	cmp	r0, #0
   80248:	d1fa      	bne.n	80240 <usart_serial_putchar+0x50>
   8024a:	e010      	b.n	8026e <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8024c:	4b11      	ldr	r3, [pc, #68]	; (80294 <usart_serial_putchar+0xa4>)
   8024e:	4298      	cmp	r0, r3
   80250:	d10f      	bne.n	80272 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80252:	461e      	mov	r6, r3
   80254:	4d0c      	ldr	r5, [pc, #48]	; (80288 <usart_serial_putchar+0x98>)
   80256:	4630      	mov	r0, r6
   80258:	4621      	mov	r1, r4
   8025a:	47a8      	blx	r5
   8025c:	2800      	cmp	r0, #0
   8025e:	d1fa      	bne.n	80256 <usart_serial_putchar+0x66>
   80260:	e009      	b.n	80276 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80262:	2001      	movs	r0, #1
   80264:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80266:	2001      	movs	r0, #1
   80268:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8026a:	2001      	movs	r0, #1
   8026c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8026e:	2001      	movs	r0, #1
   80270:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80272:	2000      	movs	r0, #0
   80274:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80276:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80278:	bd70      	pop	{r4, r5, r6, pc}
   8027a:	bf00      	nop
   8027c:	400e0800 	.word	0x400e0800
   80280:	00080419 	.word	0x00080419
   80284:	40098000 	.word	0x40098000
   80288:	0008043d 	.word	0x0008043d
   8028c:	4009c000 	.word	0x4009c000
   80290:	400a0000 	.word	0x400a0000
   80294:	400a4000 	.word	0x400a4000

00080298 <configureConsole>:
#include "consoleFunctions.h"

void configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   80298:	b530      	push	{r4, r5, lr}
   8029a:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8029c:	2008      	movs	r0, #8
   8029e:	4d15      	ldr	r5, [pc, #84]	; (802f4 <configureConsole+0x5c>)
   802a0:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   802a2:	4c15      	ldr	r4, [pc, #84]	; (802f8 <configureConsole+0x60>)
   802a4:	4b15      	ldr	r3, [pc, #84]	; (802fc <configureConsole+0x64>)
   802a6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   802a8:	4a15      	ldr	r2, [pc, #84]	; (80300 <configureConsole+0x68>)
   802aa:	4b16      	ldr	r3, [pc, #88]	; (80304 <configureConsole+0x6c>)
   802ac:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   802ae:	4a16      	ldr	r2, [pc, #88]	; (80308 <configureConsole+0x70>)
   802b0:	4b16      	ldr	r3, [pc, #88]	; (8030c <configureConsole+0x74>)
   802b2:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   802b4:	4b16      	ldr	r3, [pc, #88]	; (80310 <configureConsole+0x78>)
   802b6:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   802b8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   802bc:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   802be:	f44f 6300 	mov.w	r3, #2048	; 0x800
   802c2:	9303      	str	r3, [sp, #12]
   802c4:	2008      	movs	r0, #8
   802c6:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   802c8:	4620      	mov	r0, r4
   802ca:	a901      	add	r1, sp, #4
   802cc:	4b11      	ldr	r3, [pc, #68]	; (80314 <configureConsole+0x7c>)
   802ce:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   802d0:	4d11      	ldr	r5, [pc, #68]	; (80318 <configureConsole+0x80>)
   802d2:	682b      	ldr	r3, [r5, #0]
   802d4:	6898      	ldr	r0, [r3, #8]
   802d6:	2100      	movs	r1, #0
   802d8:	4c10      	ldr	r4, [pc, #64]	; (8031c <configureConsole+0x84>)
   802da:	47a0      	blx	r4
	setbuf(stdin, NULL);
   802dc:	682b      	ldr	r3, [r5, #0]
   802de:	6858      	ldr	r0, [r3, #4]
   802e0:	2100      	movs	r1, #0
   802e2:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   802e4:	480e      	ldr	r0, [pc, #56]	; (80320 <configureConsole+0x88>)
   802e6:	4c0f      	ldr	r4, [pc, #60]	; (80324 <configureConsole+0x8c>)
   802e8:	47a0      	blx	r4
	printf("=============\n");
   802ea:	480f      	ldr	r0, [pc, #60]	; (80328 <configureConsole+0x90>)
   802ec:	47a0      	blx	r4
   802ee:	b005      	add	sp, #20
   802f0:	bd30      	pop	{r4, r5, pc}
   802f2:	bf00      	nop
   802f4:	000808e5 	.word	0x000808e5
   802f8:	400e0800 	.word	0x400e0800
   802fc:	20070a60 	.word	0x20070a60
   80300:	000801f1 	.word	0x000801f1
   80304:	20070a5c 	.word	0x20070a5c
   80308:	00080149 	.word	0x00080149
   8030c:	20070a58 	.word	0x20070a58
   80310:	0501bd00 	.word	0x0501bd00
   80314:	000803e1 	.word	0x000803e1
   80318:	20070558 	.word	0x20070558
   8031c:	00081229 	.word	0x00081229
   80320:	00083af0 	.word	0x00083af0
   80324:	0008116d 	.word	0x0008116d
   80328:	00083b00 	.word	0x00083b00

0008032c <main>:

void setUp(void);
void tearDown(void);
void resetTest(void);

int main(void){
   8032c:	b508      	push	{r3, lr}
	sysclk_init();
   8032e:	4b04      	ldr	r3, [pc, #16]	; (80340 <main+0x14>)
   80330:	4798      	blx	r3
	board_init();
   80332:	4b04      	ldr	r3, [pc, #16]	; (80344 <main+0x18>)
   80334:	4798      	blx	r3
	configureConsole();
   80336:	4b04      	ldr	r3, [pc, #16]	; (80348 <main+0x1c>)
   80338:	4798      	blx	r3
	RUN_TEST(test_distanceToPosition3,28);
	RUN_TEST(test_AngleToPos3, 30);
	UnityEnd();*/
	
	return 0;
}
   8033a:	2000      	movs	r0, #0
   8033c:	bd08      	pop	{r3, pc}
   8033e:	bf00      	nop
   80340:	00080469 	.word	0x00080469
   80344:	000804cd 	.word	0x000804cd
   80348:	00080299 	.word	0x00080299

0008034c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8034c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80350:	460c      	mov	r4, r1
   80352:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80354:	b960      	cbnz	r0, 80370 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80356:	2a00      	cmp	r2, #0
   80358:	dd0e      	ble.n	80378 <_read+0x2c>
   8035a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   8035c:	4e09      	ldr	r6, [pc, #36]	; (80384 <_read+0x38>)
   8035e:	4d0a      	ldr	r5, [pc, #40]	; (80388 <_read+0x3c>)
   80360:	6830      	ldr	r0, [r6, #0]
   80362:	4621      	mov	r1, r4
   80364:	682b      	ldr	r3, [r5, #0]
   80366:	4798      	blx	r3
		ptr++;
   80368:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8036a:	42bc      	cmp	r4, r7
   8036c:	d1f8      	bne.n	80360 <_read+0x14>
   8036e:	e006      	b.n	8037e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80370:	f04f 30ff 	mov.w	r0, #4294967295
   80374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80378:	2000      	movs	r0, #0
   8037a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8037e:	4640      	mov	r0, r8
	}
	return nChars;
}
   80380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80384:	20070a60 	.word	0x20070a60
   80388:	20070a58 	.word	0x20070a58

0008038c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8038c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80390:	460e      	mov	r6, r1
   80392:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80394:	3801      	subs	r0, #1
   80396:	2802      	cmp	r0, #2
   80398:	d80f      	bhi.n	803ba <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   8039a:	b192      	cbz	r2, 803c2 <_write+0x36>
   8039c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8039e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 803dc <_write+0x50>
   803a2:	4f0d      	ldr	r7, [pc, #52]	; (803d8 <_write+0x4c>)
   803a4:	f8d8 0000 	ldr.w	r0, [r8]
   803a8:	5d31      	ldrb	r1, [r6, r4]
   803aa:	683b      	ldr	r3, [r7, #0]
   803ac:	4798      	blx	r3
   803ae:	2800      	cmp	r0, #0
   803b0:	db0a      	blt.n	803c8 <_write+0x3c>
			return -1;
		}
		++nChars;
   803b2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   803b4:	42a5      	cmp	r5, r4
   803b6:	d1f5      	bne.n	803a4 <_write+0x18>
   803b8:	e00a      	b.n	803d0 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   803ba:	f04f 30ff 	mov.w	r0, #4294967295
   803be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   803c2:	2000      	movs	r0, #0
   803c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   803c8:	f04f 30ff 	mov.w	r0, #4294967295
   803cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   803d0:	4620      	mov	r0, r4
	}
	return nChars;
}
   803d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   803d6:	bf00      	nop
   803d8:	20070a5c 	.word	0x20070a5c
   803dc:	20070a60 	.word	0x20070a60

000803e0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   803e0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   803e2:	23ac      	movs	r3, #172	; 0xac
   803e4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   803e6:	680a      	ldr	r2, [r1, #0]
   803e8:	684b      	ldr	r3, [r1, #4]
   803ea:	fbb2 f3f3 	udiv	r3, r2, r3
   803ee:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   803f0:	1e5c      	subs	r4, r3, #1
   803f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   803f6:	4294      	cmp	r4, r2
   803f8:	d80a      	bhi.n	80410 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   803fa:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   803fc:	688b      	ldr	r3, [r1, #8]
   803fe:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80400:	f240 2302 	movw	r3, #514	; 0x202
   80404:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80408:	2350      	movs	r3, #80	; 0x50
   8040a:	6003      	str	r3, [r0, #0]

	return 0;
   8040c:	2000      	movs	r0, #0
   8040e:	e000      	b.n	80412 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80410:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80412:	f85d 4b04 	ldr.w	r4, [sp], #4
   80416:	4770      	bx	lr

00080418 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80418:	6943      	ldr	r3, [r0, #20]
   8041a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8041e:	bf1a      	itte	ne
   80420:	61c1      	strne	r1, [r0, #28]
	return 0;
   80422:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80424:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80426:	4770      	bx	lr

00080428 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80428:	6943      	ldr	r3, [r0, #20]
   8042a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8042e:	bf1d      	ittte	ne
   80430:	6983      	ldrne	r3, [r0, #24]
   80432:	700b      	strbne	r3, [r1, #0]
	return 0;
   80434:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80436:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80438:	4770      	bx	lr
   8043a:	bf00      	nop

0008043c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8043c:	6943      	ldr	r3, [r0, #20]
   8043e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80442:	bf1d      	ittte	ne
   80444:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80448:	61c1      	strne	r1, [r0, #28]
	return 0;
   8044a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8044c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8044e:	4770      	bx	lr

00080450 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80450:	6943      	ldr	r3, [r0, #20]
   80452:	f013 0f01 	tst.w	r3, #1
   80456:	d005      	beq.n	80464 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80458:	6983      	ldr	r3, [r0, #24]
   8045a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8045e:	600b      	str	r3, [r1, #0]

	return 0;
   80460:	2000      	movs	r0, #0
   80462:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80464:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80466:	4770      	bx	lr

00080468 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80468:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8046a:	480e      	ldr	r0, [pc, #56]	; (804a4 <sysclk_init+0x3c>)
   8046c:	4b0e      	ldr	r3, [pc, #56]	; (804a8 <sysclk_init+0x40>)
   8046e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80470:	2000      	movs	r0, #0
   80472:	213e      	movs	r1, #62	; 0x3e
   80474:	4b0d      	ldr	r3, [pc, #52]	; (804ac <sysclk_init+0x44>)
   80476:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80478:	4c0d      	ldr	r4, [pc, #52]	; (804b0 <sysclk_init+0x48>)
   8047a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8047c:	2800      	cmp	r0, #0
   8047e:	d0fc      	beq.n	8047a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80480:	4b0c      	ldr	r3, [pc, #48]	; (804b4 <sysclk_init+0x4c>)
   80482:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80484:	4a0c      	ldr	r2, [pc, #48]	; (804b8 <sysclk_init+0x50>)
   80486:	4b0d      	ldr	r3, [pc, #52]	; (804bc <sysclk_init+0x54>)
   80488:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8048a:	4c0d      	ldr	r4, [pc, #52]	; (804c0 <sysclk_init+0x58>)
   8048c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8048e:	2800      	cmp	r0, #0
   80490:	d0fc      	beq.n	8048c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80492:	2010      	movs	r0, #16
   80494:	4b0b      	ldr	r3, [pc, #44]	; (804c4 <sysclk_init+0x5c>)
   80496:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80498:	4b0b      	ldr	r3, [pc, #44]	; (804c8 <sysclk_init+0x60>)
   8049a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8049c:	4801      	ldr	r0, [pc, #4]	; (804a4 <sysclk_init+0x3c>)
   8049e:	4b02      	ldr	r3, [pc, #8]	; (804a8 <sysclk_init+0x40>)
   804a0:	4798      	blx	r3
   804a2:	bd10      	pop	{r4, pc}
   804a4:	0501bd00 	.word	0x0501bd00
   804a8:	200700a5 	.word	0x200700a5
   804ac:	00080861 	.word	0x00080861
   804b0:	000808b5 	.word	0x000808b5
   804b4:	000808c5 	.word	0x000808c5
   804b8:	200d3f01 	.word	0x200d3f01
   804bc:	400e0600 	.word	0x400e0600
   804c0:	000808d5 	.word	0x000808d5
   804c4:	000807fd 	.word	0x000807fd
   804c8:	000809f1 	.word	0x000809f1

000804cc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   804cc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   804ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804d2:	4b13      	ldr	r3, [pc, #76]	; (80520 <board_init+0x54>)
   804d4:	605a      	str	r2, [r3, #4]
   804d6:	200b      	movs	r0, #11
   804d8:	4c12      	ldr	r4, [pc, #72]	; (80524 <board_init+0x58>)
   804da:	47a0      	blx	r4
   804dc:	200c      	movs	r0, #12
   804de:	47a0      	blx	r4
   804e0:	200d      	movs	r0, #13
   804e2:	47a0      	blx	r4
   804e4:	200e      	movs	r0, #14
   804e6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   804e8:	203b      	movs	r0, #59	; 0x3b
   804ea:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804ee:	4c0e      	ldr	r4, [pc, #56]	; (80528 <board_init+0x5c>)
   804f0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   804f2:	2055      	movs	r0, #85	; 0x55
   804f4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804f8:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   804fa:	2056      	movs	r0, #86	; 0x56
   804fc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80500:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80502:	2068      	movs	r0, #104	; 0x68
   80504:	4909      	ldr	r1, [pc, #36]	; (8052c <board_init+0x60>)
   80506:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80508:	205c      	movs	r0, #92	; 0x5c
   8050a:	4909      	ldr	r1, [pc, #36]	; (80530 <board_init+0x64>)
   8050c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	//Use the first line in normal cases
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8050e:	4809      	ldr	r0, [pc, #36]	; (80534 <board_init+0x68>)
   80510:	f44f 7140 	mov.w	r1, #768	; 0x300
   80514:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80518:	4b07      	ldr	r3, [pc, #28]	; (80538 <board_init+0x6c>)
   8051a:	4798      	blx	r3
   8051c:	bd10      	pop	{r4, pc}
   8051e:	bf00      	nop
   80520:	400e1a50 	.word	0x400e1a50
   80524:	000808e5 	.word	0x000808e5
   80528:	000805e1 	.word	0x000805e1
   8052c:	28000079 	.word	0x28000079
   80530:	28000001 	.word	0x28000001
   80534:	400e0e00 	.word	0x400e0e00
   80538:	000806b5 	.word	0x000806b5

0008053c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8053c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8053e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80542:	d016      	beq.n	80572 <pio_set_peripheral+0x36>
   80544:	d804      	bhi.n	80550 <pio_set_peripheral+0x14>
   80546:	b1c1      	cbz	r1, 8057a <pio_set_peripheral+0x3e>
   80548:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8054c:	d00a      	beq.n	80564 <pio_set_peripheral+0x28>
   8054e:	e013      	b.n	80578 <pio_set_peripheral+0x3c>
   80550:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80554:	d011      	beq.n	8057a <pio_set_peripheral+0x3e>
   80556:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8055a:	d00e      	beq.n	8057a <pio_set_peripheral+0x3e>
   8055c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80560:	d10a      	bne.n	80578 <pio_set_peripheral+0x3c>
   80562:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80564:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80566:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80568:	400b      	ands	r3, r1
   8056a:	ea23 0302 	bic.w	r3, r3, r2
   8056e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80570:	e002      	b.n	80578 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80572:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80574:	4313      	orrs	r3, r2
   80576:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80578:	6042      	str	r2, [r0, #4]
   8057a:	4770      	bx	lr

0008057c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8057c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8057e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80582:	bf14      	ite	ne
   80584:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80586:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80588:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8058c:	bf14      	ite	ne
   8058e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80590:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80592:	f012 0f02 	tst.w	r2, #2
   80596:	d002      	beq.n	8059e <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80598:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8059c:	e004      	b.n	805a8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8059e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   805a2:	bf18      	it	ne
   805a4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   805a8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   805aa:	6001      	str	r1, [r0, #0]
   805ac:	4770      	bx	lr
   805ae:	bf00      	nop

000805b0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   805b0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   805b2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   805b4:	9c01      	ldr	r4, [sp, #4]
   805b6:	b10c      	cbz	r4, 805bc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   805b8:	6641      	str	r1, [r0, #100]	; 0x64
   805ba:	e000      	b.n	805be <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   805bc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   805be:	b10b      	cbz	r3, 805c4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   805c0:	6501      	str	r1, [r0, #80]	; 0x50
   805c2:	e000      	b.n	805c6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   805c4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   805c6:	b10a      	cbz	r2, 805cc <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   805c8:	6301      	str	r1, [r0, #48]	; 0x30
   805ca:	e000      	b.n	805ce <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   805cc:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   805ce:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   805d0:	6001      	str	r1, [r0, #0]
}
   805d2:	f85d 4b04 	ldr.w	r4, [sp], #4
   805d6:	4770      	bx	lr

000805d8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   805d8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   805da:	4770      	bx	lr

000805dc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   805dc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   805de:	4770      	bx	lr

000805e0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   805e0:	b570      	push	{r4, r5, r6, lr}
   805e2:	b082      	sub	sp, #8
   805e4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   805e6:	0944      	lsrs	r4, r0, #5
   805e8:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   805ec:	f204 7407 	addw	r4, r4, #1799	; 0x707
   805f0:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   805f2:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   805f6:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   805fa:	d030      	beq.n	8065e <pio_configure_pin+0x7e>
   805fc:	d806      	bhi.n	8060c <pio_configure_pin+0x2c>
   805fe:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80602:	d00a      	beq.n	8061a <pio_configure_pin+0x3a>
   80604:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80608:	d018      	beq.n	8063c <pio_configure_pin+0x5c>
   8060a:	e049      	b.n	806a0 <pio_configure_pin+0xc0>
   8060c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80610:	d030      	beq.n	80674 <pio_configure_pin+0x94>
   80612:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80616:	d02d      	beq.n	80674 <pio_configure_pin+0x94>
   80618:	e042      	b.n	806a0 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8061a:	f000 001f 	and.w	r0, r0, #31
   8061e:	2401      	movs	r4, #1
   80620:	4084      	lsls	r4, r0
   80622:	4630      	mov	r0, r6
   80624:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80628:	4622      	mov	r2, r4
   8062a:	4b1f      	ldr	r3, [pc, #124]	; (806a8 <pio_configure_pin+0xc8>)
   8062c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8062e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80632:	bf14      	ite	ne
   80634:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80636:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80638:	2001      	movs	r0, #1
   8063a:	e032      	b.n	806a2 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8063c:	f000 001f 	and.w	r0, r0, #31
   80640:	2401      	movs	r4, #1
   80642:	4084      	lsls	r4, r0
   80644:	4630      	mov	r0, r6
   80646:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8064a:	4622      	mov	r2, r4
   8064c:	4b16      	ldr	r3, [pc, #88]	; (806a8 <pio_configure_pin+0xc8>)
   8064e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80650:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80654:	bf14      	ite	ne
   80656:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80658:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8065a:	2001      	movs	r0, #1
   8065c:	e021      	b.n	806a2 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8065e:	f000 011f 	and.w	r1, r0, #31
   80662:	2401      	movs	r4, #1
   80664:	4630      	mov	r0, r6
   80666:	fa04 f101 	lsl.w	r1, r4, r1
   8066a:	462a      	mov	r2, r5
   8066c:	4b0f      	ldr	r3, [pc, #60]	; (806ac <pio_configure_pin+0xcc>)
   8066e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80670:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80672:	e016      	b.n	806a2 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80674:	f000 011f 	and.w	r1, r0, #31
   80678:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8067a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8067e:	ea05 0304 	and.w	r3, r5, r4
   80682:	9300      	str	r3, [sp, #0]
   80684:	4630      	mov	r0, r6
   80686:	fa04 f101 	lsl.w	r1, r4, r1
   8068a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8068e:	bf14      	ite	ne
   80690:	2200      	movne	r2, #0
   80692:	2201      	moveq	r2, #1
   80694:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80698:	4d05      	ldr	r5, [pc, #20]	; (806b0 <pio_configure_pin+0xd0>)
   8069a:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   8069c:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8069e:	e000      	b.n	806a2 <pio_configure_pin+0xc2>

	default:
		return 0;
   806a0:	2000      	movs	r0, #0
	}

	return 1;
}
   806a2:	b002      	add	sp, #8
   806a4:	bd70      	pop	{r4, r5, r6, pc}
   806a6:	bf00      	nop
   806a8:	0008053d 	.word	0x0008053d
   806ac:	0008057d 	.word	0x0008057d
   806b0:	000805b1 	.word	0x000805b1

000806b4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   806b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   806b6:	b083      	sub	sp, #12
   806b8:	4607      	mov	r7, r0
   806ba:	460e      	mov	r6, r1
   806bc:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   806be:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   806c2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   806c6:	d026      	beq.n	80716 <pio_configure_pin_group+0x62>
   806c8:	d806      	bhi.n	806d8 <pio_configure_pin_group+0x24>
   806ca:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   806ce:	d00a      	beq.n	806e6 <pio_configure_pin_group+0x32>
   806d0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   806d4:	d013      	beq.n	806fe <pio_configure_pin_group+0x4a>
   806d6:	e034      	b.n	80742 <pio_configure_pin_group+0x8e>
   806d8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   806dc:	d01f      	beq.n	8071e <pio_configure_pin_group+0x6a>
   806de:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   806e2:	d01c      	beq.n	8071e <pio_configure_pin_group+0x6a>
   806e4:	e02d      	b.n	80742 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   806e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   806ea:	4632      	mov	r2, r6
   806ec:	4b16      	ldr	r3, [pc, #88]	; (80748 <pio_configure_pin_group+0x94>)
   806ee:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   806f0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   806f4:	bf14      	ite	ne
   806f6:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   806f8:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   806fa:	2001      	movs	r0, #1
   806fc:	e022      	b.n	80744 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   806fe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80702:	4632      	mov	r2, r6
   80704:	4b10      	ldr	r3, [pc, #64]	; (80748 <pio_configure_pin_group+0x94>)
   80706:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80708:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8070c:	bf14      	ite	ne
   8070e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80710:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80712:	2001      	movs	r0, #1
   80714:	e016      	b.n	80744 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80716:	4b0d      	ldr	r3, [pc, #52]	; (8074c <pio_configure_pin_group+0x98>)
   80718:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8071a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   8071c:	e012      	b.n	80744 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8071e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80722:	f005 0301 	and.w	r3, r5, #1
   80726:	9300      	str	r3, [sp, #0]
   80728:	4638      	mov	r0, r7
   8072a:	4631      	mov	r1, r6
   8072c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80730:	bf14      	ite	ne
   80732:	2200      	movne	r2, #0
   80734:	2201      	moveq	r2, #1
   80736:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8073a:	4c05      	ldr	r4, [pc, #20]	; (80750 <pio_configure_pin_group+0x9c>)
   8073c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8073e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80740:	e000      	b.n	80744 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80742:	2000      	movs	r0, #0
	}

	return 1;
}
   80744:	b003      	add	sp, #12
   80746:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80748:	0008053d 	.word	0x0008053d
   8074c:	0008057d 	.word	0x0008057d
   80750:	000805b1 	.word	0x000805b1

00080754 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80758:	4604      	mov	r4, r0
   8075a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8075c:	4b10      	ldr	r3, [pc, #64]	; (807a0 <pio_handler_process+0x4c>)
   8075e:	4798      	blx	r3
   80760:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80762:	4620      	mov	r0, r4
   80764:	4b0f      	ldr	r3, [pc, #60]	; (807a4 <pio_handler_process+0x50>)
   80766:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80768:	4005      	ands	r5, r0
   8076a:	d017      	beq.n	8079c <pio_handler_process+0x48>
   8076c:	4f0e      	ldr	r7, [pc, #56]	; (807a8 <pio_handler_process+0x54>)
   8076e:	f107 040c 	add.w	r4, r7, #12
   80772:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80774:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80778:	42b3      	cmp	r3, r6
   8077a:	d10a      	bne.n	80792 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8077c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80780:	4229      	tst	r1, r5
   80782:	d006      	beq.n	80792 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80784:	6823      	ldr	r3, [r4, #0]
   80786:	4630      	mov	r0, r6
   80788:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8078a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8078e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80792:	42bc      	cmp	r4, r7
   80794:	d002      	beq.n	8079c <pio_handler_process+0x48>
   80796:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80798:	2d00      	cmp	r5, #0
   8079a:	d1eb      	bne.n	80774 <pio_handler_process+0x20>
   8079c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   807a0:	000805d9 	.word	0x000805d9
   807a4:	000805dd 	.word	0x000805dd
   807a8:	200709b0 	.word	0x200709b0

000807ac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   807ac:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   807ae:	4802      	ldr	r0, [pc, #8]	; (807b8 <PIOA_Handler+0xc>)
   807b0:	210b      	movs	r1, #11
   807b2:	4b02      	ldr	r3, [pc, #8]	; (807bc <PIOA_Handler+0x10>)
   807b4:	4798      	blx	r3
   807b6:	bd08      	pop	{r3, pc}
   807b8:	400e0e00 	.word	0x400e0e00
   807bc:	00080755 	.word	0x00080755

000807c0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   807c0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   807c2:	4802      	ldr	r0, [pc, #8]	; (807cc <PIOB_Handler+0xc>)
   807c4:	210c      	movs	r1, #12
   807c6:	4b02      	ldr	r3, [pc, #8]	; (807d0 <PIOB_Handler+0x10>)
   807c8:	4798      	blx	r3
   807ca:	bd08      	pop	{r3, pc}
   807cc:	400e1000 	.word	0x400e1000
   807d0:	00080755 	.word	0x00080755

000807d4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   807d4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   807d6:	4802      	ldr	r0, [pc, #8]	; (807e0 <PIOC_Handler+0xc>)
   807d8:	210d      	movs	r1, #13
   807da:	4b02      	ldr	r3, [pc, #8]	; (807e4 <PIOC_Handler+0x10>)
   807dc:	4798      	blx	r3
   807de:	bd08      	pop	{r3, pc}
   807e0:	400e1200 	.word	0x400e1200
   807e4:	00080755 	.word	0x00080755

000807e8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   807e8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   807ea:	4802      	ldr	r0, [pc, #8]	; (807f4 <PIOD_Handler+0xc>)
   807ec:	210e      	movs	r1, #14
   807ee:	4b02      	ldr	r3, [pc, #8]	; (807f8 <PIOD_Handler+0x10>)
   807f0:	4798      	blx	r3
   807f2:	bd08      	pop	{r3, pc}
   807f4:	400e1400 	.word	0x400e1400
   807f8:	00080755 	.word	0x00080755

000807fc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   807fc:	4b17      	ldr	r3, [pc, #92]	; (8085c <pmc_switch_mck_to_pllack+0x60>)
   807fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80800:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   80804:	4310      	orrs	r0, r2
   80806:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8080a:	f013 0f08 	tst.w	r3, #8
   8080e:	d109      	bne.n	80824 <pmc_switch_mck_to_pllack+0x28>
   80810:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80814:	4911      	ldr	r1, [pc, #68]	; (8085c <pmc_switch_mck_to_pllack+0x60>)
   80816:	e001      	b.n	8081c <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80818:	3b01      	subs	r3, #1
   8081a:	d019      	beq.n	80850 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8081c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8081e:	f012 0f08 	tst.w	r2, #8
   80822:	d0f9      	beq.n	80818 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80824:	4b0d      	ldr	r3, [pc, #52]	; (8085c <pmc_switch_mck_to_pllack+0x60>)
   80826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80828:	f022 0203 	bic.w	r2, r2, #3
   8082c:	f042 0202 	orr.w	r2, r2, #2
   80830:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80832:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80834:	f010 0008 	ands.w	r0, r0, #8
   80838:	d10c      	bne.n	80854 <pmc_switch_mck_to_pllack+0x58>
   8083a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8083e:	4907      	ldr	r1, [pc, #28]	; (8085c <pmc_switch_mck_to_pllack+0x60>)
   80840:	e001      	b.n	80846 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80842:	3b01      	subs	r3, #1
   80844:	d008      	beq.n	80858 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80846:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80848:	f012 0f08 	tst.w	r2, #8
   8084c:	d0f9      	beq.n	80842 <pmc_switch_mck_to_pllack+0x46>
   8084e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80850:	2001      	movs	r0, #1
   80852:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80854:	2000      	movs	r0, #0
   80856:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80858:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8085a:	4770      	bx	lr
   8085c:	400e0600 	.word	0x400e0600

00080860 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80860:	b138      	cbz	r0, 80872 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80862:	4911      	ldr	r1, [pc, #68]	; (808a8 <pmc_switch_mainck_to_xtal+0x48>)
   80864:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80866:	4a11      	ldr	r2, [pc, #68]	; (808ac <pmc_switch_mainck_to_xtal+0x4c>)
   80868:	401a      	ands	r2, r3
   8086a:	4b11      	ldr	r3, [pc, #68]	; (808b0 <pmc_switch_mainck_to_xtal+0x50>)
   8086c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8086e:	620b      	str	r3, [r1, #32]
   80870:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80872:	4a0d      	ldr	r2, [pc, #52]	; (808a8 <pmc_switch_mainck_to_xtal+0x48>)
   80874:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80876:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8087a:	f023 0303 	bic.w	r3, r3, #3
   8087e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80882:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80886:	0209      	lsls	r1, r1, #8
   80888:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8088a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8088c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8088e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80890:	f013 0f01 	tst.w	r3, #1
   80894:	d0fb      	beq.n	8088e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80896:	4a04      	ldr	r2, [pc, #16]	; (808a8 <pmc_switch_mainck_to_xtal+0x48>)
   80898:	6a13      	ldr	r3, [r2, #32]
   8089a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8089e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   808a2:	6213      	str	r3, [r2, #32]
   808a4:	4770      	bx	lr
   808a6:	bf00      	nop
   808a8:	400e0600 	.word	0x400e0600
   808ac:	fec8fffc 	.word	0xfec8fffc
   808b0:	01370002 	.word	0x01370002

000808b4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   808b4:	4b02      	ldr	r3, [pc, #8]	; (808c0 <pmc_osc_is_ready_mainck+0xc>)
   808b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   808b8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   808bc:	4770      	bx	lr
   808be:	bf00      	nop
   808c0:	400e0600 	.word	0x400e0600

000808c4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   808c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   808c8:	4b01      	ldr	r3, [pc, #4]	; (808d0 <pmc_disable_pllack+0xc>)
   808ca:	629a      	str	r2, [r3, #40]	; 0x28
   808cc:	4770      	bx	lr
   808ce:	bf00      	nop
   808d0:	400e0600 	.word	0x400e0600

000808d4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   808d4:	4b02      	ldr	r3, [pc, #8]	; (808e0 <pmc_is_locked_pllack+0xc>)
   808d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   808d8:	f000 0002 	and.w	r0, r0, #2
   808dc:	4770      	bx	lr
   808de:	bf00      	nop
   808e0:	400e0600 	.word	0x400e0600

000808e4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   808e4:	282c      	cmp	r0, #44	; 0x2c
   808e6:	d820      	bhi.n	8092a <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   808e8:	281f      	cmp	r0, #31
   808ea:	d80d      	bhi.n	80908 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   808ec:	4b12      	ldr	r3, [pc, #72]	; (80938 <pmc_enable_periph_clk+0x54>)
   808ee:	699a      	ldr	r2, [r3, #24]
   808f0:	2301      	movs	r3, #1
   808f2:	4083      	lsls	r3, r0
   808f4:	401a      	ands	r2, r3
   808f6:	4293      	cmp	r3, r2
   808f8:	d019      	beq.n	8092e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   808fa:	2301      	movs	r3, #1
   808fc:	fa03 f000 	lsl.w	r0, r3, r0
   80900:	4b0d      	ldr	r3, [pc, #52]	; (80938 <pmc_enable_periph_clk+0x54>)
   80902:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80904:	2000      	movs	r0, #0
   80906:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80908:	4b0b      	ldr	r3, [pc, #44]	; (80938 <pmc_enable_periph_clk+0x54>)
   8090a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   8090e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80910:	2301      	movs	r3, #1
   80912:	4083      	lsls	r3, r0
   80914:	401a      	ands	r2, r3
   80916:	4293      	cmp	r3, r2
   80918:	d00b      	beq.n	80932 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   8091a:	2301      	movs	r3, #1
   8091c:	fa03 f000 	lsl.w	r0, r3, r0
   80920:	4b05      	ldr	r3, [pc, #20]	; (80938 <pmc_enable_periph_clk+0x54>)
   80922:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80926:	2000      	movs	r0, #0
   80928:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8092a:	2001      	movs	r0, #1
   8092c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8092e:	2000      	movs	r0, #0
   80930:	4770      	bx	lr
   80932:	2000      	movs	r0, #0
}
   80934:	4770      	bx	lr
   80936:	bf00      	nop
   80938:	400e0600 	.word	0x400e0600

0008093c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8093c:	e7fe      	b.n	8093c <Dummy_Handler>
   8093e:	bf00      	nop

00080940 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80940:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80942:	4b1e      	ldr	r3, [pc, #120]	; (809bc <Reset_Handler+0x7c>)
   80944:	4a1e      	ldr	r2, [pc, #120]	; (809c0 <Reset_Handler+0x80>)
   80946:	429a      	cmp	r2, r3
   80948:	d003      	beq.n	80952 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8094a:	4b1e      	ldr	r3, [pc, #120]	; (809c4 <Reset_Handler+0x84>)
   8094c:	4a1b      	ldr	r2, [pc, #108]	; (809bc <Reset_Handler+0x7c>)
   8094e:	429a      	cmp	r2, r3
   80950:	d304      	bcc.n	8095c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80952:	4b1d      	ldr	r3, [pc, #116]	; (809c8 <Reset_Handler+0x88>)
   80954:	4a1d      	ldr	r2, [pc, #116]	; (809cc <Reset_Handler+0x8c>)
   80956:	429a      	cmp	r2, r3
   80958:	d30f      	bcc.n	8097a <Reset_Handler+0x3a>
   8095a:	e01a      	b.n	80992 <Reset_Handler+0x52>
   8095c:	4b1c      	ldr	r3, [pc, #112]	; (809d0 <Reset_Handler+0x90>)
   8095e:	4c1d      	ldr	r4, [pc, #116]	; (809d4 <Reset_Handler+0x94>)
   80960:	1ae4      	subs	r4, r4, r3
   80962:	f024 0403 	bic.w	r4, r4, #3
   80966:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80968:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   8096a:	4814      	ldr	r0, [pc, #80]	; (809bc <Reset_Handler+0x7c>)
   8096c:	4914      	ldr	r1, [pc, #80]	; (809c0 <Reset_Handler+0x80>)
   8096e:	585a      	ldr	r2, [r3, r1]
   80970:	501a      	str	r2, [r3, r0]
   80972:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80974:	42a3      	cmp	r3, r4
   80976:	d1fa      	bne.n	8096e <Reset_Handler+0x2e>
   80978:	e7eb      	b.n	80952 <Reset_Handler+0x12>
   8097a:	4b17      	ldr	r3, [pc, #92]	; (809d8 <Reset_Handler+0x98>)
   8097c:	4917      	ldr	r1, [pc, #92]	; (809dc <Reset_Handler+0x9c>)
   8097e:	1ac9      	subs	r1, r1, r3
   80980:	f021 0103 	bic.w	r1, r1, #3
   80984:	1d1a      	adds	r2, r3, #4
   80986:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80988:	2200      	movs	r2, #0
   8098a:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8098e:	428b      	cmp	r3, r1
   80990:	d1fb      	bne.n	8098a <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80992:	4a13      	ldr	r2, [pc, #76]	; (809e0 <Reset_Handler+0xa0>)
   80994:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80998:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8099c:	4911      	ldr	r1, [pc, #68]	; (809e4 <Reset_Handler+0xa4>)
   8099e:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   809a0:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   809a4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   809a8:	d203      	bcs.n	809b2 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   809aa:	688a      	ldr	r2, [r1, #8]
   809ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   809b0:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   809b2:	4b0d      	ldr	r3, [pc, #52]	; (809e8 <Reset_Handler+0xa8>)
   809b4:	4798      	blx	r3

	/* Branch to main function */
	main();
   809b6:	4b0d      	ldr	r3, [pc, #52]	; (809ec <Reset_Handler+0xac>)
   809b8:	4798      	blx	r3
   809ba:	e7fe      	b.n	809ba <Reset_Handler+0x7a>
   809bc:	20070000 	.word	0x20070000
   809c0:	00083b94 	.word	0x00083b94
   809c4:	20070994 	.word	0x20070994
   809c8:	20070a68 	.word	0x20070a68
   809cc:	20070994 	.word	0x20070994
   809d0:	20070004 	.word	0x20070004
   809d4:	20070997 	.word	0x20070997
   809d8:	20070990 	.word	0x20070990
   809dc:	20070a63 	.word	0x20070a63
   809e0:	00080000 	.word	0x00080000
   809e4:	e000ed00 	.word	0xe000ed00
   809e8:	0008111d 	.word	0x0008111d
   809ec:	0008032d 	.word	0x0008032d

000809f0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   809f0:	4b3e      	ldr	r3, [pc, #248]	; (80aec <SystemCoreClockUpdate+0xfc>)
   809f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   809f4:	f003 0303 	and.w	r3, r3, #3
   809f8:	2b03      	cmp	r3, #3
   809fa:	d85f      	bhi.n	80abc <SystemCoreClockUpdate+0xcc>
   809fc:	e8df f003 	tbb	[pc, r3]
   80a00:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80a04:	4b3a      	ldr	r3, [pc, #232]	; (80af0 <SystemCoreClockUpdate+0x100>)
   80a06:	695b      	ldr	r3, [r3, #20]
   80a08:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80a0c:	bf14      	ite	ne
   80a0e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80a12:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80a16:	4b37      	ldr	r3, [pc, #220]	; (80af4 <SystemCoreClockUpdate+0x104>)
   80a18:	601a      	str	r2, [r3, #0]
   80a1a:	e04f      	b.n	80abc <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80a1c:	4b33      	ldr	r3, [pc, #204]	; (80aec <SystemCoreClockUpdate+0xfc>)
   80a1e:	6a1b      	ldr	r3, [r3, #32]
   80a20:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80a24:	d003      	beq.n	80a2e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80a26:	4a34      	ldr	r2, [pc, #208]	; (80af8 <SystemCoreClockUpdate+0x108>)
   80a28:	4b32      	ldr	r3, [pc, #200]	; (80af4 <SystemCoreClockUpdate+0x104>)
   80a2a:	601a      	str	r2, [r3, #0]
   80a2c:	e046      	b.n	80abc <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80a2e:	4a33      	ldr	r2, [pc, #204]	; (80afc <SystemCoreClockUpdate+0x10c>)
   80a30:	4b30      	ldr	r3, [pc, #192]	; (80af4 <SystemCoreClockUpdate+0x104>)
   80a32:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80a34:	4b2d      	ldr	r3, [pc, #180]	; (80aec <SystemCoreClockUpdate+0xfc>)
   80a36:	6a1b      	ldr	r3, [r3, #32]
   80a38:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a3c:	2b10      	cmp	r3, #16
   80a3e:	d002      	beq.n	80a46 <SystemCoreClockUpdate+0x56>
   80a40:	2b20      	cmp	r3, #32
   80a42:	d004      	beq.n	80a4e <SystemCoreClockUpdate+0x5e>
   80a44:	e03a      	b.n	80abc <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80a46:	4a2e      	ldr	r2, [pc, #184]	; (80b00 <SystemCoreClockUpdate+0x110>)
   80a48:	4b2a      	ldr	r3, [pc, #168]	; (80af4 <SystemCoreClockUpdate+0x104>)
   80a4a:	601a      	str	r2, [r3, #0]
				break;
   80a4c:	e036      	b.n	80abc <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80a4e:	4a2a      	ldr	r2, [pc, #168]	; (80af8 <SystemCoreClockUpdate+0x108>)
   80a50:	4b28      	ldr	r3, [pc, #160]	; (80af4 <SystemCoreClockUpdate+0x104>)
   80a52:	601a      	str	r2, [r3, #0]
				break;
   80a54:	e032      	b.n	80abc <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80a56:	4b25      	ldr	r3, [pc, #148]	; (80aec <SystemCoreClockUpdate+0xfc>)
   80a58:	6a1b      	ldr	r3, [r3, #32]
   80a5a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80a5e:	d003      	beq.n	80a68 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80a60:	4a25      	ldr	r2, [pc, #148]	; (80af8 <SystemCoreClockUpdate+0x108>)
   80a62:	4b24      	ldr	r3, [pc, #144]	; (80af4 <SystemCoreClockUpdate+0x104>)
   80a64:	601a      	str	r2, [r3, #0]
   80a66:	e012      	b.n	80a8e <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80a68:	4a24      	ldr	r2, [pc, #144]	; (80afc <SystemCoreClockUpdate+0x10c>)
   80a6a:	4b22      	ldr	r3, [pc, #136]	; (80af4 <SystemCoreClockUpdate+0x104>)
   80a6c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80a6e:	4b1f      	ldr	r3, [pc, #124]	; (80aec <SystemCoreClockUpdate+0xfc>)
   80a70:	6a1b      	ldr	r3, [r3, #32]
   80a72:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a76:	2b10      	cmp	r3, #16
   80a78:	d002      	beq.n	80a80 <SystemCoreClockUpdate+0x90>
   80a7a:	2b20      	cmp	r3, #32
   80a7c:	d004      	beq.n	80a88 <SystemCoreClockUpdate+0x98>
   80a7e:	e006      	b.n	80a8e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80a80:	4a1f      	ldr	r2, [pc, #124]	; (80b00 <SystemCoreClockUpdate+0x110>)
   80a82:	4b1c      	ldr	r3, [pc, #112]	; (80af4 <SystemCoreClockUpdate+0x104>)
   80a84:	601a      	str	r2, [r3, #0]
				break;
   80a86:	e002      	b.n	80a8e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80a88:	4a1b      	ldr	r2, [pc, #108]	; (80af8 <SystemCoreClockUpdate+0x108>)
   80a8a:	4b1a      	ldr	r3, [pc, #104]	; (80af4 <SystemCoreClockUpdate+0x104>)
   80a8c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80a8e:	4b17      	ldr	r3, [pc, #92]	; (80aec <SystemCoreClockUpdate+0xfc>)
   80a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a92:	f003 0303 	and.w	r3, r3, #3
   80a96:	2b02      	cmp	r3, #2
   80a98:	d10d      	bne.n	80ab6 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80a9a:	4b14      	ldr	r3, [pc, #80]	; (80aec <SystemCoreClockUpdate+0xfc>)
   80a9c:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80a9e:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80aa0:	4b14      	ldr	r3, [pc, #80]	; (80af4 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80aa2:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80aa6:	681a      	ldr	r2, [r3, #0]
   80aa8:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80aac:	b2c9      	uxtb	r1, r1
   80aae:	fbb2 f2f1 	udiv	r2, r2, r1
   80ab2:	601a      	str	r2, [r3, #0]
   80ab4:	e002      	b.n	80abc <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80ab6:	4a13      	ldr	r2, [pc, #76]	; (80b04 <SystemCoreClockUpdate+0x114>)
   80ab8:	4b0e      	ldr	r3, [pc, #56]	; (80af4 <SystemCoreClockUpdate+0x104>)
   80aba:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80abc:	4b0b      	ldr	r3, [pc, #44]	; (80aec <SystemCoreClockUpdate+0xfc>)
   80abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ac0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ac4:	2b70      	cmp	r3, #112	; 0x70
   80ac6:	d107      	bne.n	80ad8 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80ac8:	4b0a      	ldr	r3, [pc, #40]	; (80af4 <SystemCoreClockUpdate+0x104>)
   80aca:	681a      	ldr	r2, [r3, #0]
   80acc:	490e      	ldr	r1, [pc, #56]	; (80b08 <SystemCoreClockUpdate+0x118>)
   80ace:	fba1 0202 	umull	r0, r2, r1, r2
   80ad2:	0852      	lsrs	r2, r2, #1
   80ad4:	601a      	str	r2, [r3, #0]
   80ad6:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80ad8:	4b04      	ldr	r3, [pc, #16]	; (80aec <SystemCoreClockUpdate+0xfc>)
   80ada:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80adc:	4b05      	ldr	r3, [pc, #20]	; (80af4 <SystemCoreClockUpdate+0x104>)
   80ade:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80ae2:	681a      	ldr	r2, [r3, #0]
   80ae4:	40ca      	lsrs	r2, r1
   80ae6:	601a      	str	r2, [r3, #0]
   80ae8:	4770      	bx	lr
   80aea:	bf00      	nop
   80aec:	400e0600 	.word	0x400e0600
   80af0:	400e1a10 	.word	0x400e1a10
   80af4:	2007012c 	.word	0x2007012c
   80af8:	00b71b00 	.word	0x00b71b00
   80afc:	003d0900 	.word	0x003d0900
   80b00:	007a1200 	.word	0x007a1200
   80b04:	0e4e1c00 	.word	0x0e4e1c00
   80b08:	aaaaaaab 	.word	0xaaaaaaab

00080b0c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80b0c:	4b09      	ldr	r3, [pc, #36]	; (80b34 <_sbrk+0x28>)
   80b0e:	681b      	ldr	r3, [r3, #0]
   80b10:	b913      	cbnz	r3, 80b18 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80b12:	4a09      	ldr	r2, [pc, #36]	; (80b38 <_sbrk+0x2c>)
   80b14:	4b07      	ldr	r3, [pc, #28]	; (80b34 <_sbrk+0x28>)
   80b16:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80b18:	4b06      	ldr	r3, [pc, #24]	; (80b34 <_sbrk+0x28>)
   80b1a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80b1c:	181a      	adds	r2, r3, r0
   80b1e:	4907      	ldr	r1, [pc, #28]	; (80b3c <_sbrk+0x30>)
   80b20:	4291      	cmp	r1, r2
   80b22:	db04      	blt.n	80b2e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80b24:	4610      	mov	r0, r2
   80b26:	4a03      	ldr	r2, [pc, #12]	; (80b34 <_sbrk+0x28>)
   80b28:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80b2a:	4618      	mov	r0, r3
   80b2c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80b2e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80b32:	4770      	bx	lr
   80b34:	20070a20 	.word	0x20070a20
   80b38:	20072a68 	.word	0x20072a68
   80b3c:	20087ffc 	.word	0x20087ffc

00080b40 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80b40:	f04f 30ff 	mov.w	r0, #4294967295
   80b44:	4770      	bx	lr
   80b46:	bf00      	nop

00080b48 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80b4c:	604b      	str	r3, [r1, #4]

	return 0;
}
   80b4e:	2000      	movs	r0, #0
   80b50:	4770      	bx	lr
   80b52:	bf00      	nop

00080b54 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80b54:	2001      	movs	r0, #1
   80b56:	4770      	bx	lr

00080b58 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80b58:	2000      	movs	r0, #0
   80b5a:	4770      	bx	lr

00080b5c <__aeabi_uldivmod>:
   80b5c:	b94b      	cbnz	r3, 80b72 <__aeabi_uldivmod+0x16>
   80b5e:	b942      	cbnz	r2, 80b72 <__aeabi_uldivmod+0x16>
   80b60:	2900      	cmp	r1, #0
   80b62:	bf08      	it	eq
   80b64:	2800      	cmpeq	r0, #0
   80b66:	d002      	beq.n	80b6e <__aeabi_uldivmod+0x12>
   80b68:	f04f 31ff 	mov.w	r1, #4294967295
   80b6c:	4608      	mov	r0, r1
   80b6e:	f000 b83b 	b.w	80be8 <__aeabi_idiv0>
   80b72:	b082      	sub	sp, #8
   80b74:	46ec      	mov	ip, sp
   80b76:	e92d 5000 	stmdb	sp!, {ip, lr}
   80b7a:	f000 f81d 	bl	80bb8 <__gnu_uldivmod_helper>
   80b7e:	f8dd e004 	ldr.w	lr, [sp, #4]
   80b82:	b002      	add	sp, #8
   80b84:	bc0c      	pop	{r2, r3}
   80b86:	4770      	bx	lr

00080b88 <__gnu_ldivmod_helper>:
   80b88:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   80b8c:	9e08      	ldr	r6, [sp, #32]
   80b8e:	4614      	mov	r4, r2
   80b90:	461d      	mov	r5, r3
   80b92:	4680      	mov	r8, r0
   80b94:	4689      	mov	r9, r1
   80b96:	f000 f829 	bl	80bec <__divdi3>
   80b9a:	fb04 f301 	mul.w	r3, r4, r1
   80b9e:	fba4 ab00 	umull	sl, fp, r4, r0
   80ba2:	fb00 3205 	mla	r2, r0, r5, r3
   80ba6:	4493      	add	fp, r2
   80ba8:	ebb8 080a 	subs.w	r8, r8, sl
   80bac:	eb69 090b 	sbc.w	r9, r9, fp
   80bb0:	e9c6 8900 	strd	r8, r9, [r6]
   80bb4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00080bb8 <__gnu_uldivmod_helper>:
   80bb8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   80bbc:	9e08      	ldr	r6, [sp, #32]
   80bbe:	4614      	mov	r4, r2
   80bc0:	461d      	mov	r5, r3
   80bc2:	4680      	mov	r8, r0
   80bc4:	4689      	mov	r9, r1
   80bc6:	f000 f961 	bl	80e8c <__udivdi3>
   80bca:	fb00 f505 	mul.w	r5, r0, r5
   80bce:	fba0 ab04 	umull	sl, fp, r0, r4
   80bd2:	fb04 5401 	mla	r4, r4, r1, r5
   80bd6:	44a3      	add	fp, r4
   80bd8:	ebb8 080a 	subs.w	r8, r8, sl
   80bdc:	eb69 090b 	sbc.w	r9, r9, fp
   80be0:	e9c6 8900 	strd	r8, r9, [r6]
   80be4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00080be8 <__aeabi_idiv0>:
   80be8:	4770      	bx	lr
   80bea:	bf00      	nop

00080bec <__divdi3>:
   80bec:	2900      	cmp	r1, #0
   80bee:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80bf2:	f2c0 80a1 	blt.w	80d38 <__divdi3+0x14c>
   80bf6:	2400      	movs	r4, #0
   80bf8:	2b00      	cmp	r3, #0
   80bfa:	f2c0 8098 	blt.w	80d2e <__divdi3+0x142>
   80bfe:	4615      	mov	r5, r2
   80c00:	4606      	mov	r6, r0
   80c02:	460f      	mov	r7, r1
   80c04:	2b00      	cmp	r3, #0
   80c06:	d13f      	bne.n	80c88 <__divdi3+0x9c>
   80c08:	428a      	cmp	r2, r1
   80c0a:	d958      	bls.n	80cbe <__divdi3+0xd2>
   80c0c:	fab2 f382 	clz	r3, r2
   80c10:	b14b      	cbz	r3, 80c26 <__divdi3+0x3a>
   80c12:	f1c3 0220 	rsb	r2, r3, #32
   80c16:	fa01 f703 	lsl.w	r7, r1, r3
   80c1a:	fa20 f202 	lsr.w	r2, r0, r2
   80c1e:	409d      	lsls	r5, r3
   80c20:	fa00 f603 	lsl.w	r6, r0, r3
   80c24:	4317      	orrs	r7, r2
   80c26:	0c29      	lsrs	r1, r5, #16
   80c28:	fbb7 f2f1 	udiv	r2, r7, r1
   80c2c:	fb01 7712 	mls	r7, r1, r2, r7
   80c30:	b2a8      	uxth	r0, r5
   80c32:	fb00 f302 	mul.w	r3, r0, r2
   80c36:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   80c3a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   80c3e:	42bb      	cmp	r3, r7
   80c40:	d909      	bls.n	80c56 <__divdi3+0x6a>
   80c42:	197f      	adds	r7, r7, r5
   80c44:	f102 3cff 	add.w	ip, r2, #4294967295
   80c48:	f080 8105 	bcs.w	80e56 <__divdi3+0x26a>
   80c4c:	42bb      	cmp	r3, r7
   80c4e:	f240 8102 	bls.w	80e56 <__divdi3+0x26a>
   80c52:	3a02      	subs	r2, #2
   80c54:	442f      	add	r7, r5
   80c56:	1aff      	subs	r7, r7, r3
   80c58:	fbb7 f3f1 	udiv	r3, r7, r1
   80c5c:	fb01 7113 	mls	r1, r1, r3, r7
   80c60:	fb00 f003 	mul.w	r0, r0, r3
   80c64:	b2b6      	uxth	r6, r6
   80c66:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   80c6a:	4288      	cmp	r0, r1
   80c6c:	d908      	bls.n	80c80 <__divdi3+0x94>
   80c6e:	1949      	adds	r1, r1, r5
   80c70:	f103 37ff 	add.w	r7, r3, #4294967295
   80c74:	f080 80f1 	bcs.w	80e5a <__divdi3+0x26e>
   80c78:	4288      	cmp	r0, r1
   80c7a:	f240 80ee 	bls.w	80e5a <__divdi3+0x26e>
   80c7e:	3b02      	subs	r3, #2
   80c80:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   80c84:	2300      	movs	r3, #0
   80c86:	e003      	b.n	80c90 <__divdi3+0xa4>
   80c88:	428b      	cmp	r3, r1
   80c8a:	d90a      	bls.n	80ca2 <__divdi3+0xb6>
   80c8c:	2300      	movs	r3, #0
   80c8e:	461a      	mov	r2, r3
   80c90:	4610      	mov	r0, r2
   80c92:	4619      	mov	r1, r3
   80c94:	b114      	cbz	r4, 80c9c <__divdi3+0xb0>
   80c96:	4240      	negs	r0, r0
   80c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80c9c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80ca0:	4770      	bx	lr
   80ca2:	fab3 f883 	clz	r8, r3
   80ca6:	f1b8 0f00 	cmp.w	r8, #0
   80caa:	f040 8088 	bne.w	80dbe <__divdi3+0x1d2>
   80cae:	428b      	cmp	r3, r1
   80cb0:	d302      	bcc.n	80cb8 <__divdi3+0xcc>
   80cb2:	4282      	cmp	r2, r0
   80cb4:	f200 80e2 	bhi.w	80e7c <__divdi3+0x290>
   80cb8:	2300      	movs	r3, #0
   80cba:	2201      	movs	r2, #1
   80cbc:	e7e8      	b.n	80c90 <__divdi3+0xa4>
   80cbe:	b912      	cbnz	r2, 80cc6 <__divdi3+0xda>
   80cc0:	2301      	movs	r3, #1
   80cc2:	fbb3 f5f2 	udiv	r5, r3, r2
   80cc6:	fab5 f285 	clz	r2, r5
   80cca:	2a00      	cmp	r2, #0
   80ccc:	d13a      	bne.n	80d44 <__divdi3+0x158>
   80cce:	1b7f      	subs	r7, r7, r5
   80cd0:	0c28      	lsrs	r0, r5, #16
   80cd2:	fa1f fc85 	uxth.w	ip, r5
   80cd6:	2301      	movs	r3, #1
   80cd8:	fbb7 f1f0 	udiv	r1, r7, r0
   80cdc:	fb00 7711 	mls	r7, r0, r1, r7
   80ce0:	fb0c f201 	mul.w	r2, ip, r1
   80ce4:	ea4f 4816 	mov.w	r8, r6, lsr #16
   80ce8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   80cec:	42ba      	cmp	r2, r7
   80cee:	d907      	bls.n	80d00 <__divdi3+0x114>
   80cf0:	197f      	adds	r7, r7, r5
   80cf2:	f101 38ff 	add.w	r8, r1, #4294967295
   80cf6:	d202      	bcs.n	80cfe <__divdi3+0x112>
   80cf8:	42ba      	cmp	r2, r7
   80cfa:	f200 80c4 	bhi.w	80e86 <__divdi3+0x29a>
   80cfe:	4641      	mov	r1, r8
   80d00:	1abf      	subs	r7, r7, r2
   80d02:	fbb7 f2f0 	udiv	r2, r7, r0
   80d06:	fb00 7012 	mls	r0, r0, r2, r7
   80d0a:	fb0c fc02 	mul.w	ip, ip, r2
   80d0e:	b2b6      	uxth	r6, r6
   80d10:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   80d14:	4584      	cmp	ip, r0
   80d16:	d907      	bls.n	80d28 <__divdi3+0x13c>
   80d18:	1940      	adds	r0, r0, r5
   80d1a:	f102 37ff 	add.w	r7, r2, #4294967295
   80d1e:	d202      	bcs.n	80d26 <__divdi3+0x13a>
   80d20:	4584      	cmp	ip, r0
   80d22:	f200 80ae 	bhi.w	80e82 <__divdi3+0x296>
   80d26:	463a      	mov	r2, r7
   80d28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   80d2c:	e7b0      	b.n	80c90 <__divdi3+0xa4>
   80d2e:	43e4      	mvns	r4, r4
   80d30:	4252      	negs	r2, r2
   80d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80d36:	e762      	b.n	80bfe <__divdi3+0x12>
   80d38:	4240      	negs	r0, r0
   80d3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80d3e:	f04f 34ff 	mov.w	r4, #4294967295
   80d42:	e759      	b.n	80bf8 <__divdi3+0xc>
   80d44:	4095      	lsls	r5, r2
   80d46:	f1c2 0920 	rsb	r9, r2, #32
   80d4a:	fa27 f109 	lsr.w	r1, r7, r9
   80d4e:	fa26 f909 	lsr.w	r9, r6, r9
   80d52:	4097      	lsls	r7, r2
   80d54:	0c28      	lsrs	r0, r5, #16
   80d56:	fbb1 f8f0 	udiv	r8, r1, r0
   80d5a:	fb00 1118 	mls	r1, r0, r8, r1
   80d5e:	fa1f fc85 	uxth.w	ip, r5
   80d62:	fb0c f308 	mul.w	r3, ip, r8
   80d66:	ea49 0907 	orr.w	r9, r9, r7
   80d6a:	ea4f 4719 	mov.w	r7, r9, lsr #16
   80d6e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   80d72:	428b      	cmp	r3, r1
   80d74:	fa06 f602 	lsl.w	r6, r6, r2
   80d78:	d908      	bls.n	80d8c <__divdi3+0x1a0>
   80d7a:	1949      	adds	r1, r1, r5
   80d7c:	f108 32ff 	add.w	r2, r8, #4294967295
   80d80:	d27a      	bcs.n	80e78 <__divdi3+0x28c>
   80d82:	428b      	cmp	r3, r1
   80d84:	d978      	bls.n	80e78 <__divdi3+0x28c>
   80d86:	f1a8 0802 	sub.w	r8, r8, #2
   80d8a:	4429      	add	r1, r5
   80d8c:	1ac9      	subs	r1, r1, r3
   80d8e:	fbb1 f3f0 	udiv	r3, r1, r0
   80d92:	fb00 1713 	mls	r7, r0, r3, r1
   80d96:	fb0c f203 	mul.w	r2, ip, r3
   80d9a:	fa1f f989 	uxth.w	r9, r9
   80d9e:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   80da2:	42ba      	cmp	r2, r7
   80da4:	d907      	bls.n	80db6 <__divdi3+0x1ca>
   80da6:	197f      	adds	r7, r7, r5
   80da8:	f103 31ff 	add.w	r1, r3, #4294967295
   80dac:	d260      	bcs.n	80e70 <__divdi3+0x284>
   80dae:	42ba      	cmp	r2, r7
   80db0:	d95e      	bls.n	80e70 <__divdi3+0x284>
   80db2:	3b02      	subs	r3, #2
   80db4:	442f      	add	r7, r5
   80db6:	1abf      	subs	r7, r7, r2
   80db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   80dbc:	e78c      	b.n	80cd8 <__divdi3+0xec>
   80dbe:	f1c8 0220 	rsb	r2, r8, #32
   80dc2:	fa25 f102 	lsr.w	r1, r5, r2
   80dc6:	fa03 fc08 	lsl.w	ip, r3, r8
   80dca:	fa27 f302 	lsr.w	r3, r7, r2
   80dce:	fa20 f202 	lsr.w	r2, r0, r2
   80dd2:	fa07 f708 	lsl.w	r7, r7, r8
   80dd6:	ea41 0c0c 	orr.w	ip, r1, ip
   80dda:	ea4f 491c 	mov.w	r9, ip, lsr #16
   80dde:	fbb3 f1f9 	udiv	r1, r3, r9
   80de2:	fb09 3311 	mls	r3, r9, r1, r3
   80de6:	fa1f fa8c 	uxth.w	sl, ip
   80dea:	fb0a fb01 	mul.w	fp, sl, r1
   80dee:	4317      	orrs	r7, r2
   80df0:	0c3a      	lsrs	r2, r7, #16
   80df2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   80df6:	459b      	cmp	fp, r3
   80df8:	fa05 f008 	lsl.w	r0, r5, r8
   80dfc:	d908      	bls.n	80e10 <__divdi3+0x224>
   80dfe:	eb13 030c 	adds.w	r3, r3, ip
   80e02:	f101 32ff 	add.w	r2, r1, #4294967295
   80e06:	d235      	bcs.n	80e74 <__divdi3+0x288>
   80e08:	459b      	cmp	fp, r3
   80e0a:	d933      	bls.n	80e74 <__divdi3+0x288>
   80e0c:	3902      	subs	r1, #2
   80e0e:	4463      	add	r3, ip
   80e10:	ebcb 0303 	rsb	r3, fp, r3
   80e14:	fbb3 f2f9 	udiv	r2, r3, r9
   80e18:	fb09 3312 	mls	r3, r9, r2, r3
   80e1c:	fb0a fa02 	mul.w	sl, sl, r2
   80e20:	b2bf      	uxth	r7, r7
   80e22:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   80e26:	45ba      	cmp	sl, r7
   80e28:	d908      	bls.n	80e3c <__divdi3+0x250>
   80e2a:	eb17 070c 	adds.w	r7, r7, ip
   80e2e:	f102 33ff 	add.w	r3, r2, #4294967295
   80e32:	d21b      	bcs.n	80e6c <__divdi3+0x280>
   80e34:	45ba      	cmp	sl, r7
   80e36:	d919      	bls.n	80e6c <__divdi3+0x280>
   80e38:	3a02      	subs	r2, #2
   80e3a:	4467      	add	r7, ip
   80e3c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   80e40:	fba5 0100 	umull	r0, r1, r5, r0
   80e44:	ebca 0707 	rsb	r7, sl, r7
   80e48:	428f      	cmp	r7, r1
   80e4a:	f04f 0300 	mov.w	r3, #0
   80e4e:	d30a      	bcc.n	80e66 <__divdi3+0x27a>
   80e50:	d005      	beq.n	80e5e <__divdi3+0x272>
   80e52:	462a      	mov	r2, r5
   80e54:	e71c      	b.n	80c90 <__divdi3+0xa4>
   80e56:	4662      	mov	r2, ip
   80e58:	e6fd      	b.n	80c56 <__divdi3+0x6a>
   80e5a:	463b      	mov	r3, r7
   80e5c:	e710      	b.n	80c80 <__divdi3+0x94>
   80e5e:	fa06 f608 	lsl.w	r6, r6, r8
   80e62:	4286      	cmp	r6, r0
   80e64:	d2f5      	bcs.n	80e52 <__divdi3+0x266>
   80e66:	1e6a      	subs	r2, r5, #1
   80e68:	2300      	movs	r3, #0
   80e6a:	e711      	b.n	80c90 <__divdi3+0xa4>
   80e6c:	461a      	mov	r2, r3
   80e6e:	e7e5      	b.n	80e3c <__divdi3+0x250>
   80e70:	460b      	mov	r3, r1
   80e72:	e7a0      	b.n	80db6 <__divdi3+0x1ca>
   80e74:	4611      	mov	r1, r2
   80e76:	e7cb      	b.n	80e10 <__divdi3+0x224>
   80e78:	4690      	mov	r8, r2
   80e7a:	e787      	b.n	80d8c <__divdi3+0x1a0>
   80e7c:	4643      	mov	r3, r8
   80e7e:	4642      	mov	r2, r8
   80e80:	e706      	b.n	80c90 <__divdi3+0xa4>
   80e82:	3a02      	subs	r2, #2
   80e84:	e750      	b.n	80d28 <__divdi3+0x13c>
   80e86:	3902      	subs	r1, #2
   80e88:	442f      	add	r7, r5
   80e8a:	e739      	b.n	80d00 <__divdi3+0x114>

00080e8c <__udivdi3>:
   80e8c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80e90:	4614      	mov	r4, r2
   80e92:	4605      	mov	r5, r0
   80e94:	460e      	mov	r6, r1
   80e96:	2b00      	cmp	r3, #0
   80e98:	d143      	bne.n	80f22 <__udivdi3+0x96>
   80e9a:	428a      	cmp	r2, r1
   80e9c:	d953      	bls.n	80f46 <__udivdi3+0xba>
   80e9e:	fab2 f782 	clz	r7, r2
   80ea2:	b157      	cbz	r7, 80eba <__udivdi3+0x2e>
   80ea4:	f1c7 0620 	rsb	r6, r7, #32
   80ea8:	fa20 f606 	lsr.w	r6, r0, r6
   80eac:	fa01 f307 	lsl.w	r3, r1, r7
   80eb0:	fa02 f407 	lsl.w	r4, r2, r7
   80eb4:	fa00 f507 	lsl.w	r5, r0, r7
   80eb8:	431e      	orrs	r6, r3
   80eba:	0c21      	lsrs	r1, r4, #16
   80ebc:	fbb6 f2f1 	udiv	r2, r6, r1
   80ec0:	fb01 6612 	mls	r6, r1, r2, r6
   80ec4:	b2a0      	uxth	r0, r4
   80ec6:	fb00 f302 	mul.w	r3, r0, r2
   80eca:	0c2f      	lsrs	r7, r5, #16
   80ecc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   80ed0:	42b3      	cmp	r3, r6
   80ed2:	d909      	bls.n	80ee8 <__udivdi3+0x5c>
   80ed4:	1936      	adds	r6, r6, r4
   80ed6:	f102 37ff 	add.w	r7, r2, #4294967295
   80eda:	f080 80fd 	bcs.w	810d8 <__udivdi3+0x24c>
   80ede:	42b3      	cmp	r3, r6
   80ee0:	f240 80fa 	bls.w	810d8 <__udivdi3+0x24c>
   80ee4:	3a02      	subs	r2, #2
   80ee6:	4426      	add	r6, r4
   80ee8:	1af6      	subs	r6, r6, r3
   80eea:	fbb6 f3f1 	udiv	r3, r6, r1
   80eee:	fb01 6113 	mls	r1, r1, r3, r6
   80ef2:	fb00 f003 	mul.w	r0, r0, r3
   80ef6:	b2ad      	uxth	r5, r5
   80ef8:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   80efc:	4288      	cmp	r0, r1
   80efe:	d908      	bls.n	80f12 <__udivdi3+0x86>
   80f00:	1909      	adds	r1, r1, r4
   80f02:	f103 36ff 	add.w	r6, r3, #4294967295
   80f06:	f080 80e9 	bcs.w	810dc <__udivdi3+0x250>
   80f0a:	4288      	cmp	r0, r1
   80f0c:	f240 80e6 	bls.w	810dc <__udivdi3+0x250>
   80f10:	3b02      	subs	r3, #2
   80f12:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   80f16:	2300      	movs	r3, #0
   80f18:	4610      	mov	r0, r2
   80f1a:	4619      	mov	r1, r3
   80f1c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80f20:	4770      	bx	lr
   80f22:	428b      	cmp	r3, r1
   80f24:	d84c      	bhi.n	80fc0 <__udivdi3+0x134>
   80f26:	fab3 f683 	clz	r6, r3
   80f2a:	2e00      	cmp	r6, #0
   80f2c:	d14f      	bne.n	80fce <__udivdi3+0x142>
   80f2e:	428b      	cmp	r3, r1
   80f30:	d302      	bcc.n	80f38 <__udivdi3+0xac>
   80f32:	4282      	cmp	r2, r0
   80f34:	f200 80dd 	bhi.w	810f2 <__udivdi3+0x266>
   80f38:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80f3c:	2300      	movs	r3, #0
   80f3e:	2201      	movs	r2, #1
   80f40:	4610      	mov	r0, r2
   80f42:	4619      	mov	r1, r3
   80f44:	4770      	bx	lr
   80f46:	b912      	cbnz	r2, 80f4e <__udivdi3+0xc2>
   80f48:	2401      	movs	r4, #1
   80f4a:	fbb4 f4f2 	udiv	r4, r4, r2
   80f4e:	fab4 f284 	clz	r2, r4
   80f52:	2a00      	cmp	r2, #0
   80f54:	f040 8082 	bne.w	8105c <__udivdi3+0x1d0>
   80f58:	1b09      	subs	r1, r1, r4
   80f5a:	0c26      	lsrs	r6, r4, #16
   80f5c:	b2a7      	uxth	r7, r4
   80f5e:	2301      	movs	r3, #1
   80f60:	fbb1 f0f6 	udiv	r0, r1, r6
   80f64:	fb06 1110 	mls	r1, r6, r0, r1
   80f68:	fb07 f200 	mul.w	r2, r7, r0
   80f6c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   80f70:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   80f74:	428a      	cmp	r2, r1
   80f76:	d907      	bls.n	80f88 <__udivdi3+0xfc>
   80f78:	1909      	adds	r1, r1, r4
   80f7a:	f100 3cff 	add.w	ip, r0, #4294967295
   80f7e:	d202      	bcs.n	80f86 <__udivdi3+0xfa>
   80f80:	428a      	cmp	r2, r1
   80f82:	f200 80c8 	bhi.w	81116 <__udivdi3+0x28a>
   80f86:	4660      	mov	r0, ip
   80f88:	1a89      	subs	r1, r1, r2
   80f8a:	fbb1 f2f6 	udiv	r2, r1, r6
   80f8e:	fb06 1112 	mls	r1, r6, r2, r1
   80f92:	fb07 f702 	mul.w	r7, r7, r2
   80f96:	b2ad      	uxth	r5, r5
   80f98:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   80f9c:	42af      	cmp	r7, r5
   80f9e:	d908      	bls.n	80fb2 <__udivdi3+0x126>
   80fa0:	192c      	adds	r4, r5, r4
   80fa2:	f102 31ff 	add.w	r1, r2, #4294967295
   80fa6:	f080 809b 	bcs.w	810e0 <__udivdi3+0x254>
   80faa:	42a7      	cmp	r7, r4
   80fac:	f240 8098 	bls.w	810e0 <__udivdi3+0x254>
   80fb0:	3a02      	subs	r2, #2
   80fb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   80fb6:	4610      	mov	r0, r2
   80fb8:	4619      	mov	r1, r3
   80fba:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80fbe:	4770      	bx	lr
   80fc0:	2300      	movs	r3, #0
   80fc2:	461a      	mov	r2, r3
   80fc4:	4610      	mov	r0, r2
   80fc6:	4619      	mov	r1, r3
   80fc8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80fcc:	4770      	bx	lr
   80fce:	f1c6 0520 	rsb	r5, r6, #32
   80fd2:	fa22 f705 	lsr.w	r7, r2, r5
   80fd6:	fa03 f406 	lsl.w	r4, r3, r6
   80fda:	fa21 f305 	lsr.w	r3, r1, r5
   80fde:	fa01 fb06 	lsl.w	fp, r1, r6
   80fe2:	fa20 f505 	lsr.w	r5, r0, r5
   80fe6:	433c      	orrs	r4, r7
   80fe8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   80fec:	fbb3 fcf8 	udiv	ip, r3, r8
   80ff0:	fb08 331c 	mls	r3, r8, ip, r3
   80ff4:	fa1f f984 	uxth.w	r9, r4
   80ff8:	fb09 fa0c 	mul.w	sl, r9, ip
   80ffc:	ea45 0b0b 	orr.w	fp, r5, fp
   81000:	ea4f 451b 	mov.w	r5, fp, lsr #16
   81004:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   81008:	459a      	cmp	sl, r3
   8100a:	fa02 f206 	lsl.w	r2, r2, r6
   8100e:	d904      	bls.n	8101a <__udivdi3+0x18e>
   81010:	191b      	adds	r3, r3, r4
   81012:	f10c 35ff 	add.w	r5, ip, #4294967295
   81016:	d36f      	bcc.n	810f8 <__udivdi3+0x26c>
   81018:	46ac      	mov	ip, r5
   8101a:	ebca 0303 	rsb	r3, sl, r3
   8101e:	fbb3 f5f8 	udiv	r5, r3, r8
   81022:	fb08 3315 	mls	r3, r8, r5, r3
   81026:	fb09 f905 	mul.w	r9, r9, r5
   8102a:	fa1f fb8b 	uxth.w	fp, fp
   8102e:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   81032:	45b9      	cmp	r9, r7
   81034:	d904      	bls.n	81040 <__udivdi3+0x1b4>
   81036:	193f      	adds	r7, r7, r4
   81038:	f105 33ff 	add.w	r3, r5, #4294967295
   8103c:	d362      	bcc.n	81104 <__udivdi3+0x278>
   8103e:	461d      	mov	r5, r3
   81040:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   81044:	fbac 2302 	umull	r2, r3, ip, r2
   81048:	ebc9 0707 	rsb	r7, r9, r7
   8104c:	429f      	cmp	r7, r3
   8104e:	f04f 0500 	mov.w	r5, #0
   81052:	d34a      	bcc.n	810ea <__udivdi3+0x25e>
   81054:	d046      	beq.n	810e4 <__udivdi3+0x258>
   81056:	4662      	mov	r2, ip
   81058:	462b      	mov	r3, r5
   8105a:	e75d      	b.n	80f18 <__udivdi3+0x8c>
   8105c:	4094      	lsls	r4, r2
   8105e:	f1c2 0920 	rsb	r9, r2, #32
   81062:	fa21 fc09 	lsr.w	ip, r1, r9
   81066:	4091      	lsls	r1, r2
   81068:	fa20 f909 	lsr.w	r9, r0, r9
   8106c:	0c26      	lsrs	r6, r4, #16
   8106e:	fbbc f8f6 	udiv	r8, ip, r6
   81072:	fb06 cc18 	mls	ip, r6, r8, ip
   81076:	b2a7      	uxth	r7, r4
   81078:	fb07 f308 	mul.w	r3, r7, r8
   8107c:	ea49 0901 	orr.w	r9, r9, r1
   81080:	ea4f 4119 	mov.w	r1, r9, lsr #16
   81084:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   81088:	4563      	cmp	r3, ip
   8108a:	fa00 f502 	lsl.w	r5, r0, r2
   8108e:	d909      	bls.n	810a4 <__udivdi3+0x218>
   81090:	eb1c 0c04 	adds.w	ip, ip, r4
   81094:	f108 32ff 	add.w	r2, r8, #4294967295
   81098:	d23b      	bcs.n	81112 <__udivdi3+0x286>
   8109a:	4563      	cmp	r3, ip
   8109c:	d939      	bls.n	81112 <__udivdi3+0x286>
   8109e:	f1a8 0802 	sub.w	r8, r8, #2
   810a2:	44a4      	add	ip, r4
   810a4:	ebc3 0c0c 	rsb	ip, r3, ip
   810a8:	fbbc f3f6 	udiv	r3, ip, r6
   810ac:	fb06 c113 	mls	r1, r6, r3, ip
   810b0:	fb07 f203 	mul.w	r2, r7, r3
   810b4:	fa1f f989 	uxth.w	r9, r9
   810b8:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   810bc:	428a      	cmp	r2, r1
   810be:	d907      	bls.n	810d0 <__udivdi3+0x244>
   810c0:	1909      	adds	r1, r1, r4
   810c2:	f103 30ff 	add.w	r0, r3, #4294967295
   810c6:	d222      	bcs.n	8110e <__udivdi3+0x282>
   810c8:	428a      	cmp	r2, r1
   810ca:	d920      	bls.n	8110e <__udivdi3+0x282>
   810cc:	3b02      	subs	r3, #2
   810ce:	4421      	add	r1, r4
   810d0:	1a89      	subs	r1, r1, r2
   810d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   810d6:	e743      	b.n	80f60 <__udivdi3+0xd4>
   810d8:	463a      	mov	r2, r7
   810da:	e705      	b.n	80ee8 <__udivdi3+0x5c>
   810dc:	4633      	mov	r3, r6
   810de:	e718      	b.n	80f12 <__udivdi3+0x86>
   810e0:	460a      	mov	r2, r1
   810e2:	e766      	b.n	80fb2 <__udivdi3+0x126>
   810e4:	40b0      	lsls	r0, r6
   810e6:	4290      	cmp	r0, r2
   810e8:	d2b5      	bcs.n	81056 <__udivdi3+0x1ca>
   810ea:	f10c 32ff 	add.w	r2, ip, #4294967295
   810ee:	2300      	movs	r3, #0
   810f0:	e712      	b.n	80f18 <__udivdi3+0x8c>
   810f2:	4633      	mov	r3, r6
   810f4:	4632      	mov	r2, r6
   810f6:	e70f      	b.n	80f18 <__udivdi3+0x8c>
   810f8:	459a      	cmp	sl, r3
   810fa:	d98d      	bls.n	81018 <__udivdi3+0x18c>
   810fc:	f1ac 0c02 	sub.w	ip, ip, #2
   81100:	4423      	add	r3, r4
   81102:	e78a      	b.n	8101a <__udivdi3+0x18e>
   81104:	45b9      	cmp	r9, r7
   81106:	d99a      	bls.n	8103e <__udivdi3+0x1b2>
   81108:	3d02      	subs	r5, #2
   8110a:	4427      	add	r7, r4
   8110c:	e798      	b.n	81040 <__udivdi3+0x1b4>
   8110e:	4603      	mov	r3, r0
   81110:	e7de      	b.n	810d0 <__udivdi3+0x244>
   81112:	4690      	mov	r8, r2
   81114:	e7c6      	b.n	810a4 <__udivdi3+0x218>
   81116:	3802      	subs	r0, #2
   81118:	4421      	add	r1, r4
   8111a:	e735      	b.n	80f88 <__udivdi3+0xfc>

0008111c <__libc_init_array>:
   8111c:	b570      	push	{r4, r5, r6, lr}
   8111e:	4e0f      	ldr	r6, [pc, #60]	; (8115c <__libc_init_array+0x40>)
   81120:	4d0f      	ldr	r5, [pc, #60]	; (81160 <__libc_init_array+0x44>)
   81122:	1b76      	subs	r6, r6, r5
   81124:	10b6      	asrs	r6, r6, #2
   81126:	d007      	beq.n	81138 <__libc_init_array+0x1c>
   81128:	3d04      	subs	r5, #4
   8112a:	2400      	movs	r4, #0
   8112c:	3401      	adds	r4, #1
   8112e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81132:	4798      	blx	r3
   81134:	42a6      	cmp	r6, r4
   81136:	d1f9      	bne.n	8112c <__libc_init_array+0x10>
   81138:	4e0a      	ldr	r6, [pc, #40]	; (81164 <__libc_init_array+0x48>)
   8113a:	4d0b      	ldr	r5, [pc, #44]	; (81168 <__libc_init_array+0x4c>)
   8113c:	f002 fd14 	bl	83b68 <_init>
   81140:	1b76      	subs	r6, r6, r5
   81142:	10b6      	asrs	r6, r6, #2
   81144:	d008      	beq.n	81158 <__libc_init_array+0x3c>
   81146:	3d04      	subs	r5, #4
   81148:	2400      	movs	r4, #0
   8114a:	3401      	adds	r4, #1
   8114c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81150:	4798      	blx	r3
   81152:	42a6      	cmp	r6, r4
   81154:	d1f9      	bne.n	8114a <__libc_init_array+0x2e>
   81156:	bd70      	pop	{r4, r5, r6, pc}
   81158:	bd70      	pop	{r4, r5, r6, pc}
   8115a:	bf00      	nop
   8115c:	00083b74 	.word	0x00083b74
   81160:	00083b74 	.word	0x00083b74
   81164:	00083b7c 	.word	0x00083b7c
   81168:	00083b74 	.word	0x00083b74

0008116c <iprintf>:
   8116c:	b40f      	push	{r0, r1, r2, r3}
   8116e:	b510      	push	{r4, lr}
   81170:	4b07      	ldr	r3, [pc, #28]	; (81190 <iprintf+0x24>)
   81172:	b082      	sub	sp, #8
   81174:	ac04      	add	r4, sp, #16
   81176:	f854 2b04 	ldr.w	r2, [r4], #4
   8117a:	6818      	ldr	r0, [r3, #0]
   8117c:	4623      	mov	r3, r4
   8117e:	6881      	ldr	r1, [r0, #8]
   81180:	9401      	str	r4, [sp, #4]
   81182:	f000 f915 	bl	813b0 <_vfiprintf_r>
   81186:	b002      	add	sp, #8
   81188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8118c:	b004      	add	sp, #16
   8118e:	4770      	bx	lr
   81190:	20070558 	.word	0x20070558

00081194 <memset>:
   81194:	b4f0      	push	{r4, r5, r6, r7}
   81196:	0784      	lsls	r4, r0, #30
   81198:	d043      	beq.n	81222 <memset+0x8e>
   8119a:	1e54      	subs	r4, r2, #1
   8119c:	2a00      	cmp	r2, #0
   8119e:	d03e      	beq.n	8121e <memset+0x8a>
   811a0:	b2cd      	uxtb	r5, r1
   811a2:	4603      	mov	r3, r0
   811a4:	e003      	b.n	811ae <memset+0x1a>
   811a6:	1e62      	subs	r2, r4, #1
   811a8:	2c00      	cmp	r4, #0
   811aa:	d038      	beq.n	8121e <memset+0x8a>
   811ac:	4614      	mov	r4, r2
   811ae:	f803 5b01 	strb.w	r5, [r3], #1
   811b2:	079a      	lsls	r2, r3, #30
   811b4:	d1f7      	bne.n	811a6 <memset+0x12>
   811b6:	2c03      	cmp	r4, #3
   811b8:	d92a      	bls.n	81210 <memset+0x7c>
   811ba:	b2cd      	uxtb	r5, r1
   811bc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   811c0:	2c0f      	cmp	r4, #15
   811c2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   811c6:	d915      	bls.n	811f4 <memset+0x60>
   811c8:	f1a4 0710 	sub.w	r7, r4, #16
   811cc:	093f      	lsrs	r7, r7, #4
   811ce:	f103 0610 	add.w	r6, r3, #16
   811d2:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   811d6:	461a      	mov	r2, r3
   811d8:	6015      	str	r5, [r2, #0]
   811da:	6055      	str	r5, [r2, #4]
   811dc:	6095      	str	r5, [r2, #8]
   811de:	60d5      	str	r5, [r2, #12]
   811e0:	3210      	adds	r2, #16
   811e2:	42b2      	cmp	r2, r6
   811e4:	d1f8      	bne.n	811d8 <memset+0x44>
   811e6:	f004 040f 	and.w	r4, r4, #15
   811ea:	3701      	adds	r7, #1
   811ec:	2c03      	cmp	r4, #3
   811ee:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   811f2:	d90d      	bls.n	81210 <memset+0x7c>
   811f4:	461e      	mov	r6, r3
   811f6:	4622      	mov	r2, r4
   811f8:	3a04      	subs	r2, #4
   811fa:	2a03      	cmp	r2, #3
   811fc:	f846 5b04 	str.w	r5, [r6], #4
   81200:	d8fa      	bhi.n	811f8 <memset+0x64>
   81202:	1f22      	subs	r2, r4, #4
   81204:	f022 0203 	bic.w	r2, r2, #3
   81208:	3204      	adds	r2, #4
   8120a:	4413      	add	r3, r2
   8120c:	f004 0403 	and.w	r4, r4, #3
   81210:	b12c      	cbz	r4, 8121e <memset+0x8a>
   81212:	b2c9      	uxtb	r1, r1
   81214:	441c      	add	r4, r3
   81216:	f803 1b01 	strb.w	r1, [r3], #1
   8121a:	42a3      	cmp	r3, r4
   8121c:	d1fb      	bne.n	81216 <memset+0x82>
   8121e:	bcf0      	pop	{r4, r5, r6, r7}
   81220:	4770      	bx	lr
   81222:	4614      	mov	r4, r2
   81224:	4603      	mov	r3, r0
   81226:	e7c6      	b.n	811b6 <memset+0x22>

00081228 <setbuf>:
   81228:	2900      	cmp	r1, #0
   8122a:	bf0c      	ite	eq
   8122c:	2202      	moveq	r2, #2
   8122e:	2200      	movne	r2, #0
   81230:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81234:	f000 b800 	b.w	81238 <setvbuf>

00081238 <setvbuf>:
   81238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8123c:	4d3c      	ldr	r5, [pc, #240]	; (81330 <setvbuf+0xf8>)
   8123e:	4604      	mov	r4, r0
   81240:	682d      	ldr	r5, [r5, #0]
   81242:	4688      	mov	r8, r1
   81244:	4616      	mov	r6, r2
   81246:	461f      	mov	r7, r3
   81248:	b115      	cbz	r5, 81250 <setvbuf+0x18>
   8124a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8124c:	2b00      	cmp	r3, #0
   8124e:	d04f      	beq.n	812f0 <setvbuf+0xb8>
   81250:	2e02      	cmp	r6, #2
   81252:	d830      	bhi.n	812b6 <setvbuf+0x7e>
   81254:	2f00      	cmp	r7, #0
   81256:	db2e      	blt.n	812b6 <setvbuf+0x7e>
   81258:	4628      	mov	r0, r5
   8125a:	4621      	mov	r1, r4
   8125c:	f001 f87a 	bl	82354 <_fflush_r>
   81260:	89a3      	ldrh	r3, [r4, #12]
   81262:	2200      	movs	r2, #0
   81264:	6062      	str	r2, [r4, #4]
   81266:	61a2      	str	r2, [r4, #24]
   81268:	061a      	lsls	r2, r3, #24
   8126a:	d428      	bmi.n	812be <setvbuf+0x86>
   8126c:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81270:	b29b      	uxth	r3, r3
   81272:	2e02      	cmp	r6, #2
   81274:	81a3      	strh	r3, [r4, #12]
   81276:	d02d      	beq.n	812d4 <setvbuf+0x9c>
   81278:	f1b8 0f00 	cmp.w	r8, #0
   8127c:	d03c      	beq.n	812f8 <setvbuf+0xc0>
   8127e:	2e01      	cmp	r6, #1
   81280:	d013      	beq.n	812aa <setvbuf+0x72>
   81282:	b29b      	uxth	r3, r3
   81284:	f003 0008 	and.w	r0, r3, #8
   81288:	4a2a      	ldr	r2, [pc, #168]	; (81334 <setvbuf+0xfc>)
   8128a:	b280      	uxth	r0, r0
   8128c:	63ea      	str	r2, [r5, #60]	; 0x3c
   8128e:	f8c4 8000 	str.w	r8, [r4]
   81292:	f8c4 8010 	str.w	r8, [r4, #16]
   81296:	6167      	str	r7, [r4, #20]
   81298:	b178      	cbz	r0, 812ba <setvbuf+0x82>
   8129a:	f013 0f03 	tst.w	r3, #3
   8129e:	bf18      	it	ne
   812a0:	2700      	movne	r7, #0
   812a2:	60a7      	str	r7, [r4, #8]
   812a4:	2000      	movs	r0, #0
   812a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   812aa:	f043 0301 	orr.w	r3, r3, #1
   812ae:	427a      	negs	r2, r7
   812b0:	81a3      	strh	r3, [r4, #12]
   812b2:	61a2      	str	r2, [r4, #24]
   812b4:	e7e5      	b.n	81282 <setvbuf+0x4a>
   812b6:	f04f 30ff 	mov.w	r0, #4294967295
   812ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   812be:	4628      	mov	r0, r5
   812c0:	6921      	ldr	r1, [r4, #16]
   812c2:	f001 f9a7 	bl	82614 <_free_r>
   812c6:	89a3      	ldrh	r3, [r4, #12]
   812c8:	2e02      	cmp	r6, #2
   812ca:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   812ce:	b29b      	uxth	r3, r3
   812d0:	81a3      	strh	r3, [r4, #12]
   812d2:	d1d1      	bne.n	81278 <setvbuf+0x40>
   812d4:	2000      	movs	r0, #0
   812d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   812da:	f043 0302 	orr.w	r3, r3, #2
   812de:	2500      	movs	r5, #0
   812e0:	2101      	movs	r1, #1
   812e2:	81a3      	strh	r3, [r4, #12]
   812e4:	60a5      	str	r5, [r4, #8]
   812e6:	6022      	str	r2, [r4, #0]
   812e8:	6122      	str	r2, [r4, #16]
   812ea:	6161      	str	r1, [r4, #20]
   812ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   812f0:	4628      	mov	r0, r5
   812f2:	f001 f84b 	bl	8238c <__sinit>
   812f6:	e7ab      	b.n	81250 <setvbuf+0x18>
   812f8:	2f00      	cmp	r7, #0
   812fa:	bf08      	it	eq
   812fc:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81300:	4638      	mov	r0, r7
   81302:	f001 fc7d 	bl	82c00 <malloc>
   81306:	4680      	mov	r8, r0
   81308:	b128      	cbz	r0, 81316 <setvbuf+0xde>
   8130a:	89a3      	ldrh	r3, [r4, #12]
   8130c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81310:	b29b      	uxth	r3, r3
   81312:	81a3      	strh	r3, [r4, #12]
   81314:	e7b3      	b.n	8127e <setvbuf+0x46>
   81316:	f44f 6080 	mov.w	r0, #1024	; 0x400
   8131a:	f001 fc71 	bl	82c00 <malloc>
   8131e:	4680      	mov	r8, r0
   81320:	b918      	cbnz	r0, 8132a <setvbuf+0xf2>
   81322:	89a3      	ldrh	r3, [r4, #12]
   81324:	f04f 30ff 	mov.w	r0, #4294967295
   81328:	e7d5      	b.n	812d6 <setvbuf+0x9e>
   8132a:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8132e:	e7ec      	b.n	8130a <setvbuf+0xd2>
   81330:	20070558 	.word	0x20070558
   81334:	00082381 	.word	0x00082381

00081338 <__sprint_r.part.0>:
   81338:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8133a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8133e:	049c      	lsls	r4, r3, #18
   81340:	460e      	mov	r6, r1
   81342:	4680      	mov	r8, r0
   81344:	4691      	mov	r9, r2
   81346:	d52a      	bpl.n	8139e <__sprint_r.part.0+0x66>
   81348:	6893      	ldr	r3, [r2, #8]
   8134a:	6812      	ldr	r2, [r2, #0]
   8134c:	f102 0a08 	add.w	sl, r2, #8
   81350:	b31b      	cbz	r3, 8139a <__sprint_r.part.0+0x62>
   81352:	e91a 00a0 	ldmdb	sl, {r5, r7}
   81356:	08bf      	lsrs	r7, r7, #2
   81358:	d017      	beq.n	8138a <__sprint_r.part.0+0x52>
   8135a:	3d04      	subs	r5, #4
   8135c:	2400      	movs	r4, #0
   8135e:	e001      	b.n	81364 <__sprint_r.part.0+0x2c>
   81360:	42a7      	cmp	r7, r4
   81362:	d010      	beq.n	81386 <__sprint_r.part.0+0x4e>
   81364:	4640      	mov	r0, r8
   81366:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8136a:	4632      	mov	r2, r6
   8136c:	f001 f8a4 	bl	824b8 <_fputwc_r>
   81370:	1c43      	adds	r3, r0, #1
   81372:	f104 0401 	add.w	r4, r4, #1
   81376:	d1f3      	bne.n	81360 <__sprint_r.part.0+0x28>
   81378:	2300      	movs	r3, #0
   8137a:	f8c9 3008 	str.w	r3, [r9, #8]
   8137e:	f8c9 3004 	str.w	r3, [r9, #4]
   81382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81386:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8138a:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   8138e:	f8c9 3008 	str.w	r3, [r9, #8]
   81392:	f10a 0a08 	add.w	sl, sl, #8
   81396:	2b00      	cmp	r3, #0
   81398:	d1db      	bne.n	81352 <__sprint_r.part.0+0x1a>
   8139a:	2000      	movs	r0, #0
   8139c:	e7ec      	b.n	81378 <__sprint_r.part.0+0x40>
   8139e:	f001 fa05 	bl	827ac <__sfvwrite_r>
   813a2:	2300      	movs	r3, #0
   813a4:	f8c9 3008 	str.w	r3, [r9, #8]
   813a8:	f8c9 3004 	str.w	r3, [r9, #4]
   813ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000813b0 <_vfiprintf_r>:
   813b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   813b4:	b0b1      	sub	sp, #196	; 0xc4
   813b6:	461c      	mov	r4, r3
   813b8:	9102      	str	r1, [sp, #8]
   813ba:	4690      	mov	r8, r2
   813bc:	9308      	str	r3, [sp, #32]
   813be:	9006      	str	r0, [sp, #24]
   813c0:	b118      	cbz	r0, 813ca <_vfiprintf_r+0x1a>
   813c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   813c4:	2b00      	cmp	r3, #0
   813c6:	f000 80e8 	beq.w	8159a <_vfiprintf_r+0x1ea>
   813ca:	9d02      	ldr	r5, [sp, #8]
   813cc:	89ab      	ldrh	r3, [r5, #12]
   813ce:	b29a      	uxth	r2, r3
   813d0:	0490      	lsls	r0, r2, #18
   813d2:	d407      	bmi.n	813e4 <_vfiprintf_r+0x34>
   813d4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   813d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   813da:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   813de:	81ab      	strh	r3, [r5, #12]
   813e0:	b29a      	uxth	r2, r3
   813e2:	6669      	str	r1, [r5, #100]	; 0x64
   813e4:	0711      	lsls	r1, r2, #28
   813e6:	f140 80b7 	bpl.w	81558 <_vfiprintf_r+0x1a8>
   813ea:	f8dd b008 	ldr.w	fp, [sp, #8]
   813ee:	f8db 3010 	ldr.w	r3, [fp, #16]
   813f2:	2b00      	cmp	r3, #0
   813f4:	f000 80b0 	beq.w	81558 <_vfiprintf_r+0x1a8>
   813f8:	f002 021a 	and.w	r2, r2, #26
   813fc:	2a0a      	cmp	r2, #10
   813fe:	f000 80b7 	beq.w	81570 <_vfiprintf_r+0x1c0>
   81402:	2300      	movs	r3, #0
   81404:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81408:	930a      	str	r3, [sp, #40]	; 0x28
   8140a:	9315      	str	r3, [sp, #84]	; 0x54
   8140c:	9314      	str	r3, [sp, #80]	; 0x50
   8140e:	9309      	str	r3, [sp, #36]	; 0x24
   81410:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   81414:	464e      	mov	r6, r9
   81416:	f898 3000 	ldrb.w	r3, [r8]
   8141a:	2b00      	cmp	r3, #0
   8141c:	f000 84c8 	beq.w	81db0 <_vfiprintf_r+0xa00>
   81420:	2b25      	cmp	r3, #37	; 0x25
   81422:	f000 84c5 	beq.w	81db0 <_vfiprintf_r+0xa00>
   81426:	f108 0201 	add.w	r2, r8, #1
   8142a:	e001      	b.n	81430 <_vfiprintf_r+0x80>
   8142c:	2b25      	cmp	r3, #37	; 0x25
   8142e:	d004      	beq.n	8143a <_vfiprintf_r+0x8a>
   81430:	7813      	ldrb	r3, [r2, #0]
   81432:	4614      	mov	r4, r2
   81434:	3201      	adds	r2, #1
   81436:	2b00      	cmp	r3, #0
   81438:	d1f8      	bne.n	8142c <_vfiprintf_r+0x7c>
   8143a:	ebc8 0504 	rsb	r5, r8, r4
   8143e:	b195      	cbz	r5, 81466 <_vfiprintf_r+0xb6>
   81440:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81442:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81444:	3301      	adds	r3, #1
   81446:	442a      	add	r2, r5
   81448:	2b07      	cmp	r3, #7
   8144a:	f8c6 8000 	str.w	r8, [r6]
   8144e:	6075      	str	r5, [r6, #4]
   81450:	9215      	str	r2, [sp, #84]	; 0x54
   81452:	9314      	str	r3, [sp, #80]	; 0x50
   81454:	dd7b      	ble.n	8154e <_vfiprintf_r+0x19e>
   81456:	2a00      	cmp	r2, #0
   81458:	f040 84d5 	bne.w	81e06 <_vfiprintf_r+0xa56>
   8145c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8145e:	9214      	str	r2, [sp, #80]	; 0x50
   81460:	4428      	add	r0, r5
   81462:	464e      	mov	r6, r9
   81464:	9009      	str	r0, [sp, #36]	; 0x24
   81466:	7823      	ldrb	r3, [r4, #0]
   81468:	2b00      	cmp	r3, #0
   8146a:	f000 83ed 	beq.w	81c48 <_vfiprintf_r+0x898>
   8146e:	2100      	movs	r1, #0
   81470:	f04f 0200 	mov.w	r2, #0
   81474:	f04f 3cff 	mov.w	ip, #4294967295
   81478:	7863      	ldrb	r3, [r4, #1]
   8147a:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   8147e:	9104      	str	r1, [sp, #16]
   81480:	468a      	mov	sl, r1
   81482:	f104 0801 	add.w	r8, r4, #1
   81486:	4608      	mov	r0, r1
   81488:	4665      	mov	r5, ip
   8148a:	f108 0801 	add.w	r8, r8, #1
   8148e:	f1a3 0220 	sub.w	r2, r3, #32
   81492:	2a58      	cmp	r2, #88	; 0x58
   81494:	f200 82d9 	bhi.w	81a4a <_vfiprintf_r+0x69a>
   81498:	e8df f012 	tbh	[pc, r2, lsl #1]
   8149c:	02d702cb 	.word	0x02d702cb
   814a0:	02d202d7 	.word	0x02d202d7
   814a4:	02d702d7 	.word	0x02d702d7
   814a8:	02d702d7 	.word	0x02d702d7
   814ac:	02d702d7 	.word	0x02d702d7
   814b0:	028f0282 	.word	0x028f0282
   814b4:	008402d7 	.word	0x008402d7
   814b8:	02d70293 	.word	0x02d70293
   814bc:	0196012b 	.word	0x0196012b
   814c0:	01960196 	.word	0x01960196
   814c4:	01960196 	.word	0x01960196
   814c8:	01960196 	.word	0x01960196
   814cc:	01960196 	.word	0x01960196
   814d0:	02d702d7 	.word	0x02d702d7
   814d4:	02d702d7 	.word	0x02d702d7
   814d8:	02d702d7 	.word	0x02d702d7
   814dc:	02d702d7 	.word	0x02d702d7
   814e0:	02d702d7 	.word	0x02d702d7
   814e4:	02d70130 	.word	0x02d70130
   814e8:	02d702d7 	.word	0x02d702d7
   814ec:	02d702d7 	.word	0x02d702d7
   814f0:	02d702d7 	.word	0x02d702d7
   814f4:	02d702d7 	.word	0x02d702d7
   814f8:	017b02d7 	.word	0x017b02d7
   814fc:	02d702d7 	.word	0x02d702d7
   81500:	02d702d7 	.word	0x02d702d7
   81504:	01a402d7 	.word	0x01a402d7
   81508:	02d702d7 	.word	0x02d702d7
   8150c:	02d701bf 	.word	0x02d701bf
   81510:	02d702d7 	.word	0x02d702d7
   81514:	02d702d7 	.word	0x02d702d7
   81518:	02d702d7 	.word	0x02d702d7
   8151c:	02d702d7 	.word	0x02d702d7
   81520:	01e402d7 	.word	0x01e402d7
   81524:	02d701fa 	.word	0x02d701fa
   81528:	02d702d7 	.word	0x02d702d7
   8152c:	01fa0216 	.word	0x01fa0216
   81530:	02d702d7 	.word	0x02d702d7
   81534:	02d7021b 	.word	0x02d7021b
   81538:	00890228 	.word	0x00890228
   8153c:	027d0266 	.word	0x027d0266
   81540:	023a02d7 	.word	0x023a02d7
   81544:	011902d7 	.word	0x011902d7
   81548:	02d702d7 	.word	0x02d702d7
   8154c:	02af      	.short	0x02af
   8154e:	3608      	adds	r6, #8
   81550:	9809      	ldr	r0, [sp, #36]	; 0x24
   81552:	4428      	add	r0, r5
   81554:	9009      	str	r0, [sp, #36]	; 0x24
   81556:	e786      	b.n	81466 <_vfiprintf_r+0xb6>
   81558:	9806      	ldr	r0, [sp, #24]
   8155a:	9902      	ldr	r1, [sp, #8]
   8155c:	f000 fde4 	bl	82128 <__swsetup_r>
   81560:	b9b0      	cbnz	r0, 81590 <_vfiprintf_r+0x1e0>
   81562:	9d02      	ldr	r5, [sp, #8]
   81564:	89aa      	ldrh	r2, [r5, #12]
   81566:	f002 021a 	and.w	r2, r2, #26
   8156a:	2a0a      	cmp	r2, #10
   8156c:	f47f af49 	bne.w	81402 <_vfiprintf_r+0x52>
   81570:	f8dd b008 	ldr.w	fp, [sp, #8]
   81574:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81578:	2b00      	cmp	r3, #0
   8157a:	f6ff af42 	blt.w	81402 <_vfiprintf_r+0x52>
   8157e:	9806      	ldr	r0, [sp, #24]
   81580:	4659      	mov	r1, fp
   81582:	4642      	mov	r2, r8
   81584:	4623      	mov	r3, r4
   81586:	f000 fd3d 	bl	82004 <__sbprintf>
   8158a:	b031      	add	sp, #196	; 0xc4
   8158c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81590:	f04f 30ff 	mov.w	r0, #4294967295
   81594:	b031      	add	sp, #196	; 0xc4
   81596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8159a:	f000 fef7 	bl	8238c <__sinit>
   8159e:	e714      	b.n	813ca <_vfiprintf_r+0x1a>
   815a0:	4240      	negs	r0, r0
   815a2:	9308      	str	r3, [sp, #32]
   815a4:	f04a 0a04 	orr.w	sl, sl, #4
   815a8:	f898 3000 	ldrb.w	r3, [r8]
   815ac:	e76d      	b.n	8148a <_vfiprintf_r+0xda>
   815ae:	f01a 0320 	ands.w	r3, sl, #32
   815b2:	9004      	str	r0, [sp, #16]
   815b4:	46ac      	mov	ip, r5
   815b6:	f000 80f4 	beq.w	817a2 <_vfiprintf_r+0x3f2>
   815ba:	f8dd b020 	ldr.w	fp, [sp, #32]
   815be:	f10b 0307 	add.w	r3, fp, #7
   815c2:	f023 0307 	bic.w	r3, r3, #7
   815c6:	f103 0408 	add.w	r4, r3, #8
   815ca:	9408      	str	r4, [sp, #32]
   815cc:	e9d3 4500 	ldrd	r4, r5, [r3]
   815d0:	2300      	movs	r3, #0
   815d2:	f04f 0000 	mov.w	r0, #0
   815d6:	2100      	movs	r1, #0
   815d8:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   815dc:	f8cd c014 	str.w	ip, [sp, #20]
   815e0:	9107      	str	r1, [sp, #28]
   815e2:	f1bc 0f00 	cmp.w	ip, #0
   815e6:	bfa8      	it	ge
   815e8:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   815ec:	ea54 0205 	orrs.w	r2, r4, r5
   815f0:	f040 80ad 	bne.w	8174e <_vfiprintf_r+0x39e>
   815f4:	f1bc 0f00 	cmp.w	ip, #0
   815f8:	f040 80a9 	bne.w	8174e <_vfiprintf_r+0x39e>
   815fc:	2b00      	cmp	r3, #0
   815fe:	f040 83c0 	bne.w	81d82 <_vfiprintf_r+0x9d2>
   81602:	f01a 0f01 	tst.w	sl, #1
   81606:	f000 83bc 	beq.w	81d82 <_vfiprintf_r+0x9d2>
   8160a:	2330      	movs	r3, #48	; 0x30
   8160c:	af30      	add	r7, sp, #192	; 0xc0
   8160e:	f807 3d41 	strb.w	r3, [r7, #-65]!
   81612:	ebc7 0409 	rsb	r4, r7, r9
   81616:	9405      	str	r4, [sp, #20]
   81618:	f8dd b014 	ldr.w	fp, [sp, #20]
   8161c:	9c07      	ldr	r4, [sp, #28]
   8161e:	45e3      	cmp	fp, ip
   81620:	bfb8      	it	lt
   81622:	46e3      	movlt	fp, ip
   81624:	f8cd b00c 	str.w	fp, [sp, #12]
   81628:	b11c      	cbz	r4, 81632 <_vfiprintf_r+0x282>
   8162a:	f10b 0b01 	add.w	fp, fp, #1
   8162e:	f8cd b00c 	str.w	fp, [sp, #12]
   81632:	f01a 0502 	ands.w	r5, sl, #2
   81636:	9507      	str	r5, [sp, #28]
   81638:	d005      	beq.n	81646 <_vfiprintf_r+0x296>
   8163a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8163e:	f10b 0b02 	add.w	fp, fp, #2
   81642:	f8cd b00c 	str.w	fp, [sp, #12]
   81646:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   8164a:	930b      	str	r3, [sp, #44]	; 0x2c
   8164c:	f040 821b 	bne.w	81a86 <_vfiprintf_r+0x6d6>
   81650:	9d04      	ldr	r5, [sp, #16]
   81652:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81656:	ebcb 0405 	rsb	r4, fp, r5
   8165a:	2c00      	cmp	r4, #0
   8165c:	f340 8213 	ble.w	81a86 <_vfiprintf_r+0x6d6>
   81660:	2c10      	cmp	r4, #16
   81662:	f340 8489 	ble.w	81f78 <_vfiprintf_r+0xbc8>
   81666:	4dbe      	ldr	r5, [pc, #760]	; (81960 <_vfiprintf_r+0x5b0>)
   81668:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8166a:	462b      	mov	r3, r5
   8166c:	9814      	ldr	r0, [sp, #80]	; 0x50
   8166e:	4625      	mov	r5, r4
   81670:	f04f 0b10 	mov.w	fp, #16
   81674:	4664      	mov	r4, ip
   81676:	46b4      	mov	ip, r6
   81678:	461e      	mov	r6, r3
   8167a:	e006      	b.n	8168a <_vfiprintf_r+0x2da>
   8167c:	1c83      	adds	r3, r0, #2
   8167e:	f10c 0c08 	add.w	ip, ip, #8
   81682:	4608      	mov	r0, r1
   81684:	3d10      	subs	r5, #16
   81686:	2d10      	cmp	r5, #16
   81688:	dd11      	ble.n	816ae <_vfiprintf_r+0x2fe>
   8168a:	1c41      	adds	r1, r0, #1
   8168c:	3210      	adds	r2, #16
   8168e:	2907      	cmp	r1, #7
   81690:	9215      	str	r2, [sp, #84]	; 0x54
   81692:	e88c 0840 	stmia.w	ip, {r6, fp}
   81696:	9114      	str	r1, [sp, #80]	; 0x50
   81698:	ddf0      	ble.n	8167c <_vfiprintf_r+0x2cc>
   8169a:	2a00      	cmp	r2, #0
   8169c:	f040 81e6 	bne.w	81a6c <_vfiprintf_r+0x6bc>
   816a0:	3d10      	subs	r5, #16
   816a2:	2d10      	cmp	r5, #16
   816a4:	f04f 0301 	mov.w	r3, #1
   816a8:	4610      	mov	r0, r2
   816aa:	46cc      	mov	ip, r9
   816ac:	dced      	bgt.n	8168a <_vfiprintf_r+0x2da>
   816ae:	4631      	mov	r1, r6
   816b0:	4666      	mov	r6, ip
   816b2:	46a4      	mov	ip, r4
   816b4:	462c      	mov	r4, r5
   816b6:	460d      	mov	r5, r1
   816b8:	4422      	add	r2, r4
   816ba:	2b07      	cmp	r3, #7
   816bc:	9215      	str	r2, [sp, #84]	; 0x54
   816be:	6035      	str	r5, [r6, #0]
   816c0:	6074      	str	r4, [r6, #4]
   816c2:	9314      	str	r3, [sp, #80]	; 0x50
   816c4:	f300 836d 	bgt.w	81da2 <_vfiprintf_r+0x9f2>
   816c8:	3608      	adds	r6, #8
   816ca:	1c59      	adds	r1, r3, #1
   816cc:	e1de      	b.n	81a8c <_vfiprintf_r+0x6dc>
   816ce:	f01a 0f20 	tst.w	sl, #32
   816d2:	9004      	str	r0, [sp, #16]
   816d4:	46ac      	mov	ip, r5
   816d6:	f000 808d 	beq.w	817f4 <_vfiprintf_r+0x444>
   816da:	9d08      	ldr	r5, [sp, #32]
   816dc:	1deb      	adds	r3, r5, #7
   816de:	f023 0307 	bic.w	r3, r3, #7
   816e2:	f103 0b08 	add.w	fp, r3, #8
   816e6:	e9d3 4500 	ldrd	r4, r5, [r3]
   816ea:	f8cd b020 	str.w	fp, [sp, #32]
   816ee:	2301      	movs	r3, #1
   816f0:	e76f      	b.n	815d2 <_vfiprintf_r+0x222>
   816f2:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   816f6:	f898 3000 	ldrb.w	r3, [r8]
   816fa:	e6c6      	b.n	8148a <_vfiprintf_r+0xda>
   816fc:	f04a 0a10 	orr.w	sl, sl, #16
   81700:	f01a 0f20 	tst.w	sl, #32
   81704:	9004      	str	r0, [sp, #16]
   81706:	46ac      	mov	ip, r5
   81708:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8170c:	f000 80c8 	beq.w	818a0 <_vfiprintf_r+0x4f0>
   81710:	9c08      	ldr	r4, [sp, #32]
   81712:	1de1      	adds	r1, r4, #7
   81714:	f021 0107 	bic.w	r1, r1, #7
   81718:	e9d1 2300 	ldrd	r2, r3, [r1]
   8171c:	3108      	adds	r1, #8
   8171e:	9108      	str	r1, [sp, #32]
   81720:	4614      	mov	r4, r2
   81722:	461d      	mov	r5, r3
   81724:	2a00      	cmp	r2, #0
   81726:	f173 0b00 	sbcs.w	fp, r3, #0
   8172a:	f2c0 83ce 	blt.w	81eca <_vfiprintf_r+0xb1a>
   8172e:	f1bc 0f00 	cmp.w	ip, #0
   81732:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81736:	bfa8      	it	ge
   81738:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   8173c:	ea54 0205 	orrs.w	r2, r4, r5
   81740:	9007      	str	r0, [sp, #28]
   81742:	f8cd c014 	str.w	ip, [sp, #20]
   81746:	f04f 0301 	mov.w	r3, #1
   8174a:	f43f af53 	beq.w	815f4 <_vfiprintf_r+0x244>
   8174e:	2b01      	cmp	r3, #1
   81750:	f000 8319 	beq.w	81d86 <_vfiprintf_r+0x9d6>
   81754:	2b02      	cmp	r3, #2
   81756:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   8175a:	f040 824c 	bne.w	81bf6 <_vfiprintf_r+0x846>
   8175e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   81762:	4619      	mov	r1, r3
   81764:	f004 000f 	and.w	r0, r4, #15
   81768:	0922      	lsrs	r2, r4, #4
   8176a:	f81b 0000 	ldrb.w	r0, [fp, r0]
   8176e:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   81772:	092b      	lsrs	r3, r5, #4
   81774:	7008      	strb	r0, [r1, #0]
   81776:	ea52 0003 	orrs.w	r0, r2, r3
   8177a:	460f      	mov	r7, r1
   8177c:	4614      	mov	r4, r2
   8177e:	461d      	mov	r5, r3
   81780:	f101 31ff 	add.w	r1, r1, #4294967295
   81784:	d1ee      	bne.n	81764 <_vfiprintf_r+0x3b4>
   81786:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   8178a:	ebc7 0309 	rsb	r3, r7, r9
   8178e:	9305      	str	r3, [sp, #20]
   81790:	e742      	b.n	81618 <_vfiprintf_r+0x268>
   81792:	f04a 0a10 	orr.w	sl, sl, #16
   81796:	f01a 0320 	ands.w	r3, sl, #32
   8179a:	9004      	str	r0, [sp, #16]
   8179c:	46ac      	mov	ip, r5
   8179e:	f47f af0c 	bne.w	815ba <_vfiprintf_r+0x20a>
   817a2:	f01a 0210 	ands.w	r2, sl, #16
   817a6:	f040 8311 	bne.w	81dcc <_vfiprintf_r+0xa1c>
   817aa:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   817ae:	f000 830d 	beq.w	81dcc <_vfiprintf_r+0xa1c>
   817b2:	f8dd b020 	ldr.w	fp, [sp, #32]
   817b6:	4613      	mov	r3, r2
   817b8:	f8bb 4000 	ldrh.w	r4, [fp]
   817bc:	f10b 0b04 	add.w	fp, fp, #4
   817c0:	2500      	movs	r5, #0
   817c2:	f8cd b020 	str.w	fp, [sp, #32]
   817c6:	e704      	b.n	815d2 <_vfiprintf_r+0x222>
   817c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   817cc:	2000      	movs	r0, #0
   817ce:	f818 3b01 	ldrb.w	r3, [r8], #1
   817d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   817d6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   817da:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   817de:	2a09      	cmp	r2, #9
   817e0:	d9f5      	bls.n	817ce <_vfiprintf_r+0x41e>
   817e2:	e654      	b.n	8148e <_vfiprintf_r+0xde>
   817e4:	f04a 0a10 	orr.w	sl, sl, #16
   817e8:	f01a 0f20 	tst.w	sl, #32
   817ec:	9004      	str	r0, [sp, #16]
   817ee:	46ac      	mov	ip, r5
   817f0:	f47f af73 	bne.w	816da <_vfiprintf_r+0x32a>
   817f4:	f01a 0f10 	tst.w	sl, #16
   817f8:	f040 82ef 	bne.w	81dda <_vfiprintf_r+0xa2a>
   817fc:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81800:	f000 82eb 	beq.w	81dda <_vfiprintf_r+0xa2a>
   81804:	f8dd b020 	ldr.w	fp, [sp, #32]
   81808:	2500      	movs	r5, #0
   8180a:	f8bb 4000 	ldrh.w	r4, [fp]
   8180e:	f10b 0b04 	add.w	fp, fp, #4
   81812:	2301      	movs	r3, #1
   81814:	f8cd b020 	str.w	fp, [sp, #32]
   81818:	e6db      	b.n	815d2 <_vfiprintf_r+0x222>
   8181a:	46ac      	mov	ip, r5
   8181c:	4d51      	ldr	r5, [pc, #324]	; (81964 <_vfiprintf_r+0x5b4>)
   8181e:	f01a 0f20 	tst.w	sl, #32
   81822:	9004      	str	r0, [sp, #16]
   81824:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81828:	950a      	str	r5, [sp, #40]	; 0x28
   8182a:	f000 80f0 	beq.w	81a0e <_vfiprintf_r+0x65e>
   8182e:	9d08      	ldr	r5, [sp, #32]
   81830:	1dea      	adds	r2, r5, #7
   81832:	f022 0207 	bic.w	r2, r2, #7
   81836:	f102 0b08 	add.w	fp, r2, #8
   8183a:	f8cd b020 	str.w	fp, [sp, #32]
   8183e:	e9d2 4500 	ldrd	r4, r5, [r2]
   81842:	f01a 0f01 	tst.w	sl, #1
   81846:	f000 82aa 	beq.w	81d9e <_vfiprintf_r+0x9ee>
   8184a:	ea54 0b05 	orrs.w	fp, r4, r5
   8184e:	f000 82a6 	beq.w	81d9e <_vfiprintf_r+0x9ee>
   81852:	2230      	movs	r2, #48	; 0x30
   81854:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81858:	f04a 0a02 	orr.w	sl, sl, #2
   8185c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81860:	2302      	movs	r3, #2
   81862:	e6b6      	b.n	815d2 <_vfiprintf_r+0x222>
   81864:	9b08      	ldr	r3, [sp, #32]
   81866:	f8dd b020 	ldr.w	fp, [sp, #32]
   8186a:	681b      	ldr	r3, [r3, #0]
   8186c:	2401      	movs	r4, #1
   8186e:	f04f 0500 	mov.w	r5, #0
   81872:	f10b 0b04 	add.w	fp, fp, #4
   81876:	9004      	str	r0, [sp, #16]
   81878:	9403      	str	r4, [sp, #12]
   8187a:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8187e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81882:	f8cd b020 	str.w	fp, [sp, #32]
   81886:	9405      	str	r4, [sp, #20]
   81888:	af16      	add	r7, sp, #88	; 0x58
   8188a:	f04f 0c00 	mov.w	ip, #0
   8188e:	e6d0      	b.n	81632 <_vfiprintf_r+0x282>
   81890:	f01a 0f20 	tst.w	sl, #32
   81894:	9004      	str	r0, [sp, #16]
   81896:	46ac      	mov	ip, r5
   81898:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8189c:	f47f af38 	bne.w	81710 <_vfiprintf_r+0x360>
   818a0:	f01a 0f10 	tst.w	sl, #16
   818a4:	f040 82a7 	bne.w	81df6 <_vfiprintf_r+0xa46>
   818a8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   818ac:	f000 82a3 	beq.w	81df6 <_vfiprintf_r+0xa46>
   818b0:	f8dd b020 	ldr.w	fp, [sp, #32]
   818b4:	f9bb 4000 	ldrsh.w	r4, [fp]
   818b8:	f10b 0b04 	add.w	fp, fp, #4
   818bc:	17e5      	asrs	r5, r4, #31
   818be:	4622      	mov	r2, r4
   818c0:	462b      	mov	r3, r5
   818c2:	f8cd b020 	str.w	fp, [sp, #32]
   818c6:	e72d      	b.n	81724 <_vfiprintf_r+0x374>
   818c8:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   818cc:	f898 3000 	ldrb.w	r3, [r8]
   818d0:	e5db      	b.n	8148a <_vfiprintf_r+0xda>
   818d2:	f898 3000 	ldrb.w	r3, [r8]
   818d6:	4642      	mov	r2, r8
   818d8:	2b6c      	cmp	r3, #108	; 0x6c
   818da:	bf03      	ittte	eq
   818dc:	f108 0801 	addeq.w	r8, r8, #1
   818e0:	f04a 0a20 	orreq.w	sl, sl, #32
   818e4:	7853      	ldrbeq	r3, [r2, #1]
   818e6:	f04a 0a10 	orrne.w	sl, sl, #16
   818ea:	e5ce      	b.n	8148a <_vfiprintf_r+0xda>
   818ec:	f01a 0f20 	tst.w	sl, #32
   818f0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   818f4:	f000 82f7 	beq.w	81ee6 <_vfiprintf_r+0xb36>
   818f8:	9c08      	ldr	r4, [sp, #32]
   818fa:	6821      	ldr	r1, [r4, #0]
   818fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   818fe:	17e5      	asrs	r5, r4, #31
   81900:	462b      	mov	r3, r5
   81902:	9d08      	ldr	r5, [sp, #32]
   81904:	4622      	mov	r2, r4
   81906:	3504      	adds	r5, #4
   81908:	9508      	str	r5, [sp, #32]
   8190a:	e9c1 2300 	strd	r2, r3, [r1]
   8190e:	e582      	b.n	81416 <_vfiprintf_r+0x66>
   81910:	9c08      	ldr	r4, [sp, #32]
   81912:	46ac      	mov	ip, r5
   81914:	6827      	ldr	r7, [r4, #0]
   81916:	f04f 0500 	mov.w	r5, #0
   8191a:	9004      	str	r0, [sp, #16]
   8191c:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   81920:	3404      	adds	r4, #4
   81922:	2f00      	cmp	r7, #0
   81924:	f000 8332 	beq.w	81f8c <_vfiprintf_r+0xbdc>
   81928:	f1bc 0f00 	cmp.w	ip, #0
   8192c:	4638      	mov	r0, r7
   8192e:	f2c0 8307 	blt.w	81f40 <_vfiprintf_r+0xb90>
   81932:	4662      	mov	r2, ip
   81934:	2100      	movs	r1, #0
   81936:	f8cd c004 	str.w	ip, [sp, #4]
   8193a:	f001 fc05 	bl	83148 <memchr>
   8193e:	f8dd c004 	ldr.w	ip, [sp, #4]
   81942:	2800      	cmp	r0, #0
   81944:	f000 833a 	beq.w	81fbc <_vfiprintf_r+0xc0c>
   81948:	1bc0      	subs	r0, r0, r7
   8194a:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8194e:	4560      	cmp	r0, ip
   81950:	bfa8      	it	ge
   81952:	4660      	movge	r0, ip
   81954:	9005      	str	r0, [sp, #20]
   81956:	9408      	str	r4, [sp, #32]
   81958:	9507      	str	r5, [sp, #28]
   8195a:	f04f 0c00 	mov.w	ip, #0
   8195e:	e65b      	b.n	81618 <_vfiprintf_r+0x268>
   81960:	00083b58 	.word	0x00083b58
   81964:	00083b18 	.word	0x00083b18
   81968:	9b08      	ldr	r3, [sp, #32]
   8196a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8196e:	9004      	str	r0, [sp, #16]
   81970:	48b2      	ldr	r0, [pc, #712]	; (81c3c <_vfiprintf_r+0x88c>)
   81972:	681c      	ldr	r4, [r3, #0]
   81974:	2230      	movs	r2, #48	; 0x30
   81976:	2378      	movs	r3, #120	; 0x78
   81978:	f10b 0b04 	add.w	fp, fp, #4
   8197c:	46ac      	mov	ip, r5
   8197e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   81982:	f04a 0a02 	orr.w	sl, sl, #2
   81986:	f8cd b020 	str.w	fp, [sp, #32]
   8198a:	2500      	movs	r5, #0
   8198c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81990:	900a      	str	r0, [sp, #40]	; 0x28
   81992:	2302      	movs	r3, #2
   81994:	e61d      	b.n	815d2 <_vfiprintf_r+0x222>
   81996:	f04a 0a20 	orr.w	sl, sl, #32
   8199a:	f898 3000 	ldrb.w	r3, [r8]
   8199e:	e574      	b.n	8148a <_vfiprintf_r+0xda>
   819a0:	f8dd b020 	ldr.w	fp, [sp, #32]
   819a4:	f8db 0000 	ldr.w	r0, [fp]
   819a8:	f10b 0304 	add.w	r3, fp, #4
   819ac:	2800      	cmp	r0, #0
   819ae:	f6ff adf7 	blt.w	815a0 <_vfiprintf_r+0x1f0>
   819b2:	9308      	str	r3, [sp, #32]
   819b4:	f898 3000 	ldrb.w	r3, [r8]
   819b8:	e567      	b.n	8148a <_vfiprintf_r+0xda>
   819ba:	f898 3000 	ldrb.w	r3, [r8]
   819be:	212b      	movs	r1, #43	; 0x2b
   819c0:	e563      	b.n	8148a <_vfiprintf_r+0xda>
   819c2:	f898 3000 	ldrb.w	r3, [r8]
   819c6:	f108 0401 	add.w	r4, r8, #1
   819ca:	2b2a      	cmp	r3, #42	; 0x2a
   819cc:	f000 8305 	beq.w	81fda <_vfiprintf_r+0xc2a>
   819d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   819d4:	2a09      	cmp	r2, #9
   819d6:	bf98      	it	ls
   819d8:	2500      	movls	r5, #0
   819da:	f200 82fa 	bhi.w	81fd2 <_vfiprintf_r+0xc22>
   819de:	f814 3b01 	ldrb.w	r3, [r4], #1
   819e2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   819e6:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   819ea:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   819ee:	2a09      	cmp	r2, #9
   819f0:	d9f5      	bls.n	819de <_vfiprintf_r+0x62e>
   819f2:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   819f6:	46a0      	mov	r8, r4
   819f8:	e549      	b.n	8148e <_vfiprintf_r+0xde>
   819fa:	4c90      	ldr	r4, [pc, #576]	; (81c3c <_vfiprintf_r+0x88c>)
   819fc:	f01a 0f20 	tst.w	sl, #32
   81a00:	9004      	str	r0, [sp, #16]
   81a02:	46ac      	mov	ip, r5
   81a04:	940a      	str	r4, [sp, #40]	; 0x28
   81a06:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81a0a:	f47f af10 	bne.w	8182e <_vfiprintf_r+0x47e>
   81a0e:	f01a 0f10 	tst.w	sl, #16
   81a12:	f040 81ea 	bne.w	81dea <_vfiprintf_r+0xa3a>
   81a16:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81a1a:	f000 81e6 	beq.w	81dea <_vfiprintf_r+0xa3a>
   81a1e:	f8dd b020 	ldr.w	fp, [sp, #32]
   81a22:	2500      	movs	r5, #0
   81a24:	f8bb 4000 	ldrh.w	r4, [fp]
   81a28:	f10b 0b04 	add.w	fp, fp, #4
   81a2c:	f8cd b020 	str.w	fp, [sp, #32]
   81a30:	e707      	b.n	81842 <_vfiprintf_r+0x492>
   81a32:	f898 3000 	ldrb.w	r3, [r8]
   81a36:	2900      	cmp	r1, #0
   81a38:	f47f ad27 	bne.w	8148a <_vfiprintf_r+0xda>
   81a3c:	2120      	movs	r1, #32
   81a3e:	e524      	b.n	8148a <_vfiprintf_r+0xda>
   81a40:	f04a 0a01 	orr.w	sl, sl, #1
   81a44:	f898 3000 	ldrb.w	r3, [r8]
   81a48:	e51f      	b.n	8148a <_vfiprintf_r+0xda>
   81a4a:	9004      	str	r0, [sp, #16]
   81a4c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   81a50:	2b00      	cmp	r3, #0
   81a52:	f000 80f9 	beq.w	81c48 <_vfiprintf_r+0x898>
   81a56:	2501      	movs	r5, #1
   81a58:	f04f 0b00 	mov.w	fp, #0
   81a5c:	9503      	str	r5, [sp, #12]
   81a5e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   81a62:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81a66:	9505      	str	r5, [sp, #20]
   81a68:	af16      	add	r7, sp, #88	; 0x58
   81a6a:	e70e      	b.n	8188a <_vfiprintf_r+0x4da>
   81a6c:	9806      	ldr	r0, [sp, #24]
   81a6e:	9902      	ldr	r1, [sp, #8]
   81a70:	aa13      	add	r2, sp, #76	; 0x4c
   81a72:	f7ff fc61 	bl	81338 <__sprint_r.part.0>
   81a76:	2800      	cmp	r0, #0
   81a78:	f040 80ed 	bne.w	81c56 <_vfiprintf_r+0x8a6>
   81a7c:	9814      	ldr	r0, [sp, #80]	; 0x50
   81a7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81a80:	1c43      	adds	r3, r0, #1
   81a82:	46cc      	mov	ip, r9
   81a84:	e5fe      	b.n	81684 <_vfiprintf_r+0x2d4>
   81a86:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81a88:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81a8a:	1c59      	adds	r1, r3, #1
   81a8c:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   81a90:	b168      	cbz	r0, 81aae <_vfiprintf_r+0x6fe>
   81a92:	3201      	adds	r2, #1
   81a94:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   81a98:	2301      	movs	r3, #1
   81a9a:	2907      	cmp	r1, #7
   81a9c:	9215      	str	r2, [sp, #84]	; 0x54
   81a9e:	9114      	str	r1, [sp, #80]	; 0x50
   81aa0:	e886 0009 	stmia.w	r6, {r0, r3}
   81aa4:	f300 8160 	bgt.w	81d68 <_vfiprintf_r+0x9b8>
   81aa8:	460b      	mov	r3, r1
   81aaa:	3608      	adds	r6, #8
   81aac:	3101      	adds	r1, #1
   81aae:	9c07      	ldr	r4, [sp, #28]
   81ab0:	b164      	cbz	r4, 81acc <_vfiprintf_r+0x71c>
   81ab2:	3202      	adds	r2, #2
   81ab4:	a812      	add	r0, sp, #72	; 0x48
   81ab6:	2302      	movs	r3, #2
   81ab8:	2907      	cmp	r1, #7
   81aba:	9215      	str	r2, [sp, #84]	; 0x54
   81abc:	9114      	str	r1, [sp, #80]	; 0x50
   81abe:	e886 0009 	stmia.w	r6, {r0, r3}
   81ac2:	f300 8157 	bgt.w	81d74 <_vfiprintf_r+0x9c4>
   81ac6:	460b      	mov	r3, r1
   81ac8:	3608      	adds	r6, #8
   81aca:	3101      	adds	r1, #1
   81acc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   81ace:	2d80      	cmp	r5, #128	; 0x80
   81ad0:	f000 8101 	beq.w	81cd6 <_vfiprintf_r+0x926>
   81ad4:	9d05      	ldr	r5, [sp, #20]
   81ad6:	ebc5 040c 	rsb	r4, r5, ip
   81ada:	2c00      	cmp	r4, #0
   81adc:	dd2f      	ble.n	81b3e <_vfiprintf_r+0x78e>
   81ade:	2c10      	cmp	r4, #16
   81ae0:	4d57      	ldr	r5, [pc, #348]	; (81c40 <_vfiprintf_r+0x890>)
   81ae2:	dd22      	ble.n	81b2a <_vfiprintf_r+0x77a>
   81ae4:	4630      	mov	r0, r6
   81ae6:	f04f 0b10 	mov.w	fp, #16
   81aea:	462e      	mov	r6, r5
   81aec:	4625      	mov	r5, r4
   81aee:	9c06      	ldr	r4, [sp, #24]
   81af0:	e006      	b.n	81b00 <_vfiprintf_r+0x750>
   81af2:	f103 0c02 	add.w	ip, r3, #2
   81af6:	3008      	adds	r0, #8
   81af8:	460b      	mov	r3, r1
   81afa:	3d10      	subs	r5, #16
   81afc:	2d10      	cmp	r5, #16
   81afe:	dd10      	ble.n	81b22 <_vfiprintf_r+0x772>
   81b00:	1c59      	adds	r1, r3, #1
   81b02:	3210      	adds	r2, #16
   81b04:	2907      	cmp	r1, #7
   81b06:	9215      	str	r2, [sp, #84]	; 0x54
   81b08:	e880 0840 	stmia.w	r0, {r6, fp}
   81b0c:	9114      	str	r1, [sp, #80]	; 0x50
   81b0e:	ddf0      	ble.n	81af2 <_vfiprintf_r+0x742>
   81b10:	2a00      	cmp	r2, #0
   81b12:	d163      	bne.n	81bdc <_vfiprintf_r+0x82c>
   81b14:	3d10      	subs	r5, #16
   81b16:	2d10      	cmp	r5, #16
   81b18:	f04f 0c01 	mov.w	ip, #1
   81b1c:	4613      	mov	r3, r2
   81b1e:	4648      	mov	r0, r9
   81b20:	dcee      	bgt.n	81b00 <_vfiprintf_r+0x750>
   81b22:	462c      	mov	r4, r5
   81b24:	4661      	mov	r1, ip
   81b26:	4635      	mov	r5, r6
   81b28:	4606      	mov	r6, r0
   81b2a:	4422      	add	r2, r4
   81b2c:	2907      	cmp	r1, #7
   81b2e:	9215      	str	r2, [sp, #84]	; 0x54
   81b30:	6035      	str	r5, [r6, #0]
   81b32:	6074      	str	r4, [r6, #4]
   81b34:	9114      	str	r1, [sp, #80]	; 0x50
   81b36:	f300 80c1 	bgt.w	81cbc <_vfiprintf_r+0x90c>
   81b3a:	3608      	adds	r6, #8
   81b3c:	3101      	adds	r1, #1
   81b3e:	9d05      	ldr	r5, [sp, #20]
   81b40:	2907      	cmp	r1, #7
   81b42:	442a      	add	r2, r5
   81b44:	9215      	str	r2, [sp, #84]	; 0x54
   81b46:	6037      	str	r7, [r6, #0]
   81b48:	6075      	str	r5, [r6, #4]
   81b4a:	9114      	str	r1, [sp, #80]	; 0x50
   81b4c:	f340 80c1 	ble.w	81cd2 <_vfiprintf_r+0x922>
   81b50:	2a00      	cmp	r2, #0
   81b52:	f040 8130 	bne.w	81db6 <_vfiprintf_r+0xa06>
   81b56:	9214      	str	r2, [sp, #80]	; 0x50
   81b58:	464e      	mov	r6, r9
   81b5a:	f01a 0f04 	tst.w	sl, #4
   81b5e:	f000 808b 	beq.w	81c78 <_vfiprintf_r+0x8c8>
   81b62:	9d04      	ldr	r5, [sp, #16]
   81b64:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81b68:	ebcb 0405 	rsb	r4, fp, r5
   81b6c:	2c00      	cmp	r4, #0
   81b6e:	f340 8083 	ble.w	81c78 <_vfiprintf_r+0x8c8>
   81b72:	2c10      	cmp	r4, #16
   81b74:	f340 821e 	ble.w	81fb4 <_vfiprintf_r+0xc04>
   81b78:	9914      	ldr	r1, [sp, #80]	; 0x50
   81b7a:	4d32      	ldr	r5, [pc, #200]	; (81c44 <_vfiprintf_r+0x894>)
   81b7c:	2710      	movs	r7, #16
   81b7e:	f8dd a018 	ldr.w	sl, [sp, #24]
   81b82:	f8dd b008 	ldr.w	fp, [sp, #8]
   81b86:	e005      	b.n	81b94 <_vfiprintf_r+0x7e4>
   81b88:	1c88      	adds	r0, r1, #2
   81b8a:	3608      	adds	r6, #8
   81b8c:	4619      	mov	r1, r3
   81b8e:	3c10      	subs	r4, #16
   81b90:	2c10      	cmp	r4, #16
   81b92:	dd10      	ble.n	81bb6 <_vfiprintf_r+0x806>
   81b94:	1c4b      	adds	r3, r1, #1
   81b96:	3210      	adds	r2, #16
   81b98:	2b07      	cmp	r3, #7
   81b9a:	9215      	str	r2, [sp, #84]	; 0x54
   81b9c:	e886 00a0 	stmia.w	r6, {r5, r7}
   81ba0:	9314      	str	r3, [sp, #80]	; 0x50
   81ba2:	ddf1      	ble.n	81b88 <_vfiprintf_r+0x7d8>
   81ba4:	2a00      	cmp	r2, #0
   81ba6:	d17d      	bne.n	81ca4 <_vfiprintf_r+0x8f4>
   81ba8:	3c10      	subs	r4, #16
   81baa:	2c10      	cmp	r4, #16
   81bac:	f04f 0001 	mov.w	r0, #1
   81bb0:	4611      	mov	r1, r2
   81bb2:	464e      	mov	r6, r9
   81bb4:	dcee      	bgt.n	81b94 <_vfiprintf_r+0x7e4>
   81bb6:	4422      	add	r2, r4
   81bb8:	2807      	cmp	r0, #7
   81bba:	9215      	str	r2, [sp, #84]	; 0x54
   81bbc:	6035      	str	r5, [r6, #0]
   81bbe:	6074      	str	r4, [r6, #4]
   81bc0:	9014      	str	r0, [sp, #80]	; 0x50
   81bc2:	dd59      	ble.n	81c78 <_vfiprintf_r+0x8c8>
   81bc4:	2a00      	cmp	r2, #0
   81bc6:	d14f      	bne.n	81c68 <_vfiprintf_r+0x8b8>
   81bc8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81bca:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81bce:	9d04      	ldr	r5, [sp, #16]
   81bd0:	45ab      	cmp	fp, r5
   81bd2:	bfac      	ite	ge
   81bd4:	445c      	addge	r4, fp
   81bd6:	1964      	addlt	r4, r4, r5
   81bd8:	9409      	str	r4, [sp, #36]	; 0x24
   81bda:	e05e      	b.n	81c9a <_vfiprintf_r+0x8ea>
   81bdc:	4620      	mov	r0, r4
   81bde:	9902      	ldr	r1, [sp, #8]
   81be0:	aa13      	add	r2, sp, #76	; 0x4c
   81be2:	f7ff fba9 	bl	81338 <__sprint_r.part.0>
   81be6:	2800      	cmp	r0, #0
   81be8:	d135      	bne.n	81c56 <_vfiprintf_r+0x8a6>
   81bea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81bec:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81bee:	f103 0c01 	add.w	ip, r3, #1
   81bf2:	4648      	mov	r0, r9
   81bf4:	e781      	b.n	81afa <_vfiprintf_r+0x74a>
   81bf6:	08e0      	lsrs	r0, r4, #3
   81bf8:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   81bfc:	f004 0207 	and.w	r2, r4, #7
   81c00:	08e9      	lsrs	r1, r5, #3
   81c02:	3230      	adds	r2, #48	; 0x30
   81c04:	ea50 0b01 	orrs.w	fp, r0, r1
   81c08:	461f      	mov	r7, r3
   81c0a:	701a      	strb	r2, [r3, #0]
   81c0c:	4604      	mov	r4, r0
   81c0e:	460d      	mov	r5, r1
   81c10:	f103 33ff 	add.w	r3, r3, #4294967295
   81c14:	d1ef      	bne.n	81bf6 <_vfiprintf_r+0x846>
   81c16:	f01a 0f01 	tst.w	sl, #1
   81c1a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   81c1e:	4639      	mov	r1, r7
   81c20:	f000 80b9 	beq.w	81d96 <_vfiprintf_r+0x9e6>
   81c24:	2a30      	cmp	r2, #48	; 0x30
   81c26:	f43f acf4 	beq.w	81612 <_vfiprintf_r+0x262>
   81c2a:	461f      	mov	r7, r3
   81c2c:	ebc7 0509 	rsb	r5, r7, r9
   81c30:	2330      	movs	r3, #48	; 0x30
   81c32:	9505      	str	r5, [sp, #20]
   81c34:	f801 3c01 	strb.w	r3, [r1, #-1]
   81c38:	e4ee      	b.n	81618 <_vfiprintf_r+0x268>
   81c3a:	bf00      	nop
   81c3c:	00083b2c 	.word	0x00083b2c
   81c40:	00083b48 	.word	0x00083b48
   81c44:	00083b58 	.word	0x00083b58
   81c48:	9b15      	ldr	r3, [sp, #84]	; 0x54
   81c4a:	b123      	cbz	r3, 81c56 <_vfiprintf_r+0x8a6>
   81c4c:	9806      	ldr	r0, [sp, #24]
   81c4e:	9902      	ldr	r1, [sp, #8]
   81c50:	aa13      	add	r2, sp, #76	; 0x4c
   81c52:	f7ff fb71 	bl	81338 <__sprint_r.part.0>
   81c56:	9c02      	ldr	r4, [sp, #8]
   81c58:	89a3      	ldrh	r3, [r4, #12]
   81c5a:	065b      	lsls	r3, r3, #25
   81c5c:	f53f ac98 	bmi.w	81590 <_vfiprintf_r+0x1e0>
   81c60:	9809      	ldr	r0, [sp, #36]	; 0x24
   81c62:	b031      	add	sp, #196	; 0xc4
   81c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c68:	9806      	ldr	r0, [sp, #24]
   81c6a:	9902      	ldr	r1, [sp, #8]
   81c6c:	aa13      	add	r2, sp, #76	; 0x4c
   81c6e:	f7ff fb63 	bl	81338 <__sprint_r.part.0>
   81c72:	2800      	cmp	r0, #0
   81c74:	d1ef      	bne.n	81c56 <_vfiprintf_r+0x8a6>
   81c76:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81c78:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81c7a:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81c7e:	9d04      	ldr	r5, [sp, #16]
   81c80:	45ab      	cmp	fp, r5
   81c82:	bfac      	ite	ge
   81c84:	445c      	addge	r4, fp
   81c86:	1964      	addlt	r4, r4, r5
   81c88:	9409      	str	r4, [sp, #36]	; 0x24
   81c8a:	b132      	cbz	r2, 81c9a <_vfiprintf_r+0x8ea>
   81c8c:	9806      	ldr	r0, [sp, #24]
   81c8e:	9902      	ldr	r1, [sp, #8]
   81c90:	aa13      	add	r2, sp, #76	; 0x4c
   81c92:	f7ff fb51 	bl	81338 <__sprint_r.part.0>
   81c96:	2800      	cmp	r0, #0
   81c98:	d1dd      	bne.n	81c56 <_vfiprintf_r+0x8a6>
   81c9a:	2000      	movs	r0, #0
   81c9c:	9014      	str	r0, [sp, #80]	; 0x50
   81c9e:	464e      	mov	r6, r9
   81ca0:	f7ff bbb9 	b.w	81416 <_vfiprintf_r+0x66>
   81ca4:	4650      	mov	r0, sl
   81ca6:	4659      	mov	r1, fp
   81ca8:	aa13      	add	r2, sp, #76	; 0x4c
   81caa:	f7ff fb45 	bl	81338 <__sprint_r.part.0>
   81cae:	2800      	cmp	r0, #0
   81cb0:	d1d1      	bne.n	81c56 <_vfiprintf_r+0x8a6>
   81cb2:	9914      	ldr	r1, [sp, #80]	; 0x50
   81cb4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81cb6:	1c48      	adds	r0, r1, #1
   81cb8:	464e      	mov	r6, r9
   81cba:	e768      	b.n	81b8e <_vfiprintf_r+0x7de>
   81cbc:	2a00      	cmp	r2, #0
   81cbe:	f040 80f7 	bne.w	81eb0 <_vfiprintf_r+0xb00>
   81cc2:	9c05      	ldr	r4, [sp, #20]
   81cc4:	2301      	movs	r3, #1
   81cc6:	9720      	str	r7, [sp, #128]	; 0x80
   81cc8:	9421      	str	r4, [sp, #132]	; 0x84
   81cca:	9415      	str	r4, [sp, #84]	; 0x54
   81ccc:	4622      	mov	r2, r4
   81cce:	9314      	str	r3, [sp, #80]	; 0x50
   81cd0:	464e      	mov	r6, r9
   81cd2:	3608      	adds	r6, #8
   81cd4:	e741      	b.n	81b5a <_vfiprintf_r+0x7aa>
   81cd6:	9d04      	ldr	r5, [sp, #16]
   81cd8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   81cdc:	ebcb 0405 	rsb	r4, fp, r5
   81ce0:	2c00      	cmp	r4, #0
   81ce2:	f77f aef7 	ble.w	81ad4 <_vfiprintf_r+0x724>
   81ce6:	2c10      	cmp	r4, #16
   81ce8:	4da6      	ldr	r5, [pc, #664]	; (81f84 <_vfiprintf_r+0xbd4>)
   81cea:	f340 8170 	ble.w	81fce <_vfiprintf_r+0xc1e>
   81cee:	4629      	mov	r1, r5
   81cf0:	f04f 0b10 	mov.w	fp, #16
   81cf4:	4625      	mov	r5, r4
   81cf6:	4664      	mov	r4, ip
   81cf8:	46b4      	mov	ip, r6
   81cfa:	460e      	mov	r6, r1
   81cfc:	e006      	b.n	81d0c <_vfiprintf_r+0x95c>
   81cfe:	1c98      	adds	r0, r3, #2
   81d00:	f10c 0c08 	add.w	ip, ip, #8
   81d04:	460b      	mov	r3, r1
   81d06:	3d10      	subs	r5, #16
   81d08:	2d10      	cmp	r5, #16
   81d0a:	dd0f      	ble.n	81d2c <_vfiprintf_r+0x97c>
   81d0c:	1c59      	adds	r1, r3, #1
   81d0e:	3210      	adds	r2, #16
   81d10:	2907      	cmp	r1, #7
   81d12:	9215      	str	r2, [sp, #84]	; 0x54
   81d14:	e88c 0840 	stmia.w	ip, {r6, fp}
   81d18:	9114      	str	r1, [sp, #80]	; 0x50
   81d1a:	ddf0      	ble.n	81cfe <_vfiprintf_r+0x94e>
   81d1c:	b9ba      	cbnz	r2, 81d4e <_vfiprintf_r+0x99e>
   81d1e:	3d10      	subs	r5, #16
   81d20:	2d10      	cmp	r5, #16
   81d22:	f04f 0001 	mov.w	r0, #1
   81d26:	4613      	mov	r3, r2
   81d28:	46cc      	mov	ip, r9
   81d2a:	dcef      	bgt.n	81d0c <_vfiprintf_r+0x95c>
   81d2c:	4633      	mov	r3, r6
   81d2e:	4666      	mov	r6, ip
   81d30:	46a4      	mov	ip, r4
   81d32:	462c      	mov	r4, r5
   81d34:	461d      	mov	r5, r3
   81d36:	4422      	add	r2, r4
   81d38:	2807      	cmp	r0, #7
   81d3a:	9215      	str	r2, [sp, #84]	; 0x54
   81d3c:	6035      	str	r5, [r6, #0]
   81d3e:	6074      	str	r4, [r6, #4]
   81d40:	9014      	str	r0, [sp, #80]	; 0x50
   81d42:	f300 80af 	bgt.w	81ea4 <_vfiprintf_r+0xaf4>
   81d46:	3608      	adds	r6, #8
   81d48:	1c41      	adds	r1, r0, #1
   81d4a:	4603      	mov	r3, r0
   81d4c:	e6c2      	b.n	81ad4 <_vfiprintf_r+0x724>
   81d4e:	9806      	ldr	r0, [sp, #24]
   81d50:	9902      	ldr	r1, [sp, #8]
   81d52:	aa13      	add	r2, sp, #76	; 0x4c
   81d54:	f7ff faf0 	bl	81338 <__sprint_r.part.0>
   81d58:	2800      	cmp	r0, #0
   81d5a:	f47f af7c 	bne.w	81c56 <_vfiprintf_r+0x8a6>
   81d5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81d60:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81d62:	1c58      	adds	r0, r3, #1
   81d64:	46cc      	mov	ip, r9
   81d66:	e7ce      	b.n	81d06 <_vfiprintf_r+0x956>
   81d68:	2a00      	cmp	r2, #0
   81d6a:	d179      	bne.n	81e60 <_vfiprintf_r+0xab0>
   81d6c:	4619      	mov	r1, r3
   81d6e:	464e      	mov	r6, r9
   81d70:	4613      	mov	r3, r2
   81d72:	e69c      	b.n	81aae <_vfiprintf_r+0x6fe>
   81d74:	2a00      	cmp	r2, #0
   81d76:	f040 8084 	bne.w	81e82 <_vfiprintf_r+0xad2>
   81d7a:	2101      	movs	r1, #1
   81d7c:	4613      	mov	r3, r2
   81d7e:	464e      	mov	r6, r9
   81d80:	e6a4      	b.n	81acc <_vfiprintf_r+0x71c>
   81d82:	464f      	mov	r7, r9
   81d84:	e448      	b.n	81618 <_vfiprintf_r+0x268>
   81d86:	2d00      	cmp	r5, #0
   81d88:	bf08      	it	eq
   81d8a:	2c0a      	cmpeq	r4, #10
   81d8c:	d246      	bcs.n	81e1c <_vfiprintf_r+0xa6c>
   81d8e:	3430      	adds	r4, #48	; 0x30
   81d90:	af30      	add	r7, sp, #192	; 0xc0
   81d92:	f807 4d41 	strb.w	r4, [r7, #-65]!
   81d96:	ebc7 0309 	rsb	r3, r7, r9
   81d9a:	9305      	str	r3, [sp, #20]
   81d9c:	e43c      	b.n	81618 <_vfiprintf_r+0x268>
   81d9e:	2302      	movs	r3, #2
   81da0:	e417      	b.n	815d2 <_vfiprintf_r+0x222>
   81da2:	2a00      	cmp	r2, #0
   81da4:	f040 80af 	bne.w	81f06 <_vfiprintf_r+0xb56>
   81da8:	4613      	mov	r3, r2
   81daa:	2101      	movs	r1, #1
   81dac:	464e      	mov	r6, r9
   81dae:	e66d      	b.n	81a8c <_vfiprintf_r+0x6dc>
   81db0:	4644      	mov	r4, r8
   81db2:	f7ff bb58 	b.w	81466 <_vfiprintf_r+0xb6>
   81db6:	9806      	ldr	r0, [sp, #24]
   81db8:	9902      	ldr	r1, [sp, #8]
   81dba:	aa13      	add	r2, sp, #76	; 0x4c
   81dbc:	f7ff fabc 	bl	81338 <__sprint_r.part.0>
   81dc0:	2800      	cmp	r0, #0
   81dc2:	f47f af48 	bne.w	81c56 <_vfiprintf_r+0x8a6>
   81dc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81dc8:	464e      	mov	r6, r9
   81dca:	e6c6      	b.n	81b5a <_vfiprintf_r+0x7aa>
   81dcc:	9d08      	ldr	r5, [sp, #32]
   81dce:	682c      	ldr	r4, [r5, #0]
   81dd0:	3504      	adds	r5, #4
   81dd2:	9508      	str	r5, [sp, #32]
   81dd4:	2500      	movs	r5, #0
   81dd6:	f7ff bbfc 	b.w	815d2 <_vfiprintf_r+0x222>
   81dda:	9d08      	ldr	r5, [sp, #32]
   81ddc:	2301      	movs	r3, #1
   81dde:	682c      	ldr	r4, [r5, #0]
   81de0:	3504      	adds	r5, #4
   81de2:	9508      	str	r5, [sp, #32]
   81de4:	2500      	movs	r5, #0
   81de6:	f7ff bbf4 	b.w	815d2 <_vfiprintf_r+0x222>
   81dea:	9d08      	ldr	r5, [sp, #32]
   81dec:	682c      	ldr	r4, [r5, #0]
   81dee:	3504      	adds	r5, #4
   81df0:	9508      	str	r5, [sp, #32]
   81df2:	2500      	movs	r5, #0
   81df4:	e525      	b.n	81842 <_vfiprintf_r+0x492>
   81df6:	9d08      	ldr	r5, [sp, #32]
   81df8:	682c      	ldr	r4, [r5, #0]
   81dfa:	3504      	adds	r5, #4
   81dfc:	9508      	str	r5, [sp, #32]
   81dfe:	17e5      	asrs	r5, r4, #31
   81e00:	4622      	mov	r2, r4
   81e02:	462b      	mov	r3, r5
   81e04:	e48e      	b.n	81724 <_vfiprintf_r+0x374>
   81e06:	9806      	ldr	r0, [sp, #24]
   81e08:	9902      	ldr	r1, [sp, #8]
   81e0a:	aa13      	add	r2, sp, #76	; 0x4c
   81e0c:	f7ff fa94 	bl	81338 <__sprint_r.part.0>
   81e10:	2800      	cmp	r0, #0
   81e12:	f47f af20 	bne.w	81c56 <_vfiprintf_r+0x8a6>
   81e16:	464e      	mov	r6, r9
   81e18:	f7ff bb9a 	b.w	81550 <_vfiprintf_r+0x1a0>
   81e1c:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   81e20:	9603      	str	r6, [sp, #12]
   81e22:	465e      	mov	r6, fp
   81e24:	46e3      	mov	fp, ip
   81e26:	4620      	mov	r0, r4
   81e28:	4629      	mov	r1, r5
   81e2a:	220a      	movs	r2, #10
   81e2c:	2300      	movs	r3, #0
   81e2e:	f7fe fe95 	bl	80b5c <__aeabi_uldivmod>
   81e32:	3230      	adds	r2, #48	; 0x30
   81e34:	7032      	strb	r2, [r6, #0]
   81e36:	4620      	mov	r0, r4
   81e38:	4629      	mov	r1, r5
   81e3a:	220a      	movs	r2, #10
   81e3c:	2300      	movs	r3, #0
   81e3e:	f7fe fe8d 	bl	80b5c <__aeabi_uldivmod>
   81e42:	4604      	mov	r4, r0
   81e44:	460d      	mov	r5, r1
   81e46:	ea54 0005 	orrs.w	r0, r4, r5
   81e4a:	4637      	mov	r7, r6
   81e4c:	f106 36ff 	add.w	r6, r6, #4294967295
   81e50:	d1e9      	bne.n	81e26 <_vfiprintf_r+0xa76>
   81e52:	ebc7 0309 	rsb	r3, r7, r9
   81e56:	46dc      	mov	ip, fp
   81e58:	9e03      	ldr	r6, [sp, #12]
   81e5a:	9305      	str	r3, [sp, #20]
   81e5c:	f7ff bbdc 	b.w	81618 <_vfiprintf_r+0x268>
   81e60:	9806      	ldr	r0, [sp, #24]
   81e62:	9902      	ldr	r1, [sp, #8]
   81e64:	aa13      	add	r2, sp, #76	; 0x4c
   81e66:	f8cd c004 	str.w	ip, [sp, #4]
   81e6a:	f7ff fa65 	bl	81338 <__sprint_r.part.0>
   81e6e:	f8dd c004 	ldr.w	ip, [sp, #4]
   81e72:	2800      	cmp	r0, #0
   81e74:	f47f aeef 	bne.w	81c56 <_vfiprintf_r+0x8a6>
   81e78:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81e7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e7c:	1c59      	adds	r1, r3, #1
   81e7e:	464e      	mov	r6, r9
   81e80:	e615      	b.n	81aae <_vfiprintf_r+0x6fe>
   81e82:	9806      	ldr	r0, [sp, #24]
   81e84:	9902      	ldr	r1, [sp, #8]
   81e86:	aa13      	add	r2, sp, #76	; 0x4c
   81e88:	f8cd c004 	str.w	ip, [sp, #4]
   81e8c:	f7ff fa54 	bl	81338 <__sprint_r.part.0>
   81e90:	f8dd c004 	ldr.w	ip, [sp, #4]
   81e94:	2800      	cmp	r0, #0
   81e96:	f47f aede 	bne.w	81c56 <_vfiprintf_r+0x8a6>
   81e9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81e9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81e9e:	1c59      	adds	r1, r3, #1
   81ea0:	464e      	mov	r6, r9
   81ea2:	e613      	b.n	81acc <_vfiprintf_r+0x71c>
   81ea4:	2a00      	cmp	r2, #0
   81ea6:	d156      	bne.n	81f56 <_vfiprintf_r+0xba6>
   81ea8:	2101      	movs	r1, #1
   81eaa:	4613      	mov	r3, r2
   81eac:	464e      	mov	r6, r9
   81eae:	e611      	b.n	81ad4 <_vfiprintf_r+0x724>
   81eb0:	9806      	ldr	r0, [sp, #24]
   81eb2:	9902      	ldr	r1, [sp, #8]
   81eb4:	aa13      	add	r2, sp, #76	; 0x4c
   81eb6:	f7ff fa3f 	bl	81338 <__sprint_r.part.0>
   81eba:	2800      	cmp	r0, #0
   81ebc:	f47f aecb 	bne.w	81c56 <_vfiprintf_r+0x8a6>
   81ec0:	9914      	ldr	r1, [sp, #80]	; 0x50
   81ec2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81ec4:	3101      	adds	r1, #1
   81ec6:	464e      	mov	r6, r9
   81ec8:	e639      	b.n	81b3e <_vfiprintf_r+0x78e>
   81eca:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   81ece:	4264      	negs	r4, r4
   81ed0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   81ed4:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   81ed8:	f8cd b01c 	str.w	fp, [sp, #28]
   81edc:	f8cd c014 	str.w	ip, [sp, #20]
   81ee0:	2301      	movs	r3, #1
   81ee2:	f7ff bb7e 	b.w	815e2 <_vfiprintf_r+0x232>
   81ee6:	f01a 0f10 	tst.w	sl, #16
   81eea:	d11d      	bne.n	81f28 <_vfiprintf_r+0xb78>
   81eec:	f01a 0f40 	tst.w	sl, #64	; 0x40
   81ef0:	d058      	beq.n	81fa4 <_vfiprintf_r+0xbf4>
   81ef2:	9d08      	ldr	r5, [sp, #32]
   81ef4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   81ef8:	682b      	ldr	r3, [r5, #0]
   81efa:	3504      	adds	r5, #4
   81efc:	9508      	str	r5, [sp, #32]
   81efe:	f8a3 b000 	strh.w	fp, [r3]
   81f02:	f7ff ba88 	b.w	81416 <_vfiprintf_r+0x66>
   81f06:	9806      	ldr	r0, [sp, #24]
   81f08:	9902      	ldr	r1, [sp, #8]
   81f0a:	aa13      	add	r2, sp, #76	; 0x4c
   81f0c:	f8cd c004 	str.w	ip, [sp, #4]
   81f10:	f7ff fa12 	bl	81338 <__sprint_r.part.0>
   81f14:	f8dd c004 	ldr.w	ip, [sp, #4]
   81f18:	2800      	cmp	r0, #0
   81f1a:	f47f ae9c 	bne.w	81c56 <_vfiprintf_r+0x8a6>
   81f1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81f20:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81f22:	1c59      	adds	r1, r3, #1
   81f24:	464e      	mov	r6, r9
   81f26:	e5b1      	b.n	81a8c <_vfiprintf_r+0x6dc>
   81f28:	f8dd b020 	ldr.w	fp, [sp, #32]
   81f2c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   81f2e:	f8db 3000 	ldr.w	r3, [fp]
   81f32:	f10b 0b04 	add.w	fp, fp, #4
   81f36:	f8cd b020 	str.w	fp, [sp, #32]
   81f3a:	601c      	str	r4, [r3, #0]
   81f3c:	f7ff ba6b 	b.w	81416 <_vfiprintf_r+0x66>
   81f40:	9408      	str	r4, [sp, #32]
   81f42:	f001 fc5f 	bl	83804 <strlen>
   81f46:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   81f4a:	9005      	str	r0, [sp, #20]
   81f4c:	9407      	str	r4, [sp, #28]
   81f4e:	f04f 0c00 	mov.w	ip, #0
   81f52:	f7ff bb61 	b.w	81618 <_vfiprintf_r+0x268>
   81f56:	9806      	ldr	r0, [sp, #24]
   81f58:	9902      	ldr	r1, [sp, #8]
   81f5a:	aa13      	add	r2, sp, #76	; 0x4c
   81f5c:	f8cd c004 	str.w	ip, [sp, #4]
   81f60:	f7ff f9ea 	bl	81338 <__sprint_r.part.0>
   81f64:	f8dd c004 	ldr.w	ip, [sp, #4]
   81f68:	2800      	cmp	r0, #0
   81f6a:	f47f ae74 	bne.w	81c56 <_vfiprintf_r+0x8a6>
   81f6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81f70:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81f72:	1c59      	adds	r1, r3, #1
   81f74:	464e      	mov	r6, r9
   81f76:	e5ad      	b.n	81ad4 <_vfiprintf_r+0x724>
   81f78:	9b14      	ldr	r3, [sp, #80]	; 0x50
   81f7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   81f7c:	3301      	adds	r3, #1
   81f7e:	4d02      	ldr	r5, [pc, #8]	; (81f88 <_vfiprintf_r+0xbd8>)
   81f80:	f7ff bb9a 	b.w	816b8 <_vfiprintf_r+0x308>
   81f84:	00083b48 	.word	0x00083b48
   81f88:	00083b58 	.word	0x00083b58
   81f8c:	f1bc 0f06 	cmp.w	ip, #6
   81f90:	bf34      	ite	cc
   81f92:	4663      	movcc	r3, ip
   81f94:	2306      	movcs	r3, #6
   81f96:	9408      	str	r4, [sp, #32]
   81f98:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   81f9c:	9305      	str	r3, [sp, #20]
   81f9e:	9403      	str	r4, [sp, #12]
   81fa0:	4f16      	ldr	r7, [pc, #88]	; (81ffc <_vfiprintf_r+0xc4c>)
   81fa2:	e472      	b.n	8188a <_vfiprintf_r+0x4da>
   81fa4:	9c08      	ldr	r4, [sp, #32]
   81fa6:	9d09      	ldr	r5, [sp, #36]	; 0x24
   81fa8:	6823      	ldr	r3, [r4, #0]
   81faa:	3404      	adds	r4, #4
   81fac:	9408      	str	r4, [sp, #32]
   81fae:	601d      	str	r5, [r3, #0]
   81fb0:	f7ff ba31 	b.w	81416 <_vfiprintf_r+0x66>
   81fb4:	9814      	ldr	r0, [sp, #80]	; 0x50
   81fb6:	4d12      	ldr	r5, [pc, #72]	; (82000 <_vfiprintf_r+0xc50>)
   81fb8:	3001      	adds	r0, #1
   81fba:	e5fc      	b.n	81bb6 <_vfiprintf_r+0x806>
   81fbc:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   81fc0:	f8cd c014 	str.w	ip, [sp, #20]
   81fc4:	9507      	str	r5, [sp, #28]
   81fc6:	9408      	str	r4, [sp, #32]
   81fc8:	4684      	mov	ip, r0
   81fca:	f7ff bb25 	b.w	81618 <_vfiprintf_r+0x268>
   81fce:	4608      	mov	r0, r1
   81fd0:	e6b1      	b.n	81d36 <_vfiprintf_r+0x986>
   81fd2:	46a0      	mov	r8, r4
   81fd4:	2500      	movs	r5, #0
   81fd6:	f7ff ba5a 	b.w	8148e <_vfiprintf_r+0xde>
   81fda:	f8dd b020 	ldr.w	fp, [sp, #32]
   81fde:	f898 3001 	ldrb.w	r3, [r8, #1]
   81fe2:	f8db 5000 	ldr.w	r5, [fp]
   81fe6:	f10b 0204 	add.w	r2, fp, #4
   81fea:	2d00      	cmp	r5, #0
   81fec:	9208      	str	r2, [sp, #32]
   81fee:	46a0      	mov	r8, r4
   81ff0:	f6bf aa4b 	bge.w	8148a <_vfiprintf_r+0xda>
   81ff4:	f04f 35ff 	mov.w	r5, #4294967295
   81ff8:	f7ff ba47 	b.w	8148a <_vfiprintf_r+0xda>
   81ffc:	00083b40 	.word	0x00083b40
   82000:	00083b58 	.word	0x00083b58

00082004 <__sbprintf>:
   82004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82008:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   8200a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8200e:	4688      	mov	r8, r1
   82010:	9719      	str	r7, [sp, #100]	; 0x64
   82012:	f8d8 701c 	ldr.w	r7, [r8, #28]
   82016:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   8201a:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   8201e:	9707      	str	r7, [sp, #28]
   82020:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   82024:	ac1a      	add	r4, sp, #104	; 0x68
   82026:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8202a:	f02a 0a02 	bic.w	sl, sl, #2
   8202e:	2600      	movs	r6, #0
   82030:	4669      	mov	r1, sp
   82032:	9400      	str	r4, [sp, #0]
   82034:	9404      	str	r4, [sp, #16]
   82036:	9502      	str	r5, [sp, #8]
   82038:	9505      	str	r5, [sp, #20]
   8203a:	f8ad a00c 	strh.w	sl, [sp, #12]
   8203e:	f8ad 900e 	strh.w	r9, [sp, #14]
   82042:	9709      	str	r7, [sp, #36]	; 0x24
   82044:	9606      	str	r6, [sp, #24]
   82046:	4605      	mov	r5, r0
   82048:	f7ff f9b2 	bl	813b0 <_vfiprintf_r>
   8204c:	1e04      	subs	r4, r0, #0
   8204e:	db07      	blt.n	82060 <__sbprintf+0x5c>
   82050:	4628      	mov	r0, r5
   82052:	4669      	mov	r1, sp
   82054:	f000 f97e 	bl	82354 <_fflush_r>
   82058:	42b0      	cmp	r0, r6
   8205a:	bf18      	it	ne
   8205c:	f04f 34ff 	movne.w	r4, #4294967295
   82060:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82064:	065b      	lsls	r3, r3, #25
   82066:	d505      	bpl.n	82074 <__sbprintf+0x70>
   82068:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   8206c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82070:	f8a8 300c 	strh.w	r3, [r8, #12]
   82074:	4620      	mov	r0, r4
   82076:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   8207a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8207e:	bf00      	nop

00082080 <__swbuf_r>:
   82080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82082:	460d      	mov	r5, r1
   82084:	4614      	mov	r4, r2
   82086:	4607      	mov	r7, r0
   82088:	b110      	cbz	r0, 82090 <__swbuf_r+0x10>
   8208a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8208c:	2b00      	cmp	r3, #0
   8208e:	d048      	beq.n	82122 <__swbuf_r+0xa2>
   82090:	89a2      	ldrh	r2, [r4, #12]
   82092:	69a0      	ldr	r0, [r4, #24]
   82094:	b293      	uxth	r3, r2
   82096:	60a0      	str	r0, [r4, #8]
   82098:	0718      	lsls	r0, r3, #28
   8209a:	d538      	bpl.n	8210e <__swbuf_r+0x8e>
   8209c:	6926      	ldr	r6, [r4, #16]
   8209e:	2e00      	cmp	r6, #0
   820a0:	d035      	beq.n	8210e <__swbuf_r+0x8e>
   820a2:	0499      	lsls	r1, r3, #18
   820a4:	b2ed      	uxtb	r5, r5
   820a6:	d515      	bpl.n	820d4 <__swbuf_r+0x54>
   820a8:	6823      	ldr	r3, [r4, #0]
   820aa:	6962      	ldr	r2, [r4, #20]
   820ac:	1b9e      	subs	r6, r3, r6
   820ae:	4296      	cmp	r6, r2
   820b0:	da1c      	bge.n	820ec <__swbuf_r+0x6c>
   820b2:	3601      	adds	r6, #1
   820b4:	68a2      	ldr	r2, [r4, #8]
   820b6:	1c59      	adds	r1, r3, #1
   820b8:	3a01      	subs	r2, #1
   820ba:	60a2      	str	r2, [r4, #8]
   820bc:	6021      	str	r1, [r4, #0]
   820be:	701d      	strb	r5, [r3, #0]
   820c0:	6963      	ldr	r3, [r4, #20]
   820c2:	42b3      	cmp	r3, r6
   820c4:	d01a      	beq.n	820fc <__swbuf_r+0x7c>
   820c6:	89a3      	ldrh	r3, [r4, #12]
   820c8:	07db      	lsls	r3, r3, #31
   820ca:	d501      	bpl.n	820d0 <__swbuf_r+0x50>
   820cc:	2d0a      	cmp	r5, #10
   820ce:	d015      	beq.n	820fc <__swbuf_r+0x7c>
   820d0:	4628      	mov	r0, r5
   820d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   820d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   820d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   820da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   820de:	6663      	str	r3, [r4, #100]	; 0x64
   820e0:	6823      	ldr	r3, [r4, #0]
   820e2:	81a2      	strh	r2, [r4, #12]
   820e4:	6962      	ldr	r2, [r4, #20]
   820e6:	1b9e      	subs	r6, r3, r6
   820e8:	4296      	cmp	r6, r2
   820ea:	dbe2      	blt.n	820b2 <__swbuf_r+0x32>
   820ec:	4638      	mov	r0, r7
   820ee:	4621      	mov	r1, r4
   820f0:	f000 f930 	bl	82354 <_fflush_r>
   820f4:	b940      	cbnz	r0, 82108 <__swbuf_r+0x88>
   820f6:	6823      	ldr	r3, [r4, #0]
   820f8:	2601      	movs	r6, #1
   820fa:	e7db      	b.n	820b4 <__swbuf_r+0x34>
   820fc:	4638      	mov	r0, r7
   820fe:	4621      	mov	r1, r4
   82100:	f000 f928 	bl	82354 <_fflush_r>
   82104:	2800      	cmp	r0, #0
   82106:	d0e3      	beq.n	820d0 <__swbuf_r+0x50>
   82108:	f04f 30ff 	mov.w	r0, #4294967295
   8210c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8210e:	4638      	mov	r0, r7
   82110:	4621      	mov	r1, r4
   82112:	f000 f809 	bl	82128 <__swsetup_r>
   82116:	2800      	cmp	r0, #0
   82118:	d1f6      	bne.n	82108 <__swbuf_r+0x88>
   8211a:	89a2      	ldrh	r2, [r4, #12]
   8211c:	6926      	ldr	r6, [r4, #16]
   8211e:	b293      	uxth	r3, r2
   82120:	e7bf      	b.n	820a2 <__swbuf_r+0x22>
   82122:	f000 f933 	bl	8238c <__sinit>
   82126:	e7b3      	b.n	82090 <__swbuf_r+0x10>

00082128 <__swsetup_r>:
   82128:	4b2f      	ldr	r3, [pc, #188]	; (821e8 <__swsetup_r+0xc0>)
   8212a:	b570      	push	{r4, r5, r6, lr}
   8212c:	4606      	mov	r6, r0
   8212e:	6818      	ldr	r0, [r3, #0]
   82130:	460c      	mov	r4, r1
   82132:	b110      	cbz	r0, 8213a <__swsetup_r+0x12>
   82134:	6b82      	ldr	r2, [r0, #56]	; 0x38
   82136:	2a00      	cmp	r2, #0
   82138:	d036      	beq.n	821a8 <__swsetup_r+0x80>
   8213a:	89a5      	ldrh	r5, [r4, #12]
   8213c:	b2ab      	uxth	r3, r5
   8213e:	0719      	lsls	r1, r3, #28
   82140:	d50c      	bpl.n	8215c <__swsetup_r+0x34>
   82142:	6922      	ldr	r2, [r4, #16]
   82144:	b1aa      	cbz	r2, 82172 <__swsetup_r+0x4a>
   82146:	f013 0101 	ands.w	r1, r3, #1
   8214a:	d01e      	beq.n	8218a <__swsetup_r+0x62>
   8214c:	6963      	ldr	r3, [r4, #20]
   8214e:	2100      	movs	r1, #0
   82150:	425b      	negs	r3, r3
   82152:	61a3      	str	r3, [r4, #24]
   82154:	60a1      	str	r1, [r4, #8]
   82156:	b1f2      	cbz	r2, 82196 <__swsetup_r+0x6e>
   82158:	2000      	movs	r0, #0
   8215a:	bd70      	pop	{r4, r5, r6, pc}
   8215c:	06da      	lsls	r2, r3, #27
   8215e:	d53a      	bpl.n	821d6 <__swsetup_r+0xae>
   82160:	075b      	lsls	r3, r3, #29
   82162:	d424      	bmi.n	821ae <__swsetup_r+0x86>
   82164:	6922      	ldr	r2, [r4, #16]
   82166:	f045 0308 	orr.w	r3, r5, #8
   8216a:	81a3      	strh	r3, [r4, #12]
   8216c:	b29b      	uxth	r3, r3
   8216e:	2a00      	cmp	r2, #0
   82170:	d1e9      	bne.n	82146 <__swsetup_r+0x1e>
   82172:	f403 7120 	and.w	r1, r3, #640	; 0x280
   82176:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8217a:	d0e4      	beq.n	82146 <__swsetup_r+0x1e>
   8217c:	4630      	mov	r0, r6
   8217e:	4621      	mov	r1, r4
   82180:	f000 fcce 	bl	82b20 <__smakebuf_r>
   82184:	89a3      	ldrh	r3, [r4, #12]
   82186:	6922      	ldr	r2, [r4, #16]
   82188:	e7dd      	b.n	82146 <__swsetup_r+0x1e>
   8218a:	0798      	lsls	r0, r3, #30
   8218c:	bf58      	it	pl
   8218e:	6961      	ldrpl	r1, [r4, #20]
   82190:	60a1      	str	r1, [r4, #8]
   82192:	2a00      	cmp	r2, #0
   82194:	d1e0      	bne.n	82158 <__swsetup_r+0x30>
   82196:	89a3      	ldrh	r3, [r4, #12]
   82198:	061a      	lsls	r2, r3, #24
   8219a:	d5dd      	bpl.n	82158 <__swsetup_r+0x30>
   8219c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   821a0:	81a3      	strh	r3, [r4, #12]
   821a2:	f04f 30ff 	mov.w	r0, #4294967295
   821a6:	bd70      	pop	{r4, r5, r6, pc}
   821a8:	f000 f8f0 	bl	8238c <__sinit>
   821ac:	e7c5      	b.n	8213a <__swsetup_r+0x12>
   821ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
   821b0:	b149      	cbz	r1, 821c6 <__swsetup_r+0x9e>
   821b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   821b6:	4299      	cmp	r1, r3
   821b8:	d003      	beq.n	821c2 <__swsetup_r+0x9a>
   821ba:	4630      	mov	r0, r6
   821bc:	f000 fa2a 	bl	82614 <_free_r>
   821c0:	89a5      	ldrh	r5, [r4, #12]
   821c2:	2300      	movs	r3, #0
   821c4:	6323      	str	r3, [r4, #48]	; 0x30
   821c6:	6922      	ldr	r2, [r4, #16]
   821c8:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   821cc:	2100      	movs	r1, #0
   821ce:	b2ad      	uxth	r5, r5
   821d0:	6022      	str	r2, [r4, #0]
   821d2:	6061      	str	r1, [r4, #4]
   821d4:	e7c7      	b.n	82166 <__swsetup_r+0x3e>
   821d6:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   821da:	2309      	movs	r3, #9
   821dc:	6033      	str	r3, [r6, #0]
   821de:	f04f 30ff 	mov.w	r0, #4294967295
   821e2:	81a5      	strh	r5, [r4, #12]
   821e4:	bd70      	pop	{r4, r5, r6, pc}
   821e6:	bf00      	nop
   821e8:	20070558 	.word	0x20070558

000821ec <register_fini>:
   821ec:	4b02      	ldr	r3, [pc, #8]	; (821f8 <register_fini+0xc>)
   821ee:	b113      	cbz	r3, 821f6 <register_fini+0xa>
   821f0:	4802      	ldr	r0, [pc, #8]	; (821fc <register_fini+0x10>)
   821f2:	f000 b805 	b.w	82200 <atexit>
   821f6:	4770      	bx	lr
   821f8:	00000000 	.word	0x00000000
   821fc:	00082489 	.word	0x00082489

00082200 <atexit>:
   82200:	4601      	mov	r1, r0
   82202:	2000      	movs	r0, #0
   82204:	4602      	mov	r2, r0
   82206:	4603      	mov	r3, r0
   82208:	f001 bb76 	b.w	838f8 <__register_exitproc>

0008220c <__sflush_r>:
   8220c:	898b      	ldrh	r3, [r1, #12]
   8220e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82212:	b29a      	uxth	r2, r3
   82214:	460d      	mov	r5, r1
   82216:	0711      	lsls	r1, r2, #28
   82218:	4680      	mov	r8, r0
   8221a:	d43c      	bmi.n	82296 <__sflush_r+0x8a>
   8221c:	686a      	ldr	r2, [r5, #4]
   8221e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82222:	2a00      	cmp	r2, #0
   82224:	81ab      	strh	r3, [r5, #12]
   82226:	dd59      	ble.n	822dc <__sflush_r+0xd0>
   82228:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8222a:	2c00      	cmp	r4, #0
   8222c:	d04b      	beq.n	822c6 <__sflush_r+0xba>
   8222e:	b29b      	uxth	r3, r3
   82230:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   82234:	2100      	movs	r1, #0
   82236:	b292      	uxth	r2, r2
   82238:	f8d8 6000 	ldr.w	r6, [r8]
   8223c:	f8c8 1000 	str.w	r1, [r8]
   82240:	2a00      	cmp	r2, #0
   82242:	d04f      	beq.n	822e4 <__sflush_r+0xd8>
   82244:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82246:	075f      	lsls	r7, r3, #29
   82248:	d505      	bpl.n	82256 <__sflush_r+0x4a>
   8224a:	6869      	ldr	r1, [r5, #4]
   8224c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8224e:	1a52      	subs	r2, r2, r1
   82250:	b10b      	cbz	r3, 82256 <__sflush_r+0x4a>
   82252:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82254:	1ad2      	subs	r2, r2, r3
   82256:	4640      	mov	r0, r8
   82258:	69e9      	ldr	r1, [r5, #28]
   8225a:	2300      	movs	r3, #0
   8225c:	47a0      	blx	r4
   8225e:	1c44      	adds	r4, r0, #1
   82260:	d04a      	beq.n	822f8 <__sflush_r+0xec>
   82262:	89ab      	ldrh	r3, [r5, #12]
   82264:	692a      	ldr	r2, [r5, #16]
   82266:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8226a:	b29b      	uxth	r3, r3
   8226c:	2100      	movs	r1, #0
   8226e:	602a      	str	r2, [r5, #0]
   82270:	04da      	lsls	r2, r3, #19
   82272:	81ab      	strh	r3, [r5, #12]
   82274:	6069      	str	r1, [r5, #4]
   82276:	d44c      	bmi.n	82312 <__sflush_r+0x106>
   82278:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8227a:	f8c8 6000 	str.w	r6, [r8]
   8227e:	b311      	cbz	r1, 822c6 <__sflush_r+0xba>
   82280:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82284:	4299      	cmp	r1, r3
   82286:	d002      	beq.n	8228e <__sflush_r+0x82>
   82288:	4640      	mov	r0, r8
   8228a:	f000 f9c3 	bl	82614 <_free_r>
   8228e:	2000      	movs	r0, #0
   82290:	6328      	str	r0, [r5, #48]	; 0x30
   82292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82296:	692e      	ldr	r6, [r5, #16]
   82298:	b1ae      	cbz	r6, 822c6 <__sflush_r+0xba>
   8229a:	0791      	lsls	r1, r2, #30
   8229c:	682c      	ldr	r4, [r5, #0]
   8229e:	bf0c      	ite	eq
   822a0:	696b      	ldreq	r3, [r5, #20]
   822a2:	2300      	movne	r3, #0
   822a4:	602e      	str	r6, [r5, #0]
   822a6:	1ba4      	subs	r4, r4, r6
   822a8:	60ab      	str	r3, [r5, #8]
   822aa:	e00a      	b.n	822c2 <__sflush_r+0xb6>
   822ac:	4632      	mov	r2, r6
   822ae:	4623      	mov	r3, r4
   822b0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   822b2:	4640      	mov	r0, r8
   822b4:	69e9      	ldr	r1, [r5, #28]
   822b6:	47b8      	blx	r7
   822b8:	2800      	cmp	r0, #0
   822ba:	ebc0 0404 	rsb	r4, r0, r4
   822be:	4406      	add	r6, r0
   822c0:	dd04      	ble.n	822cc <__sflush_r+0xc0>
   822c2:	2c00      	cmp	r4, #0
   822c4:	dcf2      	bgt.n	822ac <__sflush_r+0xa0>
   822c6:	2000      	movs	r0, #0
   822c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   822cc:	89ab      	ldrh	r3, [r5, #12]
   822ce:	f04f 30ff 	mov.w	r0, #4294967295
   822d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   822d6:	81ab      	strh	r3, [r5, #12]
   822d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   822dc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   822de:	2a00      	cmp	r2, #0
   822e0:	dca2      	bgt.n	82228 <__sflush_r+0x1c>
   822e2:	e7f0      	b.n	822c6 <__sflush_r+0xba>
   822e4:	2301      	movs	r3, #1
   822e6:	4640      	mov	r0, r8
   822e8:	69e9      	ldr	r1, [r5, #28]
   822ea:	47a0      	blx	r4
   822ec:	1c43      	adds	r3, r0, #1
   822ee:	4602      	mov	r2, r0
   822f0:	d01e      	beq.n	82330 <__sflush_r+0x124>
   822f2:	89ab      	ldrh	r3, [r5, #12]
   822f4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   822f6:	e7a6      	b.n	82246 <__sflush_r+0x3a>
   822f8:	f8d8 3000 	ldr.w	r3, [r8]
   822fc:	b95b      	cbnz	r3, 82316 <__sflush_r+0x10a>
   822fe:	89aa      	ldrh	r2, [r5, #12]
   82300:	6929      	ldr	r1, [r5, #16]
   82302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82306:	b292      	uxth	r2, r2
   82308:	606b      	str	r3, [r5, #4]
   8230a:	04d3      	lsls	r3, r2, #19
   8230c:	81aa      	strh	r2, [r5, #12]
   8230e:	6029      	str	r1, [r5, #0]
   82310:	d5b2      	bpl.n	82278 <__sflush_r+0x6c>
   82312:	6528      	str	r0, [r5, #80]	; 0x50
   82314:	e7b0      	b.n	82278 <__sflush_r+0x6c>
   82316:	2b1d      	cmp	r3, #29
   82318:	d001      	beq.n	8231e <__sflush_r+0x112>
   8231a:	2b16      	cmp	r3, #22
   8231c:	d113      	bne.n	82346 <__sflush_r+0x13a>
   8231e:	89a9      	ldrh	r1, [r5, #12]
   82320:	692b      	ldr	r3, [r5, #16]
   82322:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   82326:	2200      	movs	r2, #0
   82328:	81a9      	strh	r1, [r5, #12]
   8232a:	602b      	str	r3, [r5, #0]
   8232c:	606a      	str	r2, [r5, #4]
   8232e:	e7a3      	b.n	82278 <__sflush_r+0x6c>
   82330:	f8d8 3000 	ldr.w	r3, [r8]
   82334:	2b00      	cmp	r3, #0
   82336:	d0dc      	beq.n	822f2 <__sflush_r+0xe6>
   82338:	2b1d      	cmp	r3, #29
   8233a:	d001      	beq.n	82340 <__sflush_r+0x134>
   8233c:	2b16      	cmp	r3, #22
   8233e:	d1c5      	bne.n	822cc <__sflush_r+0xc0>
   82340:	f8c8 6000 	str.w	r6, [r8]
   82344:	e7bf      	b.n	822c6 <__sflush_r+0xba>
   82346:	89ab      	ldrh	r3, [r5, #12]
   82348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8234c:	81ab      	strh	r3, [r5, #12]
   8234e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82352:	bf00      	nop

00082354 <_fflush_r>:
   82354:	b510      	push	{r4, lr}
   82356:	4604      	mov	r4, r0
   82358:	b082      	sub	sp, #8
   8235a:	b108      	cbz	r0, 82360 <_fflush_r+0xc>
   8235c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8235e:	b153      	cbz	r3, 82376 <_fflush_r+0x22>
   82360:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82364:	b908      	cbnz	r0, 8236a <_fflush_r+0x16>
   82366:	b002      	add	sp, #8
   82368:	bd10      	pop	{r4, pc}
   8236a:	4620      	mov	r0, r4
   8236c:	b002      	add	sp, #8
   8236e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82372:	f7ff bf4b 	b.w	8220c <__sflush_r>
   82376:	9101      	str	r1, [sp, #4]
   82378:	f000 f808 	bl	8238c <__sinit>
   8237c:	9901      	ldr	r1, [sp, #4]
   8237e:	e7ef      	b.n	82360 <_fflush_r+0xc>

00082380 <_cleanup_r>:
   82380:	4901      	ldr	r1, [pc, #4]	; (82388 <_cleanup_r+0x8>)
   82382:	f000 bb9f 	b.w	82ac4 <_fwalk>
   82386:	bf00      	nop
   82388:	00083a45 	.word	0x00083a45

0008238c <__sinit>:
   8238c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82390:	6b84      	ldr	r4, [r0, #56]	; 0x38
   82392:	b083      	sub	sp, #12
   82394:	4607      	mov	r7, r0
   82396:	2c00      	cmp	r4, #0
   82398:	d165      	bne.n	82466 <__sinit+0xda>
   8239a:	687d      	ldr	r5, [r7, #4]
   8239c:	4833      	ldr	r0, [pc, #204]	; (8246c <__sinit+0xe0>)
   8239e:	2304      	movs	r3, #4
   823a0:	2103      	movs	r1, #3
   823a2:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   823a6:	63f8      	str	r0, [r7, #60]	; 0x3c
   823a8:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   823ac:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   823b0:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   823b4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   823b8:	81ab      	strh	r3, [r5, #12]
   823ba:	602c      	str	r4, [r5, #0]
   823bc:	606c      	str	r4, [r5, #4]
   823be:	60ac      	str	r4, [r5, #8]
   823c0:	666c      	str	r4, [r5, #100]	; 0x64
   823c2:	81ec      	strh	r4, [r5, #14]
   823c4:	612c      	str	r4, [r5, #16]
   823c6:	616c      	str	r4, [r5, #20]
   823c8:	61ac      	str	r4, [r5, #24]
   823ca:	4621      	mov	r1, r4
   823cc:	2208      	movs	r2, #8
   823ce:	f7fe fee1 	bl	81194 <memset>
   823d2:	f8df b09c 	ldr.w	fp, [pc, #156]	; 82470 <__sinit+0xe4>
   823d6:	68be      	ldr	r6, [r7, #8]
   823d8:	f8df a098 	ldr.w	sl, [pc, #152]	; 82474 <__sinit+0xe8>
   823dc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 82478 <__sinit+0xec>
   823e0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8247c <__sinit+0xf0>
   823e4:	2301      	movs	r3, #1
   823e6:	2209      	movs	r2, #9
   823e8:	61ed      	str	r5, [r5, #28]
   823ea:	f8c5 b020 	str.w	fp, [r5, #32]
   823ee:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   823f2:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   823f6:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   823fa:	4621      	mov	r1, r4
   823fc:	81f3      	strh	r3, [r6, #14]
   823fe:	81b2      	strh	r2, [r6, #12]
   82400:	6034      	str	r4, [r6, #0]
   82402:	6074      	str	r4, [r6, #4]
   82404:	60b4      	str	r4, [r6, #8]
   82406:	6674      	str	r4, [r6, #100]	; 0x64
   82408:	6134      	str	r4, [r6, #16]
   8240a:	6174      	str	r4, [r6, #20]
   8240c:	61b4      	str	r4, [r6, #24]
   8240e:	2208      	movs	r2, #8
   82410:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82414:	9301      	str	r3, [sp, #4]
   82416:	f7fe febd 	bl	81194 <memset>
   8241a:	68fd      	ldr	r5, [r7, #12]
   8241c:	2012      	movs	r0, #18
   8241e:	2202      	movs	r2, #2
   82420:	61f6      	str	r6, [r6, #28]
   82422:	f8c6 b020 	str.w	fp, [r6, #32]
   82426:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8242a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8242e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82432:	4621      	mov	r1, r4
   82434:	81a8      	strh	r0, [r5, #12]
   82436:	81ea      	strh	r2, [r5, #14]
   82438:	602c      	str	r4, [r5, #0]
   8243a:	606c      	str	r4, [r5, #4]
   8243c:	60ac      	str	r4, [r5, #8]
   8243e:	666c      	str	r4, [r5, #100]	; 0x64
   82440:	612c      	str	r4, [r5, #16]
   82442:	616c      	str	r4, [r5, #20]
   82444:	61ac      	str	r4, [r5, #24]
   82446:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8244a:	2208      	movs	r2, #8
   8244c:	f7fe fea2 	bl	81194 <memset>
   82450:	9b01      	ldr	r3, [sp, #4]
   82452:	61ed      	str	r5, [r5, #28]
   82454:	f8c5 b020 	str.w	fp, [r5, #32]
   82458:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8245c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82460:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82464:	63bb      	str	r3, [r7, #56]	; 0x38
   82466:	b003      	add	sp, #12
   82468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8246c:	00082381 	.word	0x00082381
   82470:	00083781 	.word	0x00083781
   82474:	000837a5 	.word	0x000837a5
   82478:	000837dd 	.word	0x000837dd
   8247c:	000837fd 	.word	0x000837fd

00082480 <__sfp_lock_acquire>:
   82480:	4770      	bx	lr
   82482:	bf00      	nop

00082484 <__sfp_lock_release>:
   82484:	4770      	bx	lr
   82486:	bf00      	nop

00082488 <__libc_fini_array>:
   82488:	b538      	push	{r3, r4, r5, lr}
   8248a:	4d09      	ldr	r5, [pc, #36]	; (824b0 <__libc_fini_array+0x28>)
   8248c:	4c09      	ldr	r4, [pc, #36]	; (824b4 <__libc_fini_array+0x2c>)
   8248e:	1b64      	subs	r4, r4, r5
   82490:	10a4      	asrs	r4, r4, #2
   82492:	bf18      	it	ne
   82494:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82498:	d005      	beq.n	824a6 <__libc_fini_array+0x1e>
   8249a:	3c01      	subs	r4, #1
   8249c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   824a0:	4798      	blx	r3
   824a2:	2c00      	cmp	r4, #0
   824a4:	d1f9      	bne.n	8249a <__libc_fini_array+0x12>
   824a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   824aa:	f001 bb67 	b.w	83b7c <_fini>
   824ae:	bf00      	nop
   824b0:	00083b88 	.word	0x00083b88
   824b4:	00083b8c 	.word	0x00083b8c

000824b8 <_fputwc_r>:
   824b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   824bc:	8993      	ldrh	r3, [r2, #12]
   824be:	460f      	mov	r7, r1
   824c0:	0499      	lsls	r1, r3, #18
   824c2:	b082      	sub	sp, #8
   824c4:	4614      	mov	r4, r2
   824c6:	4680      	mov	r8, r0
   824c8:	d406      	bmi.n	824d8 <_fputwc_r+0x20>
   824ca:	6e52      	ldr	r2, [r2, #100]	; 0x64
   824cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   824d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   824d4:	81a3      	strh	r3, [r4, #12]
   824d6:	6662      	str	r2, [r4, #100]	; 0x64
   824d8:	f000 fb1c 	bl	82b14 <__locale_mb_cur_max>
   824dc:	2801      	cmp	r0, #1
   824de:	d03e      	beq.n	8255e <_fputwc_r+0xa6>
   824e0:	463a      	mov	r2, r7
   824e2:	4640      	mov	r0, r8
   824e4:	a901      	add	r1, sp, #4
   824e6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   824ea:	f001 f9bb 	bl	83864 <_wcrtomb_r>
   824ee:	1c42      	adds	r2, r0, #1
   824f0:	4606      	mov	r6, r0
   824f2:	d02d      	beq.n	82550 <_fputwc_r+0x98>
   824f4:	2800      	cmp	r0, #0
   824f6:	d03a      	beq.n	8256e <_fputwc_r+0xb6>
   824f8:	f89d 1004 	ldrb.w	r1, [sp, #4]
   824fc:	2500      	movs	r5, #0
   824fe:	e009      	b.n	82514 <_fputwc_r+0x5c>
   82500:	6823      	ldr	r3, [r4, #0]
   82502:	7019      	strb	r1, [r3, #0]
   82504:	6823      	ldr	r3, [r4, #0]
   82506:	3301      	adds	r3, #1
   82508:	6023      	str	r3, [r4, #0]
   8250a:	3501      	adds	r5, #1
   8250c:	42b5      	cmp	r5, r6
   8250e:	d22e      	bcs.n	8256e <_fputwc_r+0xb6>
   82510:	ab01      	add	r3, sp, #4
   82512:	5ce9      	ldrb	r1, [r5, r3]
   82514:	68a3      	ldr	r3, [r4, #8]
   82516:	3b01      	subs	r3, #1
   82518:	2b00      	cmp	r3, #0
   8251a:	60a3      	str	r3, [r4, #8]
   8251c:	daf0      	bge.n	82500 <_fputwc_r+0x48>
   8251e:	69a2      	ldr	r2, [r4, #24]
   82520:	4293      	cmp	r3, r2
   82522:	db06      	blt.n	82532 <_fputwc_r+0x7a>
   82524:	6823      	ldr	r3, [r4, #0]
   82526:	7019      	strb	r1, [r3, #0]
   82528:	6823      	ldr	r3, [r4, #0]
   8252a:	7819      	ldrb	r1, [r3, #0]
   8252c:	3301      	adds	r3, #1
   8252e:	290a      	cmp	r1, #10
   82530:	d1ea      	bne.n	82508 <_fputwc_r+0x50>
   82532:	4640      	mov	r0, r8
   82534:	4622      	mov	r2, r4
   82536:	f7ff fda3 	bl	82080 <__swbuf_r>
   8253a:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   8253e:	4258      	negs	r0, r3
   82540:	4158      	adcs	r0, r3
   82542:	2800      	cmp	r0, #0
   82544:	d0e1      	beq.n	8250a <_fputwc_r+0x52>
   82546:	f04f 30ff 	mov.w	r0, #4294967295
   8254a:	b002      	add	sp, #8
   8254c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82550:	89a3      	ldrh	r3, [r4, #12]
   82552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82556:	81a3      	strh	r3, [r4, #12]
   82558:	b002      	add	sp, #8
   8255a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8255e:	1e7b      	subs	r3, r7, #1
   82560:	2bfe      	cmp	r3, #254	; 0xfe
   82562:	d8bd      	bhi.n	824e0 <_fputwc_r+0x28>
   82564:	b2f9      	uxtb	r1, r7
   82566:	4606      	mov	r6, r0
   82568:	f88d 1004 	strb.w	r1, [sp, #4]
   8256c:	e7c6      	b.n	824fc <_fputwc_r+0x44>
   8256e:	4638      	mov	r0, r7
   82570:	b002      	add	sp, #8
   82572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82576:	bf00      	nop

00082578 <_malloc_trim_r>:
   82578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8257a:	4d23      	ldr	r5, [pc, #140]	; (82608 <_malloc_trim_r+0x90>)
   8257c:	460f      	mov	r7, r1
   8257e:	4604      	mov	r4, r0
   82580:	f000 ff08 	bl	83394 <__malloc_lock>
   82584:	68ab      	ldr	r3, [r5, #8]
   82586:	685e      	ldr	r6, [r3, #4]
   82588:	f026 0603 	bic.w	r6, r6, #3
   8258c:	1bf1      	subs	r1, r6, r7
   8258e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82592:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82596:	f021 010f 	bic.w	r1, r1, #15
   8259a:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   8259e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   825a2:	db07      	blt.n	825b4 <_malloc_trim_r+0x3c>
   825a4:	4620      	mov	r0, r4
   825a6:	2100      	movs	r1, #0
   825a8:	f001 f8d8 	bl	8375c <_sbrk_r>
   825ac:	68ab      	ldr	r3, [r5, #8]
   825ae:	4433      	add	r3, r6
   825b0:	4298      	cmp	r0, r3
   825b2:	d004      	beq.n	825be <_malloc_trim_r+0x46>
   825b4:	4620      	mov	r0, r4
   825b6:	f000 feef 	bl	83398 <__malloc_unlock>
   825ba:	2000      	movs	r0, #0
   825bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   825be:	4620      	mov	r0, r4
   825c0:	4279      	negs	r1, r7
   825c2:	f001 f8cb 	bl	8375c <_sbrk_r>
   825c6:	3001      	adds	r0, #1
   825c8:	d00d      	beq.n	825e6 <_malloc_trim_r+0x6e>
   825ca:	4b10      	ldr	r3, [pc, #64]	; (8260c <_malloc_trim_r+0x94>)
   825cc:	68aa      	ldr	r2, [r5, #8]
   825ce:	6819      	ldr	r1, [r3, #0]
   825d0:	1bf6      	subs	r6, r6, r7
   825d2:	f046 0601 	orr.w	r6, r6, #1
   825d6:	4620      	mov	r0, r4
   825d8:	1bc9      	subs	r1, r1, r7
   825da:	6056      	str	r6, [r2, #4]
   825dc:	6019      	str	r1, [r3, #0]
   825de:	f000 fedb 	bl	83398 <__malloc_unlock>
   825e2:	2001      	movs	r0, #1
   825e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   825e6:	4620      	mov	r0, r4
   825e8:	2100      	movs	r1, #0
   825ea:	f001 f8b7 	bl	8375c <_sbrk_r>
   825ee:	68ab      	ldr	r3, [r5, #8]
   825f0:	1ac2      	subs	r2, r0, r3
   825f2:	2a0f      	cmp	r2, #15
   825f4:	ddde      	ble.n	825b4 <_malloc_trim_r+0x3c>
   825f6:	4d06      	ldr	r5, [pc, #24]	; (82610 <_malloc_trim_r+0x98>)
   825f8:	4904      	ldr	r1, [pc, #16]	; (8260c <_malloc_trim_r+0x94>)
   825fa:	682d      	ldr	r5, [r5, #0]
   825fc:	f042 0201 	orr.w	r2, r2, #1
   82600:	1b40      	subs	r0, r0, r5
   82602:	605a      	str	r2, [r3, #4]
   82604:	6008      	str	r0, [r1, #0]
   82606:	e7d5      	b.n	825b4 <_malloc_trim_r+0x3c>
   82608:	20070580 	.word	0x20070580
   8260c:	20070a30 	.word	0x20070a30
   82610:	2007098c 	.word	0x2007098c

00082614 <_free_r>:
   82614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82618:	460d      	mov	r5, r1
   8261a:	4606      	mov	r6, r0
   8261c:	2900      	cmp	r1, #0
   8261e:	d055      	beq.n	826cc <_free_r+0xb8>
   82620:	f000 feb8 	bl	83394 <__malloc_lock>
   82624:	f855 1c04 	ldr.w	r1, [r5, #-4]
   82628:	f8df c170 	ldr.w	ip, [pc, #368]	; 8279c <_free_r+0x188>
   8262c:	f1a5 0408 	sub.w	r4, r5, #8
   82630:	f021 0301 	bic.w	r3, r1, #1
   82634:	18e2      	adds	r2, r4, r3
   82636:	f8dc 0008 	ldr.w	r0, [ip, #8]
   8263a:	6857      	ldr	r7, [r2, #4]
   8263c:	4290      	cmp	r0, r2
   8263e:	f027 0703 	bic.w	r7, r7, #3
   82642:	d068      	beq.n	82716 <_free_r+0x102>
   82644:	f011 0101 	ands.w	r1, r1, #1
   82648:	6057      	str	r7, [r2, #4]
   8264a:	d032      	beq.n	826b2 <_free_r+0x9e>
   8264c:	2100      	movs	r1, #0
   8264e:	19d0      	adds	r0, r2, r7
   82650:	6840      	ldr	r0, [r0, #4]
   82652:	07c0      	lsls	r0, r0, #31
   82654:	d406      	bmi.n	82664 <_free_r+0x50>
   82656:	443b      	add	r3, r7
   82658:	6890      	ldr	r0, [r2, #8]
   8265a:	2900      	cmp	r1, #0
   8265c:	d04d      	beq.n	826fa <_free_r+0xe6>
   8265e:	68d2      	ldr	r2, [r2, #12]
   82660:	60c2      	str	r2, [r0, #12]
   82662:	6090      	str	r0, [r2, #8]
   82664:	f043 0201 	orr.w	r2, r3, #1
   82668:	6062      	str	r2, [r4, #4]
   8266a:	50e3      	str	r3, [r4, r3]
   8266c:	b9e1      	cbnz	r1, 826a8 <_free_r+0x94>
   8266e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82672:	d32d      	bcc.n	826d0 <_free_r+0xbc>
   82674:	0a5a      	lsrs	r2, r3, #9
   82676:	2a04      	cmp	r2, #4
   82678:	d869      	bhi.n	8274e <_free_r+0x13a>
   8267a:	0998      	lsrs	r0, r3, #6
   8267c:	3038      	adds	r0, #56	; 0x38
   8267e:	0041      	lsls	r1, r0, #1
   82680:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82684:	f8dc 2008 	ldr.w	r2, [ip, #8]
   82688:	4944      	ldr	r1, [pc, #272]	; (8279c <_free_r+0x188>)
   8268a:	4562      	cmp	r2, ip
   8268c:	d065      	beq.n	8275a <_free_r+0x146>
   8268e:	6851      	ldr	r1, [r2, #4]
   82690:	f021 0103 	bic.w	r1, r1, #3
   82694:	428b      	cmp	r3, r1
   82696:	d202      	bcs.n	8269e <_free_r+0x8a>
   82698:	6892      	ldr	r2, [r2, #8]
   8269a:	4594      	cmp	ip, r2
   8269c:	d1f7      	bne.n	8268e <_free_r+0x7a>
   8269e:	68d3      	ldr	r3, [r2, #12]
   826a0:	60e3      	str	r3, [r4, #12]
   826a2:	60a2      	str	r2, [r4, #8]
   826a4:	609c      	str	r4, [r3, #8]
   826a6:	60d4      	str	r4, [r2, #12]
   826a8:	4630      	mov	r0, r6
   826aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   826ae:	f000 be73 	b.w	83398 <__malloc_unlock>
   826b2:	f855 5c08 	ldr.w	r5, [r5, #-8]
   826b6:	f10c 0808 	add.w	r8, ip, #8
   826ba:	1b64      	subs	r4, r4, r5
   826bc:	68a0      	ldr	r0, [r4, #8]
   826be:	442b      	add	r3, r5
   826c0:	4540      	cmp	r0, r8
   826c2:	d042      	beq.n	8274a <_free_r+0x136>
   826c4:	68e5      	ldr	r5, [r4, #12]
   826c6:	60c5      	str	r5, [r0, #12]
   826c8:	60a8      	str	r0, [r5, #8]
   826ca:	e7c0      	b.n	8264e <_free_r+0x3a>
   826cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   826d0:	08db      	lsrs	r3, r3, #3
   826d2:	109a      	asrs	r2, r3, #2
   826d4:	2001      	movs	r0, #1
   826d6:	4090      	lsls	r0, r2
   826d8:	f8dc 1004 	ldr.w	r1, [ip, #4]
   826dc:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   826e0:	689a      	ldr	r2, [r3, #8]
   826e2:	4301      	orrs	r1, r0
   826e4:	60a2      	str	r2, [r4, #8]
   826e6:	60e3      	str	r3, [r4, #12]
   826e8:	f8cc 1004 	str.w	r1, [ip, #4]
   826ec:	4630      	mov	r0, r6
   826ee:	609c      	str	r4, [r3, #8]
   826f0:	60d4      	str	r4, [r2, #12]
   826f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   826f6:	f000 be4f 	b.w	83398 <__malloc_unlock>
   826fa:	4d29      	ldr	r5, [pc, #164]	; (827a0 <_free_r+0x18c>)
   826fc:	42a8      	cmp	r0, r5
   826fe:	d1ae      	bne.n	8265e <_free_r+0x4a>
   82700:	f043 0201 	orr.w	r2, r3, #1
   82704:	f8cc 4014 	str.w	r4, [ip, #20]
   82708:	f8cc 4010 	str.w	r4, [ip, #16]
   8270c:	60e0      	str	r0, [r4, #12]
   8270e:	60a0      	str	r0, [r4, #8]
   82710:	6062      	str	r2, [r4, #4]
   82712:	50e3      	str	r3, [r4, r3]
   82714:	e7c8      	b.n	826a8 <_free_r+0x94>
   82716:	441f      	add	r7, r3
   82718:	07cb      	lsls	r3, r1, #31
   8271a:	d407      	bmi.n	8272c <_free_r+0x118>
   8271c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   82720:	1a64      	subs	r4, r4, r1
   82722:	68e3      	ldr	r3, [r4, #12]
   82724:	68a2      	ldr	r2, [r4, #8]
   82726:	440f      	add	r7, r1
   82728:	60d3      	str	r3, [r2, #12]
   8272a:	609a      	str	r2, [r3, #8]
   8272c:	4b1d      	ldr	r3, [pc, #116]	; (827a4 <_free_r+0x190>)
   8272e:	f047 0201 	orr.w	r2, r7, #1
   82732:	681b      	ldr	r3, [r3, #0]
   82734:	6062      	str	r2, [r4, #4]
   82736:	429f      	cmp	r7, r3
   82738:	f8cc 4008 	str.w	r4, [ip, #8]
   8273c:	d3b4      	bcc.n	826a8 <_free_r+0x94>
   8273e:	4b1a      	ldr	r3, [pc, #104]	; (827a8 <_free_r+0x194>)
   82740:	4630      	mov	r0, r6
   82742:	6819      	ldr	r1, [r3, #0]
   82744:	f7ff ff18 	bl	82578 <_malloc_trim_r>
   82748:	e7ae      	b.n	826a8 <_free_r+0x94>
   8274a:	2101      	movs	r1, #1
   8274c:	e77f      	b.n	8264e <_free_r+0x3a>
   8274e:	2a14      	cmp	r2, #20
   82750:	d80b      	bhi.n	8276a <_free_r+0x156>
   82752:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   82756:	0041      	lsls	r1, r0, #1
   82758:	e792      	b.n	82680 <_free_r+0x6c>
   8275a:	1080      	asrs	r0, r0, #2
   8275c:	2501      	movs	r5, #1
   8275e:	4085      	lsls	r5, r0
   82760:	6848      	ldr	r0, [r1, #4]
   82762:	4613      	mov	r3, r2
   82764:	4328      	orrs	r0, r5
   82766:	6048      	str	r0, [r1, #4]
   82768:	e79a      	b.n	826a0 <_free_r+0x8c>
   8276a:	2a54      	cmp	r2, #84	; 0x54
   8276c:	d803      	bhi.n	82776 <_free_r+0x162>
   8276e:	0b18      	lsrs	r0, r3, #12
   82770:	306e      	adds	r0, #110	; 0x6e
   82772:	0041      	lsls	r1, r0, #1
   82774:	e784      	b.n	82680 <_free_r+0x6c>
   82776:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8277a:	d803      	bhi.n	82784 <_free_r+0x170>
   8277c:	0bd8      	lsrs	r0, r3, #15
   8277e:	3077      	adds	r0, #119	; 0x77
   82780:	0041      	lsls	r1, r0, #1
   82782:	e77d      	b.n	82680 <_free_r+0x6c>
   82784:	f240 5154 	movw	r1, #1364	; 0x554
   82788:	428a      	cmp	r2, r1
   8278a:	d803      	bhi.n	82794 <_free_r+0x180>
   8278c:	0c98      	lsrs	r0, r3, #18
   8278e:	307c      	adds	r0, #124	; 0x7c
   82790:	0041      	lsls	r1, r0, #1
   82792:	e775      	b.n	82680 <_free_r+0x6c>
   82794:	21fc      	movs	r1, #252	; 0xfc
   82796:	207e      	movs	r0, #126	; 0x7e
   82798:	e772      	b.n	82680 <_free_r+0x6c>
   8279a:	bf00      	nop
   8279c:	20070580 	.word	0x20070580
   827a0:	20070588 	.word	0x20070588
   827a4:	20070988 	.word	0x20070988
   827a8:	20070a2c 	.word	0x20070a2c

000827ac <__sfvwrite_r>:
   827ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   827b0:	6893      	ldr	r3, [r2, #8]
   827b2:	b083      	sub	sp, #12
   827b4:	4616      	mov	r6, r2
   827b6:	4681      	mov	r9, r0
   827b8:	460c      	mov	r4, r1
   827ba:	b32b      	cbz	r3, 82808 <__sfvwrite_r+0x5c>
   827bc:	898b      	ldrh	r3, [r1, #12]
   827be:	0719      	lsls	r1, r3, #28
   827c0:	d526      	bpl.n	82810 <__sfvwrite_r+0x64>
   827c2:	6922      	ldr	r2, [r4, #16]
   827c4:	b322      	cbz	r2, 82810 <__sfvwrite_r+0x64>
   827c6:	f003 0202 	and.w	r2, r3, #2
   827ca:	b292      	uxth	r2, r2
   827cc:	6835      	ldr	r5, [r6, #0]
   827ce:	2a00      	cmp	r2, #0
   827d0:	d02c      	beq.n	8282c <__sfvwrite_r+0x80>
   827d2:	f04f 0a00 	mov.w	sl, #0
   827d6:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 82ac0 <__sfvwrite_r+0x314>
   827da:	46d0      	mov	r8, sl
   827dc:	45d8      	cmp	r8, fp
   827de:	bf34      	ite	cc
   827e0:	4643      	movcc	r3, r8
   827e2:	465b      	movcs	r3, fp
   827e4:	4652      	mov	r2, sl
   827e6:	4648      	mov	r0, r9
   827e8:	f1b8 0f00 	cmp.w	r8, #0
   827ec:	d04f      	beq.n	8288e <__sfvwrite_r+0xe2>
   827ee:	69e1      	ldr	r1, [r4, #28]
   827f0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   827f2:	47b8      	blx	r7
   827f4:	2800      	cmp	r0, #0
   827f6:	dd56      	ble.n	828a6 <__sfvwrite_r+0xfa>
   827f8:	68b3      	ldr	r3, [r6, #8]
   827fa:	4482      	add	sl, r0
   827fc:	1a1b      	subs	r3, r3, r0
   827fe:	ebc0 0808 	rsb	r8, r0, r8
   82802:	60b3      	str	r3, [r6, #8]
   82804:	2b00      	cmp	r3, #0
   82806:	d1e9      	bne.n	827dc <__sfvwrite_r+0x30>
   82808:	2000      	movs	r0, #0
   8280a:	b003      	add	sp, #12
   8280c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82810:	4648      	mov	r0, r9
   82812:	4621      	mov	r1, r4
   82814:	f7ff fc88 	bl	82128 <__swsetup_r>
   82818:	2800      	cmp	r0, #0
   8281a:	f040 8148 	bne.w	82aae <__sfvwrite_r+0x302>
   8281e:	89a3      	ldrh	r3, [r4, #12]
   82820:	6835      	ldr	r5, [r6, #0]
   82822:	f003 0202 	and.w	r2, r3, #2
   82826:	b292      	uxth	r2, r2
   82828:	2a00      	cmp	r2, #0
   8282a:	d1d2      	bne.n	827d2 <__sfvwrite_r+0x26>
   8282c:	f013 0a01 	ands.w	sl, r3, #1
   82830:	d142      	bne.n	828b8 <__sfvwrite_r+0x10c>
   82832:	46d0      	mov	r8, sl
   82834:	f1b8 0f00 	cmp.w	r8, #0
   82838:	d023      	beq.n	82882 <__sfvwrite_r+0xd6>
   8283a:	059a      	lsls	r2, r3, #22
   8283c:	68a7      	ldr	r7, [r4, #8]
   8283e:	d576      	bpl.n	8292e <__sfvwrite_r+0x182>
   82840:	45b8      	cmp	r8, r7
   82842:	f0c0 80a4 	bcc.w	8298e <__sfvwrite_r+0x1e2>
   82846:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8284a:	f040 80b2 	bne.w	829b2 <__sfvwrite_r+0x206>
   8284e:	6820      	ldr	r0, [r4, #0]
   82850:	46bb      	mov	fp, r7
   82852:	4651      	mov	r1, sl
   82854:	465a      	mov	r2, fp
   82856:	f000 fd37 	bl	832c8 <memmove>
   8285a:	68a2      	ldr	r2, [r4, #8]
   8285c:	6821      	ldr	r1, [r4, #0]
   8285e:	1bd2      	subs	r2, r2, r7
   82860:	eb01 030b 	add.w	r3, r1, fp
   82864:	60a2      	str	r2, [r4, #8]
   82866:	6023      	str	r3, [r4, #0]
   82868:	4642      	mov	r2, r8
   8286a:	68b3      	ldr	r3, [r6, #8]
   8286c:	4492      	add	sl, r2
   8286e:	1a9b      	subs	r3, r3, r2
   82870:	ebc2 0808 	rsb	r8, r2, r8
   82874:	60b3      	str	r3, [r6, #8]
   82876:	2b00      	cmp	r3, #0
   82878:	d0c6      	beq.n	82808 <__sfvwrite_r+0x5c>
   8287a:	89a3      	ldrh	r3, [r4, #12]
   8287c:	f1b8 0f00 	cmp.w	r8, #0
   82880:	d1db      	bne.n	8283a <__sfvwrite_r+0x8e>
   82882:	f8d5 a000 	ldr.w	sl, [r5]
   82886:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8288a:	3508      	adds	r5, #8
   8288c:	e7d2      	b.n	82834 <__sfvwrite_r+0x88>
   8288e:	f8d5 a000 	ldr.w	sl, [r5]
   82892:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82896:	3508      	adds	r5, #8
   82898:	e7a0      	b.n	827dc <__sfvwrite_r+0x30>
   8289a:	4648      	mov	r0, r9
   8289c:	4621      	mov	r1, r4
   8289e:	f7ff fd59 	bl	82354 <_fflush_r>
   828a2:	2800      	cmp	r0, #0
   828a4:	d059      	beq.n	8295a <__sfvwrite_r+0x1ae>
   828a6:	89a3      	ldrh	r3, [r4, #12]
   828a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   828ac:	f04f 30ff 	mov.w	r0, #4294967295
   828b0:	81a3      	strh	r3, [r4, #12]
   828b2:	b003      	add	sp, #12
   828b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   828b8:	4692      	mov	sl, r2
   828ba:	9201      	str	r2, [sp, #4]
   828bc:	4693      	mov	fp, r2
   828be:	4690      	mov	r8, r2
   828c0:	f1b8 0f00 	cmp.w	r8, #0
   828c4:	d02b      	beq.n	8291e <__sfvwrite_r+0x172>
   828c6:	9f01      	ldr	r7, [sp, #4]
   828c8:	2f00      	cmp	r7, #0
   828ca:	d064      	beq.n	82996 <__sfvwrite_r+0x1ea>
   828cc:	6820      	ldr	r0, [r4, #0]
   828ce:	6921      	ldr	r1, [r4, #16]
   828d0:	45c2      	cmp	sl, r8
   828d2:	bf34      	ite	cc
   828d4:	4653      	movcc	r3, sl
   828d6:	4643      	movcs	r3, r8
   828d8:	4288      	cmp	r0, r1
   828da:	461f      	mov	r7, r3
   828dc:	f8d4 c008 	ldr.w	ip, [r4, #8]
   828e0:	6962      	ldr	r2, [r4, #20]
   828e2:	d903      	bls.n	828ec <__sfvwrite_r+0x140>
   828e4:	4494      	add	ip, r2
   828e6:	4563      	cmp	r3, ip
   828e8:	f300 80ae 	bgt.w	82a48 <__sfvwrite_r+0x29c>
   828ec:	4293      	cmp	r3, r2
   828ee:	db36      	blt.n	8295e <__sfvwrite_r+0x1b2>
   828f0:	4613      	mov	r3, r2
   828f2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   828f4:	4648      	mov	r0, r9
   828f6:	69e1      	ldr	r1, [r4, #28]
   828f8:	465a      	mov	r2, fp
   828fa:	47b8      	blx	r7
   828fc:	1e07      	subs	r7, r0, #0
   828fe:	ddd2      	ble.n	828a6 <__sfvwrite_r+0xfa>
   82900:	ebba 0a07 	subs.w	sl, sl, r7
   82904:	d03a      	beq.n	8297c <__sfvwrite_r+0x1d0>
   82906:	68b3      	ldr	r3, [r6, #8]
   82908:	44bb      	add	fp, r7
   8290a:	1bdb      	subs	r3, r3, r7
   8290c:	ebc7 0808 	rsb	r8, r7, r8
   82910:	60b3      	str	r3, [r6, #8]
   82912:	2b00      	cmp	r3, #0
   82914:	f43f af78 	beq.w	82808 <__sfvwrite_r+0x5c>
   82918:	f1b8 0f00 	cmp.w	r8, #0
   8291c:	d1d3      	bne.n	828c6 <__sfvwrite_r+0x11a>
   8291e:	2700      	movs	r7, #0
   82920:	f8d5 b000 	ldr.w	fp, [r5]
   82924:	f8d5 8004 	ldr.w	r8, [r5, #4]
   82928:	9701      	str	r7, [sp, #4]
   8292a:	3508      	adds	r5, #8
   8292c:	e7c8      	b.n	828c0 <__sfvwrite_r+0x114>
   8292e:	6820      	ldr	r0, [r4, #0]
   82930:	6923      	ldr	r3, [r4, #16]
   82932:	4298      	cmp	r0, r3
   82934:	d802      	bhi.n	8293c <__sfvwrite_r+0x190>
   82936:	6963      	ldr	r3, [r4, #20]
   82938:	4598      	cmp	r8, r3
   8293a:	d272      	bcs.n	82a22 <__sfvwrite_r+0x276>
   8293c:	45b8      	cmp	r8, r7
   8293e:	bf38      	it	cc
   82940:	4647      	movcc	r7, r8
   82942:	463a      	mov	r2, r7
   82944:	4651      	mov	r1, sl
   82946:	f000 fcbf 	bl	832c8 <memmove>
   8294a:	68a3      	ldr	r3, [r4, #8]
   8294c:	6822      	ldr	r2, [r4, #0]
   8294e:	1bdb      	subs	r3, r3, r7
   82950:	443a      	add	r2, r7
   82952:	60a3      	str	r3, [r4, #8]
   82954:	6022      	str	r2, [r4, #0]
   82956:	2b00      	cmp	r3, #0
   82958:	d09f      	beq.n	8289a <__sfvwrite_r+0xee>
   8295a:	463a      	mov	r2, r7
   8295c:	e785      	b.n	8286a <__sfvwrite_r+0xbe>
   8295e:	461a      	mov	r2, r3
   82960:	4659      	mov	r1, fp
   82962:	9300      	str	r3, [sp, #0]
   82964:	f000 fcb0 	bl	832c8 <memmove>
   82968:	9b00      	ldr	r3, [sp, #0]
   8296a:	68a1      	ldr	r1, [r4, #8]
   8296c:	6822      	ldr	r2, [r4, #0]
   8296e:	1ac9      	subs	r1, r1, r3
   82970:	ebba 0a07 	subs.w	sl, sl, r7
   82974:	4413      	add	r3, r2
   82976:	60a1      	str	r1, [r4, #8]
   82978:	6023      	str	r3, [r4, #0]
   8297a:	d1c4      	bne.n	82906 <__sfvwrite_r+0x15a>
   8297c:	4648      	mov	r0, r9
   8297e:	4621      	mov	r1, r4
   82980:	f7ff fce8 	bl	82354 <_fflush_r>
   82984:	2800      	cmp	r0, #0
   82986:	d18e      	bne.n	828a6 <__sfvwrite_r+0xfa>
   82988:	f8cd a004 	str.w	sl, [sp, #4]
   8298c:	e7bb      	b.n	82906 <__sfvwrite_r+0x15a>
   8298e:	6820      	ldr	r0, [r4, #0]
   82990:	4647      	mov	r7, r8
   82992:	46c3      	mov	fp, r8
   82994:	e75d      	b.n	82852 <__sfvwrite_r+0xa6>
   82996:	4658      	mov	r0, fp
   82998:	210a      	movs	r1, #10
   8299a:	4642      	mov	r2, r8
   8299c:	f000 fbd4 	bl	83148 <memchr>
   829a0:	2800      	cmp	r0, #0
   829a2:	d07f      	beq.n	82aa4 <__sfvwrite_r+0x2f8>
   829a4:	f100 0a01 	add.w	sl, r0, #1
   829a8:	2701      	movs	r7, #1
   829aa:	ebcb 0a0a 	rsb	sl, fp, sl
   829ae:	9701      	str	r7, [sp, #4]
   829b0:	e78c      	b.n	828cc <__sfvwrite_r+0x120>
   829b2:	6822      	ldr	r2, [r4, #0]
   829b4:	6921      	ldr	r1, [r4, #16]
   829b6:	6967      	ldr	r7, [r4, #20]
   829b8:	ebc1 0c02 	rsb	ip, r1, r2
   829bc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   829c0:	f10c 0201 	add.w	r2, ip, #1
   829c4:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   829c8:	4442      	add	r2, r8
   829ca:	107f      	asrs	r7, r7, #1
   829cc:	4297      	cmp	r7, r2
   829ce:	bf34      	ite	cc
   829d0:	4617      	movcc	r7, r2
   829d2:	463a      	movcs	r2, r7
   829d4:	055b      	lsls	r3, r3, #21
   829d6:	d54f      	bpl.n	82a78 <__sfvwrite_r+0x2cc>
   829d8:	4611      	mov	r1, r2
   829da:	4648      	mov	r0, r9
   829dc:	f8cd c000 	str.w	ip, [sp]
   829e0:	f000 f916 	bl	82c10 <_malloc_r>
   829e4:	f8dd c000 	ldr.w	ip, [sp]
   829e8:	4683      	mov	fp, r0
   829ea:	2800      	cmp	r0, #0
   829ec:	d062      	beq.n	82ab4 <__sfvwrite_r+0x308>
   829ee:	4662      	mov	r2, ip
   829f0:	6921      	ldr	r1, [r4, #16]
   829f2:	f8cd c000 	str.w	ip, [sp]
   829f6:	f000 fbf1 	bl	831dc <memcpy>
   829fa:	89a2      	ldrh	r2, [r4, #12]
   829fc:	f8dd c000 	ldr.w	ip, [sp]
   82a00:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   82a04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82a08:	81a2      	strh	r2, [r4, #12]
   82a0a:	eb0b 000c 	add.w	r0, fp, ip
   82a0e:	ebcc 0207 	rsb	r2, ip, r7
   82a12:	f8c4 b010 	str.w	fp, [r4, #16]
   82a16:	6167      	str	r7, [r4, #20]
   82a18:	6020      	str	r0, [r4, #0]
   82a1a:	60a2      	str	r2, [r4, #8]
   82a1c:	4647      	mov	r7, r8
   82a1e:	46c3      	mov	fp, r8
   82a20:	e717      	b.n	82852 <__sfvwrite_r+0xa6>
   82a22:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82a26:	4590      	cmp	r8, r2
   82a28:	bf38      	it	cc
   82a2a:	4642      	movcc	r2, r8
   82a2c:	fb92 f2f3 	sdiv	r2, r2, r3
   82a30:	fb02 f303 	mul.w	r3, r2, r3
   82a34:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82a36:	4648      	mov	r0, r9
   82a38:	69e1      	ldr	r1, [r4, #28]
   82a3a:	4652      	mov	r2, sl
   82a3c:	47b8      	blx	r7
   82a3e:	2800      	cmp	r0, #0
   82a40:	f77f af31 	ble.w	828a6 <__sfvwrite_r+0xfa>
   82a44:	4602      	mov	r2, r0
   82a46:	e710      	b.n	8286a <__sfvwrite_r+0xbe>
   82a48:	4662      	mov	r2, ip
   82a4a:	4659      	mov	r1, fp
   82a4c:	f8cd c000 	str.w	ip, [sp]
   82a50:	f000 fc3a 	bl	832c8 <memmove>
   82a54:	f8dd c000 	ldr.w	ip, [sp]
   82a58:	6823      	ldr	r3, [r4, #0]
   82a5a:	4648      	mov	r0, r9
   82a5c:	4463      	add	r3, ip
   82a5e:	6023      	str	r3, [r4, #0]
   82a60:	4621      	mov	r1, r4
   82a62:	f8cd c000 	str.w	ip, [sp]
   82a66:	f7ff fc75 	bl	82354 <_fflush_r>
   82a6a:	f8dd c000 	ldr.w	ip, [sp]
   82a6e:	2800      	cmp	r0, #0
   82a70:	f47f af19 	bne.w	828a6 <__sfvwrite_r+0xfa>
   82a74:	4667      	mov	r7, ip
   82a76:	e743      	b.n	82900 <__sfvwrite_r+0x154>
   82a78:	4648      	mov	r0, r9
   82a7a:	f8cd c000 	str.w	ip, [sp]
   82a7e:	f000 fc8d 	bl	8339c <_realloc_r>
   82a82:	f8dd c000 	ldr.w	ip, [sp]
   82a86:	4683      	mov	fp, r0
   82a88:	2800      	cmp	r0, #0
   82a8a:	d1be      	bne.n	82a0a <__sfvwrite_r+0x25e>
   82a8c:	4648      	mov	r0, r9
   82a8e:	6921      	ldr	r1, [r4, #16]
   82a90:	f7ff fdc0 	bl	82614 <_free_r>
   82a94:	89a3      	ldrh	r3, [r4, #12]
   82a96:	220c      	movs	r2, #12
   82a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82a9c:	b29b      	uxth	r3, r3
   82a9e:	f8c9 2000 	str.w	r2, [r9]
   82aa2:	e701      	b.n	828a8 <__sfvwrite_r+0xfc>
   82aa4:	2701      	movs	r7, #1
   82aa6:	f108 0a01 	add.w	sl, r8, #1
   82aaa:	9701      	str	r7, [sp, #4]
   82aac:	e70e      	b.n	828cc <__sfvwrite_r+0x120>
   82aae:	f04f 30ff 	mov.w	r0, #4294967295
   82ab2:	e6aa      	b.n	8280a <__sfvwrite_r+0x5e>
   82ab4:	230c      	movs	r3, #12
   82ab6:	f8c9 3000 	str.w	r3, [r9]
   82aba:	89a3      	ldrh	r3, [r4, #12]
   82abc:	e6f4      	b.n	828a8 <__sfvwrite_r+0xfc>
   82abe:	bf00      	nop
   82ac0:	7ffffc00 	.word	0x7ffffc00

00082ac4 <_fwalk>:
   82ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82ac8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82acc:	4688      	mov	r8, r1
   82ace:	d019      	beq.n	82b04 <_fwalk+0x40>
   82ad0:	2600      	movs	r6, #0
   82ad2:	687d      	ldr	r5, [r7, #4]
   82ad4:	68bc      	ldr	r4, [r7, #8]
   82ad6:	3d01      	subs	r5, #1
   82ad8:	d40e      	bmi.n	82af8 <_fwalk+0x34>
   82ada:	89a3      	ldrh	r3, [r4, #12]
   82adc:	3d01      	subs	r5, #1
   82ade:	2b01      	cmp	r3, #1
   82ae0:	d906      	bls.n	82af0 <_fwalk+0x2c>
   82ae2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82ae6:	4620      	mov	r0, r4
   82ae8:	3301      	adds	r3, #1
   82aea:	d001      	beq.n	82af0 <_fwalk+0x2c>
   82aec:	47c0      	blx	r8
   82aee:	4306      	orrs	r6, r0
   82af0:	1c6b      	adds	r3, r5, #1
   82af2:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82af6:	d1f0      	bne.n	82ada <_fwalk+0x16>
   82af8:	683f      	ldr	r7, [r7, #0]
   82afa:	2f00      	cmp	r7, #0
   82afc:	d1e9      	bne.n	82ad2 <_fwalk+0xe>
   82afe:	4630      	mov	r0, r6
   82b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b04:	463e      	mov	r6, r7
   82b06:	4630      	mov	r0, r6
   82b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082b0c <__locale_charset>:
   82b0c:	4800      	ldr	r0, [pc, #0]	; (82b10 <__locale_charset+0x4>)
   82b0e:	4770      	bx	lr
   82b10:	2007055c 	.word	0x2007055c

00082b14 <__locale_mb_cur_max>:
   82b14:	4b01      	ldr	r3, [pc, #4]	; (82b1c <__locale_mb_cur_max+0x8>)
   82b16:	6818      	ldr	r0, [r3, #0]
   82b18:	4770      	bx	lr
   82b1a:	bf00      	nop
   82b1c:	2007057c 	.word	0x2007057c

00082b20 <__smakebuf_r>:
   82b20:	b5f0      	push	{r4, r5, r6, r7, lr}
   82b22:	898b      	ldrh	r3, [r1, #12]
   82b24:	b091      	sub	sp, #68	; 0x44
   82b26:	b29a      	uxth	r2, r3
   82b28:	0796      	lsls	r6, r2, #30
   82b2a:	460c      	mov	r4, r1
   82b2c:	4605      	mov	r5, r0
   82b2e:	d437      	bmi.n	82ba0 <__smakebuf_r+0x80>
   82b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82b34:	2900      	cmp	r1, #0
   82b36:	db17      	blt.n	82b68 <__smakebuf_r+0x48>
   82b38:	aa01      	add	r2, sp, #4
   82b3a:	f000 ff8b 	bl	83a54 <_fstat_r>
   82b3e:	2800      	cmp	r0, #0
   82b40:	db10      	blt.n	82b64 <__smakebuf_r+0x44>
   82b42:	9b02      	ldr	r3, [sp, #8]
   82b44:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   82b48:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   82b4c:	424f      	negs	r7, r1
   82b4e:	414f      	adcs	r7, r1
   82b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   82b54:	d02c      	beq.n	82bb0 <__smakebuf_r+0x90>
   82b56:	89a3      	ldrh	r3, [r4, #12]
   82b58:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82b5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82b60:	81a3      	strh	r3, [r4, #12]
   82b62:	e00b      	b.n	82b7c <__smakebuf_r+0x5c>
   82b64:	89a3      	ldrh	r3, [r4, #12]
   82b66:	b29a      	uxth	r2, r3
   82b68:	f012 0f80 	tst.w	r2, #128	; 0x80
   82b6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82b70:	81a3      	strh	r3, [r4, #12]
   82b72:	bf14      	ite	ne
   82b74:	2640      	movne	r6, #64	; 0x40
   82b76:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   82b7a:	2700      	movs	r7, #0
   82b7c:	4628      	mov	r0, r5
   82b7e:	4631      	mov	r1, r6
   82b80:	f000 f846 	bl	82c10 <_malloc_r>
   82b84:	89a3      	ldrh	r3, [r4, #12]
   82b86:	2800      	cmp	r0, #0
   82b88:	d029      	beq.n	82bde <__smakebuf_r+0xbe>
   82b8a:	4a1b      	ldr	r2, [pc, #108]	; (82bf8 <__smakebuf_r+0xd8>)
   82b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82b90:	63ea      	str	r2, [r5, #60]	; 0x3c
   82b92:	81a3      	strh	r3, [r4, #12]
   82b94:	6020      	str	r0, [r4, #0]
   82b96:	6120      	str	r0, [r4, #16]
   82b98:	6166      	str	r6, [r4, #20]
   82b9a:	b9a7      	cbnz	r7, 82bc6 <__smakebuf_r+0xa6>
   82b9c:	b011      	add	sp, #68	; 0x44
   82b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82ba0:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82ba4:	2201      	movs	r2, #1
   82ba6:	600b      	str	r3, [r1, #0]
   82ba8:	610b      	str	r3, [r1, #16]
   82baa:	614a      	str	r2, [r1, #20]
   82bac:	b011      	add	sp, #68	; 0x44
   82bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82bb0:	4a12      	ldr	r2, [pc, #72]	; (82bfc <__smakebuf_r+0xdc>)
   82bb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82bb4:	4293      	cmp	r3, r2
   82bb6:	d1ce      	bne.n	82b56 <__smakebuf_r+0x36>
   82bb8:	89a3      	ldrh	r3, [r4, #12]
   82bba:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82bbe:	4333      	orrs	r3, r6
   82bc0:	81a3      	strh	r3, [r4, #12]
   82bc2:	64e6      	str	r6, [r4, #76]	; 0x4c
   82bc4:	e7da      	b.n	82b7c <__smakebuf_r+0x5c>
   82bc6:	4628      	mov	r0, r5
   82bc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82bcc:	f000 ff56 	bl	83a7c <_isatty_r>
   82bd0:	2800      	cmp	r0, #0
   82bd2:	d0e3      	beq.n	82b9c <__smakebuf_r+0x7c>
   82bd4:	89a3      	ldrh	r3, [r4, #12]
   82bd6:	f043 0301 	orr.w	r3, r3, #1
   82bda:	81a3      	strh	r3, [r4, #12]
   82bdc:	e7de      	b.n	82b9c <__smakebuf_r+0x7c>
   82bde:	059a      	lsls	r2, r3, #22
   82be0:	d4dc      	bmi.n	82b9c <__smakebuf_r+0x7c>
   82be2:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82be6:	f043 0302 	orr.w	r3, r3, #2
   82bea:	2101      	movs	r1, #1
   82bec:	81a3      	strh	r3, [r4, #12]
   82bee:	6022      	str	r2, [r4, #0]
   82bf0:	6122      	str	r2, [r4, #16]
   82bf2:	6161      	str	r1, [r4, #20]
   82bf4:	e7d2      	b.n	82b9c <__smakebuf_r+0x7c>
   82bf6:	bf00      	nop
   82bf8:	00082381 	.word	0x00082381
   82bfc:	000837dd 	.word	0x000837dd

00082c00 <malloc>:
   82c00:	4b02      	ldr	r3, [pc, #8]	; (82c0c <malloc+0xc>)
   82c02:	4601      	mov	r1, r0
   82c04:	6818      	ldr	r0, [r3, #0]
   82c06:	f000 b803 	b.w	82c10 <_malloc_r>
   82c0a:	bf00      	nop
   82c0c:	20070558 	.word	0x20070558

00082c10 <_malloc_r>:
   82c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82c14:	f101 050b 	add.w	r5, r1, #11
   82c18:	2d16      	cmp	r5, #22
   82c1a:	b083      	sub	sp, #12
   82c1c:	4606      	mov	r6, r0
   82c1e:	d927      	bls.n	82c70 <_malloc_r+0x60>
   82c20:	f035 0507 	bics.w	r5, r5, #7
   82c24:	d427      	bmi.n	82c76 <_malloc_r+0x66>
   82c26:	42a9      	cmp	r1, r5
   82c28:	d825      	bhi.n	82c76 <_malloc_r+0x66>
   82c2a:	4630      	mov	r0, r6
   82c2c:	f000 fbb2 	bl	83394 <__malloc_lock>
   82c30:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82c34:	d226      	bcs.n	82c84 <_malloc_r+0x74>
   82c36:	4fc1      	ldr	r7, [pc, #772]	; (82f3c <_malloc_r+0x32c>)
   82c38:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   82c3c:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   82c40:	68dc      	ldr	r4, [r3, #12]
   82c42:	429c      	cmp	r4, r3
   82c44:	f000 81d2 	beq.w	82fec <_malloc_r+0x3dc>
   82c48:	6863      	ldr	r3, [r4, #4]
   82c4a:	68e2      	ldr	r2, [r4, #12]
   82c4c:	f023 0303 	bic.w	r3, r3, #3
   82c50:	4423      	add	r3, r4
   82c52:	6858      	ldr	r0, [r3, #4]
   82c54:	68a1      	ldr	r1, [r4, #8]
   82c56:	f040 0501 	orr.w	r5, r0, #1
   82c5a:	60ca      	str	r2, [r1, #12]
   82c5c:	4630      	mov	r0, r6
   82c5e:	6091      	str	r1, [r2, #8]
   82c60:	605d      	str	r5, [r3, #4]
   82c62:	f000 fb99 	bl	83398 <__malloc_unlock>
   82c66:	3408      	adds	r4, #8
   82c68:	4620      	mov	r0, r4
   82c6a:	b003      	add	sp, #12
   82c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c70:	2510      	movs	r5, #16
   82c72:	42a9      	cmp	r1, r5
   82c74:	d9d9      	bls.n	82c2a <_malloc_r+0x1a>
   82c76:	2400      	movs	r4, #0
   82c78:	230c      	movs	r3, #12
   82c7a:	4620      	mov	r0, r4
   82c7c:	6033      	str	r3, [r6, #0]
   82c7e:	b003      	add	sp, #12
   82c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c84:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82c88:	f000 8089 	beq.w	82d9e <_malloc_r+0x18e>
   82c8c:	f1bc 0f04 	cmp.w	ip, #4
   82c90:	f200 8160 	bhi.w	82f54 <_malloc_r+0x344>
   82c94:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82c98:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82c9c:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82ca0:	4fa6      	ldr	r7, [pc, #664]	; (82f3c <_malloc_r+0x32c>)
   82ca2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82ca6:	68cc      	ldr	r4, [r1, #12]
   82ca8:	42a1      	cmp	r1, r4
   82caa:	d105      	bne.n	82cb8 <_malloc_r+0xa8>
   82cac:	e00c      	b.n	82cc8 <_malloc_r+0xb8>
   82cae:	2b00      	cmp	r3, #0
   82cb0:	da79      	bge.n	82da6 <_malloc_r+0x196>
   82cb2:	68e4      	ldr	r4, [r4, #12]
   82cb4:	42a1      	cmp	r1, r4
   82cb6:	d007      	beq.n	82cc8 <_malloc_r+0xb8>
   82cb8:	6862      	ldr	r2, [r4, #4]
   82cba:	f022 0203 	bic.w	r2, r2, #3
   82cbe:	1b53      	subs	r3, r2, r5
   82cc0:	2b0f      	cmp	r3, #15
   82cc2:	ddf4      	ble.n	82cae <_malloc_r+0x9e>
   82cc4:	f10c 3cff 	add.w	ip, ip, #4294967295
   82cc8:	f10c 0c01 	add.w	ip, ip, #1
   82ccc:	4b9b      	ldr	r3, [pc, #620]	; (82f3c <_malloc_r+0x32c>)
   82cce:	693c      	ldr	r4, [r7, #16]
   82cd0:	f103 0e08 	add.w	lr, r3, #8
   82cd4:	4574      	cmp	r4, lr
   82cd6:	f000 817e 	beq.w	82fd6 <_malloc_r+0x3c6>
   82cda:	6861      	ldr	r1, [r4, #4]
   82cdc:	f021 0103 	bic.w	r1, r1, #3
   82ce0:	1b4a      	subs	r2, r1, r5
   82ce2:	2a0f      	cmp	r2, #15
   82ce4:	f300 8164 	bgt.w	82fb0 <_malloc_r+0x3a0>
   82ce8:	2a00      	cmp	r2, #0
   82cea:	f8c3 e014 	str.w	lr, [r3, #20]
   82cee:	f8c3 e010 	str.w	lr, [r3, #16]
   82cf2:	da69      	bge.n	82dc8 <_malloc_r+0x1b8>
   82cf4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82cf8:	f080 813a 	bcs.w	82f70 <_malloc_r+0x360>
   82cfc:	08c9      	lsrs	r1, r1, #3
   82cfe:	108a      	asrs	r2, r1, #2
   82d00:	f04f 0801 	mov.w	r8, #1
   82d04:	fa08 f802 	lsl.w	r8, r8, r2
   82d08:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82d0c:	685a      	ldr	r2, [r3, #4]
   82d0e:	6888      	ldr	r0, [r1, #8]
   82d10:	ea48 0202 	orr.w	r2, r8, r2
   82d14:	60a0      	str	r0, [r4, #8]
   82d16:	60e1      	str	r1, [r4, #12]
   82d18:	605a      	str	r2, [r3, #4]
   82d1a:	608c      	str	r4, [r1, #8]
   82d1c:	60c4      	str	r4, [r0, #12]
   82d1e:	ea4f 03ac 	mov.w	r3, ip, asr #2
   82d22:	2001      	movs	r0, #1
   82d24:	4098      	lsls	r0, r3
   82d26:	4290      	cmp	r0, r2
   82d28:	d85b      	bhi.n	82de2 <_malloc_r+0x1d2>
   82d2a:	4202      	tst	r2, r0
   82d2c:	d106      	bne.n	82d3c <_malloc_r+0x12c>
   82d2e:	f02c 0c03 	bic.w	ip, ip, #3
   82d32:	0040      	lsls	r0, r0, #1
   82d34:	4202      	tst	r2, r0
   82d36:	f10c 0c04 	add.w	ip, ip, #4
   82d3a:	d0fa      	beq.n	82d32 <_malloc_r+0x122>
   82d3c:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   82d40:	4644      	mov	r4, r8
   82d42:	46e1      	mov	r9, ip
   82d44:	68e3      	ldr	r3, [r4, #12]
   82d46:	429c      	cmp	r4, r3
   82d48:	d107      	bne.n	82d5a <_malloc_r+0x14a>
   82d4a:	e146      	b.n	82fda <_malloc_r+0x3ca>
   82d4c:	2a00      	cmp	r2, #0
   82d4e:	f280 8157 	bge.w	83000 <_malloc_r+0x3f0>
   82d52:	68db      	ldr	r3, [r3, #12]
   82d54:	429c      	cmp	r4, r3
   82d56:	f000 8140 	beq.w	82fda <_malloc_r+0x3ca>
   82d5a:	6859      	ldr	r1, [r3, #4]
   82d5c:	f021 0103 	bic.w	r1, r1, #3
   82d60:	1b4a      	subs	r2, r1, r5
   82d62:	2a0f      	cmp	r2, #15
   82d64:	ddf2      	ble.n	82d4c <_malloc_r+0x13c>
   82d66:	461c      	mov	r4, r3
   82d68:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82d6c:	68d9      	ldr	r1, [r3, #12]
   82d6e:	f045 0901 	orr.w	r9, r5, #1
   82d72:	f042 0801 	orr.w	r8, r2, #1
   82d76:	441d      	add	r5, r3
   82d78:	f8c3 9004 	str.w	r9, [r3, #4]
   82d7c:	4630      	mov	r0, r6
   82d7e:	f8cc 100c 	str.w	r1, [ip, #12]
   82d82:	f8c1 c008 	str.w	ip, [r1, #8]
   82d86:	617d      	str	r5, [r7, #20]
   82d88:	613d      	str	r5, [r7, #16]
   82d8a:	f8c5 e00c 	str.w	lr, [r5, #12]
   82d8e:	f8c5 e008 	str.w	lr, [r5, #8]
   82d92:	f8c5 8004 	str.w	r8, [r5, #4]
   82d96:	50aa      	str	r2, [r5, r2]
   82d98:	f000 fafe 	bl	83398 <__malloc_unlock>
   82d9c:	e764      	b.n	82c68 <_malloc_r+0x58>
   82d9e:	217e      	movs	r1, #126	; 0x7e
   82da0:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   82da4:	e77c      	b.n	82ca0 <_malloc_r+0x90>
   82da6:	4422      	add	r2, r4
   82da8:	6850      	ldr	r0, [r2, #4]
   82daa:	68e3      	ldr	r3, [r4, #12]
   82dac:	68a1      	ldr	r1, [r4, #8]
   82dae:	f040 0501 	orr.w	r5, r0, #1
   82db2:	60cb      	str	r3, [r1, #12]
   82db4:	4630      	mov	r0, r6
   82db6:	6099      	str	r1, [r3, #8]
   82db8:	6055      	str	r5, [r2, #4]
   82dba:	f000 faed 	bl	83398 <__malloc_unlock>
   82dbe:	3408      	adds	r4, #8
   82dc0:	4620      	mov	r0, r4
   82dc2:	b003      	add	sp, #12
   82dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82dc8:	4421      	add	r1, r4
   82dca:	684b      	ldr	r3, [r1, #4]
   82dcc:	4630      	mov	r0, r6
   82dce:	f043 0301 	orr.w	r3, r3, #1
   82dd2:	604b      	str	r3, [r1, #4]
   82dd4:	f000 fae0 	bl	83398 <__malloc_unlock>
   82dd8:	3408      	adds	r4, #8
   82dda:	4620      	mov	r0, r4
   82ddc:	b003      	add	sp, #12
   82dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82de2:	68bc      	ldr	r4, [r7, #8]
   82de4:	6863      	ldr	r3, [r4, #4]
   82de6:	f023 0903 	bic.w	r9, r3, #3
   82dea:	45a9      	cmp	r9, r5
   82dec:	d304      	bcc.n	82df8 <_malloc_r+0x1e8>
   82dee:	ebc5 0309 	rsb	r3, r5, r9
   82df2:	2b0f      	cmp	r3, #15
   82df4:	f300 8091 	bgt.w	82f1a <_malloc_r+0x30a>
   82df8:	4b51      	ldr	r3, [pc, #324]	; (82f40 <_malloc_r+0x330>)
   82dfa:	4a52      	ldr	r2, [pc, #328]	; (82f44 <_malloc_r+0x334>)
   82dfc:	6819      	ldr	r1, [r3, #0]
   82dfe:	6813      	ldr	r3, [r2, #0]
   82e00:	eb05 0a01 	add.w	sl, r5, r1
   82e04:	3301      	adds	r3, #1
   82e06:	eb04 0b09 	add.w	fp, r4, r9
   82e0a:	f000 8161 	beq.w	830d0 <_malloc_r+0x4c0>
   82e0e:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   82e12:	f10a 0a0f 	add.w	sl, sl, #15
   82e16:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   82e1a:	f02a 0a0f 	bic.w	sl, sl, #15
   82e1e:	4630      	mov	r0, r6
   82e20:	4651      	mov	r1, sl
   82e22:	9201      	str	r2, [sp, #4]
   82e24:	f000 fc9a 	bl	8375c <_sbrk_r>
   82e28:	f1b0 3fff 	cmp.w	r0, #4294967295
   82e2c:	4680      	mov	r8, r0
   82e2e:	9a01      	ldr	r2, [sp, #4]
   82e30:	f000 8101 	beq.w	83036 <_malloc_r+0x426>
   82e34:	4583      	cmp	fp, r0
   82e36:	f200 80fb 	bhi.w	83030 <_malloc_r+0x420>
   82e3a:	f8df c114 	ldr.w	ip, [pc, #276]	; 82f50 <_malloc_r+0x340>
   82e3e:	45c3      	cmp	fp, r8
   82e40:	f8dc 3000 	ldr.w	r3, [ip]
   82e44:	4453      	add	r3, sl
   82e46:	f8cc 3000 	str.w	r3, [ip]
   82e4a:	f000 814a 	beq.w	830e2 <_malloc_r+0x4d2>
   82e4e:	6812      	ldr	r2, [r2, #0]
   82e50:	493c      	ldr	r1, [pc, #240]	; (82f44 <_malloc_r+0x334>)
   82e52:	3201      	adds	r2, #1
   82e54:	bf1b      	ittet	ne
   82e56:	ebcb 0b08 	rsbne	fp, fp, r8
   82e5a:	445b      	addne	r3, fp
   82e5c:	f8c1 8000 	streq.w	r8, [r1]
   82e60:	f8cc 3000 	strne.w	r3, [ip]
   82e64:	f018 0307 	ands.w	r3, r8, #7
   82e68:	f000 8114 	beq.w	83094 <_malloc_r+0x484>
   82e6c:	f1c3 0208 	rsb	r2, r3, #8
   82e70:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   82e74:	4490      	add	r8, r2
   82e76:	3308      	adds	r3, #8
   82e78:	44c2      	add	sl, r8
   82e7a:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   82e7e:	ebca 0a03 	rsb	sl, sl, r3
   82e82:	4651      	mov	r1, sl
   82e84:	4630      	mov	r0, r6
   82e86:	f8cd c004 	str.w	ip, [sp, #4]
   82e8a:	f000 fc67 	bl	8375c <_sbrk_r>
   82e8e:	1c43      	adds	r3, r0, #1
   82e90:	f8dd c004 	ldr.w	ip, [sp, #4]
   82e94:	f000 8135 	beq.w	83102 <_malloc_r+0x4f2>
   82e98:	ebc8 0200 	rsb	r2, r8, r0
   82e9c:	4452      	add	r2, sl
   82e9e:	f042 0201 	orr.w	r2, r2, #1
   82ea2:	f8dc 3000 	ldr.w	r3, [ip]
   82ea6:	42bc      	cmp	r4, r7
   82ea8:	4453      	add	r3, sl
   82eaa:	f8c7 8008 	str.w	r8, [r7, #8]
   82eae:	f8cc 3000 	str.w	r3, [ip]
   82eb2:	f8c8 2004 	str.w	r2, [r8, #4]
   82eb6:	f8df a098 	ldr.w	sl, [pc, #152]	; 82f50 <_malloc_r+0x340>
   82eba:	d015      	beq.n	82ee8 <_malloc_r+0x2d8>
   82ebc:	f1b9 0f0f 	cmp.w	r9, #15
   82ec0:	f240 80eb 	bls.w	8309a <_malloc_r+0x48a>
   82ec4:	6861      	ldr	r1, [r4, #4]
   82ec6:	f1a9 020c 	sub.w	r2, r9, #12
   82eca:	f022 0207 	bic.w	r2, r2, #7
   82ece:	f001 0101 	and.w	r1, r1, #1
   82ed2:	ea42 0e01 	orr.w	lr, r2, r1
   82ed6:	2005      	movs	r0, #5
   82ed8:	18a1      	adds	r1, r4, r2
   82eda:	2a0f      	cmp	r2, #15
   82edc:	f8c4 e004 	str.w	lr, [r4, #4]
   82ee0:	6048      	str	r0, [r1, #4]
   82ee2:	6088      	str	r0, [r1, #8]
   82ee4:	f200 8111 	bhi.w	8310a <_malloc_r+0x4fa>
   82ee8:	4a17      	ldr	r2, [pc, #92]	; (82f48 <_malloc_r+0x338>)
   82eea:	68bc      	ldr	r4, [r7, #8]
   82eec:	6811      	ldr	r1, [r2, #0]
   82eee:	428b      	cmp	r3, r1
   82ef0:	bf88      	it	hi
   82ef2:	6013      	strhi	r3, [r2, #0]
   82ef4:	4a15      	ldr	r2, [pc, #84]	; (82f4c <_malloc_r+0x33c>)
   82ef6:	6811      	ldr	r1, [r2, #0]
   82ef8:	428b      	cmp	r3, r1
   82efa:	bf88      	it	hi
   82efc:	6013      	strhi	r3, [r2, #0]
   82efe:	6862      	ldr	r2, [r4, #4]
   82f00:	f022 0203 	bic.w	r2, r2, #3
   82f04:	4295      	cmp	r5, r2
   82f06:	ebc5 0302 	rsb	r3, r5, r2
   82f0a:	d801      	bhi.n	82f10 <_malloc_r+0x300>
   82f0c:	2b0f      	cmp	r3, #15
   82f0e:	dc04      	bgt.n	82f1a <_malloc_r+0x30a>
   82f10:	4630      	mov	r0, r6
   82f12:	f000 fa41 	bl	83398 <__malloc_unlock>
   82f16:	2400      	movs	r4, #0
   82f18:	e6a6      	b.n	82c68 <_malloc_r+0x58>
   82f1a:	f045 0201 	orr.w	r2, r5, #1
   82f1e:	f043 0301 	orr.w	r3, r3, #1
   82f22:	4425      	add	r5, r4
   82f24:	6062      	str	r2, [r4, #4]
   82f26:	4630      	mov	r0, r6
   82f28:	60bd      	str	r5, [r7, #8]
   82f2a:	606b      	str	r3, [r5, #4]
   82f2c:	f000 fa34 	bl	83398 <__malloc_unlock>
   82f30:	3408      	adds	r4, #8
   82f32:	4620      	mov	r0, r4
   82f34:	b003      	add	sp, #12
   82f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f3a:	bf00      	nop
   82f3c:	20070580 	.word	0x20070580
   82f40:	20070a2c 	.word	0x20070a2c
   82f44:	2007098c 	.word	0x2007098c
   82f48:	20070a28 	.word	0x20070a28
   82f4c:	20070a24 	.word	0x20070a24
   82f50:	20070a30 	.word	0x20070a30
   82f54:	f1bc 0f14 	cmp.w	ip, #20
   82f58:	d961      	bls.n	8301e <_malloc_r+0x40e>
   82f5a:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   82f5e:	f200 808f 	bhi.w	83080 <_malloc_r+0x470>
   82f62:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   82f66:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   82f6a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82f6e:	e697      	b.n	82ca0 <_malloc_r+0x90>
   82f70:	0a4b      	lsrs	r3, r1, #9
   82f72:	2b04      	cmp	r3, #4
   82f74:	d958      	bls.n	83028 <_malloc_r+0x418>
   82f76:	2b14      	cmp	r3, #20
   82f78:	f200 80ad 	bhi.w	830d6 <_malloc_r+0x4c6>
   82f7c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   82f80:	0050      	lsls	r0, r2, #1
   82f82:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   82f86:	6883      	ldr	r3, [r0, #8]
   82f88:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 83144 <_malloc_r+0x534>
   82f8c:	4283      	cmp	r3, r0
   82f8e:	f000 808a 	beq.w	830a6 <_malloc_r+0x496>
   82f92:	685a      	ldr	r2, [r3, #4]
   82f94:	f022 0203 	bic.w	r2, r2, #3
   82f98:	4291      	cmp	r1, r2
   82f9a:	d202      	bcs.n	82fa2 <_malloc_r+0x392>
   82f9c:	689b      	ldr	r3, [r3, #8]
   82f9e:	4298      	cmp	r0, r3
   82fa0:	d1f7      	bne.n	82f92 <_malloc_r+0x382>
   82fa2:	68d9      	ldr	r1, [r3, #12]
   82fa4:	687a      	ldr	r2, [r7, #4]
   82fa6:	60e1      	str	r1, [r4, #12]
   82fa8:	60a3      	str	r3, [r4, #8]
   82faa:	608c      	str	r4, [r1, #8]
   82fac:	60dc      	str	r4, [r3, #12]
   82fae:	e6b6      	b.n	82d1e <_malloc_r+0x10e>
   82fb0:	f045 0701 	orr.w	r7, r5, #1
   82fb4:	f042 0101 	orr.w	r1, r2, #1
   82fb8:	4425      	add	r5, r4
   82fba:	6067      	str	r7, [r4, #4]
   82fbc:	4630      	mov	r0, r6
   82fbe:	615d      	str	r5, [r3, #20]
   82fc0:	611d      	str	r5, [r3, #16]
   82fc2:	f8c5 e00c 	str.w	lr, [r5, #12]
   82fc6:	f8c5 e008 	str.w	lr, [r5, #8]
   82fca:	6069      	str	r1, [r5, #4]
   82fcc:	50aa      	str	r2, [r5, r2]
   82fce:	3408      	adds	r4, #8
   82fd0:	f000 f9e2 	bl	83398 <__malloc_unlock>
   82fd4:	e648      	b.n	82c68 <_malloc_r+0x58>
   82fd6:	685a      	ldr	r2, [r3, #4]
   82fd8:	e6a1      	b.n	82d1e <_malloc_r+0x10e>
   82fda:	f109 0901 	add.w	r9, r9, #1
   82fde:	f019 0f03 	tst.w	r9, #3
   82fe2:	f104 0408 	add.w	r4, r4, #8
   82fe6:	f47f aead 	bne.w	82d44 <_malloc_r+0x134>
   82fea:	e02d      	b.n	83048 <_malloc_r+0x438>
   82fec:	f104 0308 	add.w	r3, r4, #8
   82ff0:	6964      	ldr	r4, [r4, #20]
   82ff2:	42a3      	cmp	r3, r4
   82ff4:	bf08      	it	eq
   82ff6:	f10c 0c02 	addeq.w	ip, ip, #2
   82ffa:	f43f ae67 	beq.w	82ccc <_malloc_r+0xbc>
   82ffe:	e623      	b.n	82c48 <_malloc_r+0x38>
   83000:	4419      	add	r1, r3
   83002:	6848      	ldr	r0, [r1, #4]
   83004:	461c      	mov	r4, r3
   83006:	f854 2f08 	ldr.w	r2, [r4, #8]!
   8300a:	68db      	ldr	r3, [r3, #12]
   8300c:	f040 0501 	orr.w	r5, r0, #1
   83010:	604d      	str	r5, [r1, #4]
   83012:	4630      	mov	r0, r6
   83014:	60d3      	str	r3, [r2, #12]
   83016:	609a      	str	r2, [r3, #8]
   83018:	f000 f9be 	bl	83398 <__malloc_unlock>
   8301c:	e624      	b.n	82c68 <_malloc_r+0x58>
   8301e:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   83022:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83026:	e63b      	b.n	82ca0 <_malloc_r+0x90>
   83028:	098a      	lsrs	r2, r1, #6
   8302a:	3238      	adds	r2, #56	; 0x38
   8302c:	0050      	lsls	r0, r2, #1
   8302e:	e7a8      	b.n	82f82 <_malloc_r+0x372>
   83030:	42bc      	cmp	r4, r7
   83032:	f43f af02 	beq.w	82e3a <_malloc_r+0x22a>
   83036:	68bc      	ldr	r4, [r7, #8]
   83038:	6862      	ldr	r2, [r4, #4]
   8303a:	f022 0203 	bic.w	r2, r2, #3
   8303e:	e761      	b.n	82f04 <_malloc_r+0x2f4>
   83040:	f8d8 8000 	ldr.w	r8, [r8]
   83044:	4598      	cmp	r8, r3
   83046:	d17a      	bne.n	8313e <_malloc_r+0x52e>
   83048:	f01c 0f03 	tst.w	ip, #3
   8304c:	f1a8 0308 	sub.w	r3, r8, #8
   83050:	f10c 3cff 	add.w	ip, ip, #4294967295
   83054:	d1f4      	bne.n	83040 <_malloc_r+0x430>
   83056:	687b      	ldr	r3, [r7, #4]
   83058:	ea23 0300 	bic.w	r3, r3, r0
   8305c:	607b      	str	r3, [r7, #4]
   8305e:	0040      	lsls	r0, r0, #1
   83060:	4298      	cmp	r0, r3
   83062:	f63f aebe 	bhi.w	82de2 <_malloc_r+0x1d2>
   83066:	2800      	cmp	r0, #0
   83068:	f43f aebb 	beq.w	82de2 <_malloc_r+0x1d2>
   8306c:	4203      	tst	r3, r0
   8306e:	46cc      	mov	ip, r9
   83070:	f47f ae64 	bne.w	82d3c <_malloc_r+0x12c>
   83074:	0040      	lsls	r0, r0, #1
   83076:	4203      	tst	r3, r0
   83078:	f10c 0c04 	add.w	ip, ip, #4
   8307c:	d0fa      	beq.n	83074 <_malloc_r+0x464>
   8307e:	e65d      	b.n	82d3c <_malloc_r+0x12c>
   83080:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   83084:	d819      	bhi.n	830ba <_malloc_r+0x4aa>
   83086:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   8308a:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   8308e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83092:	e605      	b.n	82ca0 <_malloc_r+0x90>
   83094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   83098:	e6ee      	b.n	82e78 <_malloc_r+0x268>
   8309a:	2301      	movs	r3, #1
   8309c:	f8c8 3004 	str.w	r3, [r8, #4]
   830a0:	4644      	mov	r4, r8
   830a2:	2200      	movs	r2, #0
   830a4:	e72e      	b.n	82f04 <_malloc_r+0x2f4>
   830a6:	1092      	asrs	r2, r2, #2
   830a8:	2001      	movs	r0, #1
   830aa:	4090      	lsls	r0, r2
   830ac:	f8d8 2004 	ldr.w	r2, [r8, #4]
   830b0:	4619      	mov	r1, r3
   830b2:	4302      	orrs	r2, r0
   830b4:	f8c8 2004 	str.w	r2, [r8, #4]
   830b8:	e775      	b.n	82fa6 <_malloc_r+0x396>
   830ba:	f240 5354 	movw	r3, #1364	; 0x554
   830be:	459c      	cmp	ip, r3
   830c0:	d81b      	bhi.n	830fa <_malloc_r+0x4ea>
   830c2:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   830c6:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   830ca:	ea4f 014c 	mov.w	r1, ip, lsl #1
   830ce:	e5e7      	b.n	82ca0 <_malloc_r+0x90>
   830d0:	f10a 0a10 	add.w	sl, sl, #16
   830d4:	e6a3      	b.n	82e1e <_malloc_r+0x20e>
   830d6:	2b54      	cmp	r3, #84	; 0x54
   830d8:	d81f      	bhi.n	8311a <_malloc_r+0x50a>
   830da:	0b0a      	lsrs	r2, r1, #12
   830dc:	326e      	adds	r2, #110	; 0x6e
   830de:	0050      	lsls	r0, r2, #1
   830e0:	e74f      	b.n	82f82 <_malloc_r+0x372>
   830e2:	f3cb 010b 	ubfx	r1, fp, #0, #12
   830e6:	2900      	cmp	r1, #0
   830e8:	f47f aeb1 	bne.w	82e4e <_malloc_r+0x23e>
   830ec:	eb0a 0109 	add.w	r1, sl, r9
   830f0:	68ba      	ldr	r2, [r7, #8]
   830f2:	f041 0101 	orr.w	r1, r1, #1
   830f6:	6051      	str	r1, [r2, #4]
   830f8:	e6f6      	b.n	82ee8 <_malloc_r+0x2d8>
   830fa:	21fc      	movs	r1, #252	; 0xfc
   830fc:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   83100:	e5ce      	b.n	82ca0 <_malloc_r+0x90>
   83102:	2201      	movs	r2, #1
   83104:	f04f 0a00 	mov.w	sl, #0
   83108:	e6cb      	b.n	82ea2 <_malloc_r+0x292>
   8310a:	f104 0108 	add.w	r1, r4, #8
   8310e:	4630      	mov	r0, r6
   83110:	f7ff fa80 	bl	82614 <_free_r>
   83114:	f8da 3000 	ldr.w	r3, [sl]
   83118:	e6e6      	b.n	82ee8 <_malloc_r+0x2d8>
   8311a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8311e:	d803      	bhi.n	83128 <_malloc_r+0x518>
   83120:	0bca      	lsrs	r2, r1, #15
   83122:	3277      	adds	r2, #119	; 0x77
   83124:	0050      	lsls	r0, r2, #1
   83126:	e72c      	b.n	82f82 <_malloc_r+0x372>
   83128:	f240 5254 	movw	r2, #1364	; 0x554
   8312c:	4293      	cmp	r3, r2
   8312e:	d803      	bhi.n	83138 <_malloc_r+0x528>
   83130:	0c8a      	lsrs	r2, r1, #18
   83132:	327c      	adds	r2, #124	; 0x7c
   83134:	0050      	lsls	r0, r2, #1
   83136:	e724      	b.n	82f82 <_malloc_r+0x372>
   83138:	20fc      	movs	r0, #252	; 0xfc
   8313a:	227e      	movs	r2, #126	; 0x7e
   8313c:	e721      	b.n	82f82 <_malloc_r+0x372>
   8313e:	687b      	ldr	r3, [r7, #4]
   83140:	e78d      	b.n	8305e <_malloc_r+0x44e>
   83142:	bf00      	nop
   83144:	20070580 	.word	0x20070580

00083148 <memchr>:
   83148:	0783      	lsls	r3, r0, #30
   8314a:	b470      	push	{r4, r5, r6}
   8314c:	b2c9      	uxtb	r1, r1
   8314e:	d040      	beq.n	831d2 <memchr+0x8a>
   83150:	1e54      	subs	r4, r2, #1
   83152:	b32a      	cbz	r2, 831a0 <memchr+0x58>
   83154:	7803      	ldrb	r3, [r0, #0]
   83156:	428b      	cmp	r3, r1
   83158:	d023      	beq.n	831a2 <memchr+0x5a>
   8315a:	1c43      	adds	r3, r0, #1
   8315c:	e004      	b.n	83168 <memchr+0x20>
   8315e:	b1fc      	cbz	r4, 831a0 <memchr+0x58>
   83160:	7805      	ldrb	r5, [r0, #0]
   83162:	4614      	mov	r4, r2
   83164:	428d      	cmp	r5, r1
   83166:	d01c      	beq.n	831a2 <memchr+0x5a>
   83168:	f013 0f03 	tst.w	r3, #3
   8316c:	4618      	mov	r0, r3
   8316e:	f104 32ff 	add.w	r2, r4, #4294967295
   83172:	f103 0301 	add.w	r3, r3, #1
   83176:	d1f2      	bne.n	8315e <memchr+0x16>
   83178:	2c03      	cmp	r4, #3
   8317a:	d814      	bhi.n	831a6 <memchr+0x5e>
   8317c:	1e65      	subs	r5, r4, #1
   8317e:	b354      	cbz	r4, 831d6 <memchr+0x8e>
   83180:	7803      	ldrb	r3, [r0, #0]
   83182:	428b      	cmp	r3, r1
   83184:	d00d      	beq.n	831a2 <memchr+0x5a>
   83186:	1c42      	adds	r2, r0, #1
   83188:	2300      	movs	r3, #0
   8318a:	e002      	b.n	83192 <memchr+0x4a>
   8318c:	7804      	ldrb	r4, [r0, #0]
   8318e:	428c      	cmp	r4, r1
   83190:	d007      	beq.n	831a2 <memchr+0x5a>
   83192:	42ab      	cmp	r3, r5
   83194:	4610      	mov	r0, r2
   83196:	f103 0301 	add.w	r3, r3, #1
   8319a:	f102 0201 	add.w	r2, r2, #1
   8319e:	d1f5      	bne.n	8318c <memchr+0x44>
   831a0:	2000      	movs	r0, #0
   831a2:	bc70      	pop	{r4, r5, r6}
   831a4:	4770      	bx	lr
   831a6:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   831aa:	4603      	mov	r3, r0
   831ac:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   831b0:	681a      	ldr	r2, [r3, #0]
   831b2:	4618      	mov	r0, r3
   831b4:	4072      	eors	r2, r6
   831b6:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   831ba:	ea25 0202 	bic.w	r2, r5, r2
   831be:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   831c2:	f103 0304 	add.w	r3, r3, #4
   831c6:	d1d9      	bne.n	8317c <memchr+0x34>
   831c8:	3c04      	subs	r4, #4
   831ca:	2c03      	cmp	r4, #3
   831cc:	4618      	mov	r0, r3
   831ce:	d8ef      	bhi.n	831b0 <memchr+0x68>
   831d0:	e7d4      	b.n	8317c <memchr+0x34>
   831d2:	4614      	mov	r4, r2
   831d4:	e7d0      	b.n	83178 <memchr+0x30>
   831d6:	4620      	mov	r0, r4
   831d8:	e7e3      	b.n	831a2 <memchr+0x5a>
   831da:	bf00      	nop

000831dc <memcpy>:
   831dc:	4684      	mov	ip, r0
   831de:	ea41 0300 	orr.w	r3, r1, r0
   831e2:	f013 0303 	ands.w	r3, r3, #3
   831e6:	d149      	bne.n	8327c <memcpy+0xa0>
   831e8:	3a40      	subs	r2, #64	; 0x40
   831ea:	d323      	bcc.n	83234 <memcpy+0x58>
   831ec:	680b      	ldr	r3, [r1, #0]
   831ee:	6003      	str	r3, [r0, #0]
   831f0:	684b      	ldr	r3, [r1, #4]
   831f2:	6043      	str	r3, [r0, #4]
   831f4:	688b      	ldr	r3, [r1, #8]
   831f6:	6083      	str	r3, [r0, #8]
   831f8:	68cb      	ldr	r3, [r1, #12]
   831fa:	60c3      	str	r3, [r0, #12]
   831fc:	690b      	ldr	r3, [r1, #16]
   831fe:	6103      	str	r3, [r0, #16]
   83200:	694b      	ldr	r3, [r1, #20]
   83202:	6143      	str	r3, [r0, #20]
   83204:	698b      	ldr	r3, [r1, #24]
   83206:	6183      	str	r3, [r0, #24]
   83208:	69cb      	ldr	r3, [r1, #28]
   8320a:	61c3      	str	r3, [r0, #28]
   8320c:	6a0b      	ldr	r3, [r1, #32]
   8320e:	6203      	str	r3, [r0, #32]
   83210:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83212:	6243      	str	r3, [r0, #36]	; 0x24
   83214:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83216:	6283      	str	r3, [r0, #40]	; 0x28
   83218:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8321a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8321c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8321e:	6303      	str	r3, [r0, #48]	; 0x30
   83220:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83222:	6343      	str	r3, [r0, #52]	; 0x34
   83224:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83226:	6383      	str	r3, [r0, #56]	; 0x38
   83228:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8322a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8322c:	3040      	adds	r0, #64	; 0x40
   8322e:	3140      	adds	r1, #64	; 0x40
   83230:	3a40      	subs	r2, #64	; 0x40
   83232:	d2db      	bcs.n	831ec <memcpy+0x10>
   83234:	3230      	adds	r2, #48	; 0x30
   83236:	d30b      	bcc.n	83250 <memcpy+0x74>
   83238:	680b      	ldr	r3, [r1, #0]
   8323a:	6003      	str	r3, [r0, #0]
   8323c:	684b      	ldr	r3, [r1, #4]
   8323e:	6043      	str	r3, [r0, #4]
   83240:	688b      	ldr	r3, [r1, #8]
   83242:	6083      	str	r3, [r0, #8]
   83244:	68cb      	ldr	r3, [r1, #12]
   83246:	60c3      	str	r3, [r0, #12]
   83248:	3010      	adds	r0, #16
   8324a:	3110      	adds	r1, #16
   8324c:	3a10      	subs	r2, #16
   8324e:	d2f3      	bcs.n	83238 <memcpy+0x5c>
   83250:	320c      	adds	r2, #12
   83252:	d305      	bcc.n	83260 <memcpy+0x84>
   83254:	f851 3b04 	ldr.w	r3, [r1], #4
   83258:	f840 3b04 	str.w	r3, [r0], #4
   8325c:	3a04      	subs	r2, #4
   8325e:	d2f9      	bcs.n	83254 <memcpy+0x78>
   83260:	3204      	adds	r2, #4
   83262:	d008      	beq.n	83276 <memcpy+0x9a>
   83264:	07d2      	lsls	r2, r2, #31
   83266:	bf1c      	itt	ne
   83268:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8326c:	f800 3b01 	strbne.w	r3, [r0], #1
   83270:	d301      	bcc.n	83276 <memcpy+0x9a>
   83272:	880b      	ldrh	r3, [r1, #0]
   83274:	8003      	strh	r3, [r0, #0]
   83276:	4660      	mov	r0, ip
   83278:	4770      	bx	lr
   8327a:	bf00      	nop
   8327c:	2a08      	cmp	r2, #8
   8327e:	d313      	bcc.n	832a8 <memcpy+0xcc>
   83280:	078b      	lsls	r3, r1, #30
   83282:	d0b1      	beq.n	831e8 <memcpy+0xc>
   83284:	f010 0303 	ands.w	r3, r0, #3
   83288:	d0ae      	beq.n	831e8 <memcpy+0xc>
   8328a:	f1c3 0304 	rsb	r3, r3, #4
   8328e:	1ad2      	subs	r2, r2, r3
   83290:	07db      	lsls	r3, r3, #31
   83292:	bf1c      	itt	ne
   83294:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83298:	f800 3b01 	strbne.w	r3, [r0], #1
   8329c:	d3a4      	bcc.n	831e8 <memcpy+0xc>
   8329e:	f831 3b02 	ldrh.w	r3, [r1], #2
   832a2:	f820 3b02 	strh.w	r3, [r0], #2
   832a6:	e79f      	b.n	831e8 <memcpy+0xc>
   832a8:	3a04      	subs	r2, #4
   832aa:	d3d9      	bcc.n	83260 <memcpy+0x84>
   832ac:	3a01      	subs	r2, #1
   832ae:	f811 3b01 	ldrb.w	r3, [r1], #1
   832b2:	f800 3b01 	strb.w	r3, [r0], #1
   832b6:	d2f9      	bcs.n	832ac <memcpy+0xd0>
   832b8:	780b      	ldrb	r3, [r1, #0]
   832ba:	7003      	strb	r3, [r0, #0]
   832bc:	784b      	ldrb	r3, [r1, #1]
   832be:	7043      	strb	r3, [r0, #1]
   832c0:	788b      	ldrb	r3, [r1, #2]
   832c2:	7083      	strb	r3, [r0, #2]
   832c4:	4660      	mov	r0, ip
   832c6:	4770      	bx	lr

000832c8 <memmove>:
   832c8:	4288      	cmp	r0, r1
   832ca:	b4f0      	push	{r4, r5, r6, r7}
   832cc:	d910      	bls.n	832f0 <memmove+0x28>
   832ce:	188c      	adds	r4, r1, r2
   832d0:	42a0      	cmp	r0, r4
   832d2:	d20d      	bcs.n	832f0 <memmove+0x28>
   832d4:	1885      	adds	r5, r0, r2
   832d6:	1e53      	subs	r3, r2, #1
   832d8:	b142      	cbz	r2, 832ec <memmove+0x24>
   832da:	4621      	mov	r1, r4
   832dc:	462a      	mov	r2, r5
   832de:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   832e2:	3b01      	subs	r3, #1
   832e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   832e8:	1c5c      	adds	r4, r3, #1
   832ea:	d1f8      	bne.n	832de <memmove+0x16>
   832ec:	bcf0      	pop	{r4, r5, r6, r7}
   832ee:	4770      	bx	lr
   832f0:	2a0f      	cmp	r2, #15
   832f2:	d944      	bls.n	8337e <memmove+0xb6>
   832f4:	ea40 0301 	orr.w	r3, r0, r1
   832f8:	079b      	lsls	r3, r3, #30
   832fa:	d144      	bne.n	83386 <memmove+0xbe>
   832fc:	f1a2 0710 	sub.w	r7, r2, #16
   83300:	093f      	lsrs	r7, r7, #4
   83302:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   83306:	3610      	adds	r6, #16
   83308:	460c      	mov	r4, r1
   8330a:	4603      	mov	r3, r0
   8330c:	6825      	ldr	r5, [r4, #0]
   8330e:	3310      	adds	r3, #16
   83310:	f843 5c10 	str.w	r5, [r3, #-16]
   83314:	6865      	ldr	r5, [r4, #4]
   83316:	3410      	adds	r4, #16
   83318:	f843 5c0c 	str.w	r5, [r3, #-12]
   8331c:	f854 5c08 	ldr.w	r5, [r4, #-8]
   83320:	f843 5c08 	str.w	r5, [r3, #-8]
   83324:	f854 5c04 	ldr.w	r5, [r4, #-4]
   83328:	f843 5c04 	str.w	r5, [r3, #-4]
   8332c:	42b3      	cmp	r3, r6
   8332e:	d1ed      	bne.n	8330c <memmove+0x44>
   83330:	1c7b      	adds	r3, r7, #1
   83332:	f002 0c0f 	and.w	ip, r2, #15
   83336:	011b      	lsls	r3, r3, #4
   83338:	f1bc 0f03 	cmp.w	ip, #3
   8333c:	4419      	add	r1, r3
   8333e:	4403      	add	r3, r0
   83340:	d923      	bls.n	8338a <memmove+0xc2>
   83342:	460e      	mov	r6, r1
   83344:	461d      	mov	r5, r3
   83346:	4664      	mov	r4, ip
   83348:	f856 7b04 	ldr.w	r7, [r6], #4
   8334c:	3c04      	subs	r4, #4
   8334e:	2c03      	cmp	r4, #3
   83350:	f845 7b04 	str.w	r7, [r5], #4
   83354:	d8f8      	bhi.n	83348 <memmove+0x80>
   83356:	f1ac 0404 	sub.w	r4, ip, #4
   8335a:	f024 0403 	bic.w	r4, r4, #3
   8335e:	3404      	adds	r4, #4
   83360:	f002 0203 	and.w	r2, r2, #3
   83364:	4423      	add	r3, r4
   83366:	4421      	add	r1, r4
   83368:	2a00      	cmp	r2, #0
   8336a:	d0bf      	beq.n	832ec <memmove+0x24>
   8336c:	441a      	add	r2, r3
   8336e:	f811 4b01 	ldrb.w	r4, [r1], #1
   83372:	f803 4b01 	strb.w	r4, [r3], #1
   83376:	4293      	cmp	r3, r2
   83378:	d1f9      	bne.n	8336e <memmove+0xa6>
   8337a:	bcf0      	pop	{r4, r5, r6, r7}
   8337c:	4770      	bx	lr
   8337e:	4603      	mov	r3, r0
   83380:	2a00      	cmp	r2, #0
   83382:	d1f3      	bne.n	8336c <memmove+0xa4>
   83384:	e7b2      	b.n	832ec <memmove+0x24>
   83386:	4603      	mov	r3, r0
   83388:	e7f0      	b.n	8336c <memmove+0xa4>
   8338a:	4662      	mov	r2, ip
   8338c:	2a00      	cmp	r2, #0
   8338e:	d1ed      	bne.n	8336c <memmove+0xa4>
   83390:	e7ac      	b.n	832ec <memmove+0x24>
   83392:	bf00      	nop

00083394 <__malloc_lock>:
   83394:	4770      	bx	lr
   83396:	bf00      	nop

00083398 <__malloc_unlock>:
   83398:	4770      	bx	lr
   8339a:	bf00      	nop

0008339c <_realloc_r>:
   8339c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   833a0:	460c      	mov	r4, r1
   833a2:	b083      	sub	sp, #12
   833a4:	4690      	mov	r8, r2
   833a6:	4681      	mov	r9, r0
   833a8:	2900      	cmp	r1, #0
   833aa:	f000 80ba 	beq.w	83522 <_realloc_r+0x186>
   833ae:	f7ff fff1 	bl	83394 <__malloc_lock>
   833b2:	f108 060b 	add.w	r6, r8, #11
   833b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   833ba:	2e16      	cmp	r6, #22
   833bc:	f023 0503 	bic.w	r5, r3, #3
   833c0:	f1a4 0708 	sub.w	r7, r4, #8
   833c4:	d84b      	bhi.n	8345e <_realloc_r+0xc2>
   833c6:	2110      	movs	r1, #16
   833c8:	460e      	mov	r6, r1
   833ca:	45b0      	cmp	r8, r6
   833cc:	d84c      	bhi.n	83468 <_realloc_r+0xcc>
   833ce:	428d      	cmp	r5, r1
   833d0:	da51      	bge.n	83476 <_realloc_r+0xda>
   833d2:	f8df b384 	ldr.w	fp, [pc, #900]	; 83758 <_realloc_r+0x3bc>
   833d6:	1978      	adds	r0, r7, r5
   833d8:	f8db e008 	ldr.w	lr, [fp, #8]
   833dc:	4586      	cmp	lr, r0
   833de:	f000 80a6 	beq.w	8352e <_realloc_r+0x192>
   833e2:	6842      	ldr	r2, [r0, #4]
   833e4:	f022 0c01 	bic.w	ip, r2, #1
   833e8:	4484      	add	ip, r0
   833ea:	f8dc c004 	ldr.w	ip, [ip, #4]
   833ee:	f01c 0f01 	tst.w	ip, #1
   833f2:	d054      	beq.n	8349e <_realloc_r+0x102>
   833f4:	2200      	movs	r2, #0
   833f6:	4610      	mov	r0, r2
   833f8:	07db      	lsls	r3, r3, #31
   833fa:	d46f      	bmi.n	834dc <_realloc_r+0x140>
   833fc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83400:	ebc3 0a07 	rsb	sl, r3, r7
   83404:	f8da 3004 	ldr.w	r3, [sl, #4]
   83408:	f023 0303 	bic.w	r3, r3, #3
   8340c:	442b      	add	r3, r5
   8340e:	2800      	cmp	r0, #0
   83410:	d062      	beq.n	834d8 <_realloc_r+0x13c>
   83412:	4570      	cmp	r0, lr
   83414:	f000 80e9 	beq.w	835ea <_realloc_r+0x24e>
   83418:	eb02 0e03 	add.w	lr, r2, r3
   8341c:	458e      	cmp	lr, r1
   8341e:	db5b      	blt.n	834d8 <_realloc_r+0x13c>
   83420:	68c3      	ldr	r3, [r0, #12]
   83422:	6882      	ldr	r2, [r0, #8]
   83424:	46d0      	mov	r8, sl
   83426:	60d3      	str	r3, [r2, #12]
   83428:	609a      	str	r2, [r3, #8]
   8342a:	f858 1f08 	ldr.w	r1, [r8, #8]!
   8342e:	f8da 300c 	ldr.w	r3, [sl, #12]
   83432:	1f2a      	subs	r2, r5, #4
   83434:	2a24      	cmp	r2, #36	; 0x24
   83436:	60cb      	str	r3, [r1, #12]
   83438:	6099      	str	r1, [r3, #8]
   8343a:	f200 8123 	bhi.w	83684 <_realloc_r+0x2e8>
   8343e:	2a13      	cmp	r2, #19
   83440:	f240 80b0 	bls.w	835a4 <_realloc_r+0x208>
   83444:	6823      	ldr	r3, [r4, #0]
   83446:	2a1b      	cmp	r2, #27
   83448:	f8ca 3008 	str.w	r3, [sl, #8]
   8344c:	6863      	ldr	r3, [r4, #4]
   8344e:	f8ca 300c 	str.w	r3, [sl, #12]
   83452:	f200 812b 	bhi.w	836ac <_realloc_r+0x310>
   83456:	3408      	adds	r4, #8
   83458:	f10a 0310 	add.w	r3, sl, #16
   8345c:	e0a3      	b.n	835a6 <_realloc_r+0x20a>
   8345e:	f026 0607 	bic.w	r6, r6, #7
   83462:	2e00      	cmp	r6, #0
   83464:	4631      	mov	r1, r6
   83466:	dab0      	bge.n	833ca <_realloc_r+0x2e>
   83468:	230c      	movs	r3, #12
   8346a:	2000      	movs	r0, #0
   8346c:	f8c9 3000 	str.w	r3, [r9]
   83470:	b003      	add	sp, #12
   83472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83476:	46a0      	mov	r8, r4
   83478:	1baa      	subs	r2, r5, r6
   8347a:	2a0f      	cmp	r2, #15
   8347c:	f003 0301 	and.w	r3, r3, #1
   83480:	d81a      	bhi.n	834b8 <_realloc_r+0x11c>
   83482:	432b      	orrs	r3, r5
   83484:	607b      	str	r3, [r7, #4]
   83486:	443d      	add	r5, r7
   83488:	686b      	ldr	r3, [r5, #4]
   8348a:	f043 0301 	orr.w	r3, r3, #1
   8348e:	606b      	str	r3, [r5, #4]
   83490:	4648      	mov	r0, r9
   83492:	f7ff ff81 	bl	83398 <__malloc_unlock>
   83496:	4640      	mov	r0, r8
   83498:	b003      	add	sp, #12
   8349a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8349e:	f022 0203 	bic.w	r2, r2, #3
   834a2:	eb02 0c05 	add.w	ip, r2, r5
   834a6:	458c      	cmp	ip, r1
   834a8:	dba6      	blt.n	833f8 <_realloc_r+0x5c>
   834aa:	68c2      	ldr	r2, [r0, #12]
   834ac:	6881      	ldr	r1, [r0, #8]
   834ae:	46a0      	mov	r8, r4
   834b0:	60ca      	str	r2, [r1, #12]
   834b2:	4665      	mov	r5, ip
   834b4:	6091      	str	r1, [r2, #8]
   834b6:	e7df      	b.n	83478 <_realloc_r+0xdc>
   834b8:	19b9      	adds	r1, r7, r6
   834ba:	4333      	orrs	r3, r6
   834bc:	f042 0001 	orr.w	r0, r2, #1
   834c0:	607b      	str	r3, [r7, #4]
   834c2:	440a      	add	r2, r1
   834c4:	6048      	str	r0, [r1, #4]
   834c6:	6853      	ldr	r3, [r2, #4]
   834c8:	3108      	adds	r1, #8
   834ca:	f043 0301 	orr.w	r3, r3, #1
   834ce:	6053      	str	r3, [r2, #4]
   834d0:	4648      	mov	r0, r9
   834d2:	f7ff f89f 	bl	82614 <_free_r>
   834d6:	e7db      	b.n	83490 <_realloc_r+0xf4>
   834d8:	428b      	cmp	r3, r1
   834da:	da33      	bge.n	83544 <_realloc_r+0x1a8>
   834dc:	4641      	mov	r1, r8
   834de:	4648      	mov	r0, r9
   834e0:	f7ff fb96 	bl	82c10 <_malloc_r>
   834e4:	4680      	mov	r8, r0
   834e6:	2800      	cmp	r0, #0
   834e8:	d0d2      	beq.n	83490 <_realloc_r+0xf4>
   834ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
   834ee:	f1a0 0108 	sub.w	r1, r0, #8
   834f2:	f023 0201 	bic.w	r2, r3, #1
   834f6:	443a      	add	r2, r7
   834f8:	4291      	cmp	r1, r2
   834fa:	f000 80bc 	beq.w	83676 <_realloc_r+0x2da>
   834fe:	1f2a      	subs	r2, r5, #4
   83500:	2a24      	cmp	r2, #36	; 0x24
   83502:	d86e      	bhi.n	835e2 <_realloc_r+0x246>
   83504:	2a13      	cmp	r2, #19
   83506:	d842      	bhi.n	8358e <_realloc_r+0x1f2>
   83508:	4603      	mov	r3, r0
   8350a:	4622      	mov	r2, r4
   8350c:	6811      	ldr	r1, [r2, #0]
   8350e:	6019      	str	r1, [r3, #0]
   83510:	6851      	ldr	r1, [r2, #4]
   83512:	6059      	str	r1, [r3, #4]
   83514:	6892      	ldr	r2, [r2, #8]
   83516:	609a      	str	r2, [r3, #8]
   83518:	4621      	mov	r1, r4
   8351a:	4648      	mov	r0, r9
   8351c:	f7ff f87a 	bl	82614 <_free_r>
   83520:	e7b6      	b.n	83490 <_realloc_r+0xf4>
   83522:	4611      	mov	r1, r2
   83524:	b003      	add	sp, #12
   83526:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8352a:	f7ff bb71 	b.w	82c10 <_malloc_r>
   8352e:	f8de 2004 	ldr.w	r2, [lr, #4]
   83532:	f106 0c10 	add.w	ip, r6, #16
   83536:	f022 0203 	bic.w	r2, r2, #3
   8353a:	1950      	adds	r0, r2, r5
   8353c:	4560      	cmp	r0, ip
   8353e:	da3d      	bge.n	835bc <_realloc_r+0x220>
   83540:	4670      	mov	r0, lr
   83542:	e759      	b.n	833f8 <_realloc_r+0x5c>
   83544:	46d0      	mov	r8, sl
   83546:	f858 0f08 	ldr.w	r0, [r8, #8]!
   8354a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8354e:	1f2a      	subs	r2, r5, #4
   83550:	2a24      	cmp	r2, #36	; 0x24
   83552:	60c1      	str	r1, [r0, #12]
   83554:	6088      	str	r0, [r1, #8]
   83556:	f200 80a0 	bhi.w	8369a <_realloc_r+0x2fe>
   8355a:	2a13      	cmp	r2, #19
   8355c:	f240 809b 	bls.w	83696 <_realloc_r+0x2fa>
   83560:	6821      	ldr	r1, [r4, #0]
   83562:	2a1b      	cmp	r2, #27
   83564:	f8ca 1008 	str.w	r1, [sl, #8]
   83568:	6861      	ldr	r1, [r4, #4]
   8356a:	f8ca 100c 	str.w	r1, [sl, #12]
   8356e:	f200 80b2 	bhi.w	836d6 <_realloc_r+0x33a>
   83572:	3408      	adds	r4, #8
   83574:	f10a 0210 	add.w	r2, sl, #16
   83578:	6821      	ldr	r1, [r4, #0]
   8357a:	461d      	mov	r5, r3
   8357c:	6011      	str	r1, [r2, #0]
   8357e:	6861      	ldr	r1, [r4, #4]
   83580:	4657      	mov	r7, sl
   83582:	6051      	str	r1, [r2, #4]
   83584:	68a3      	ldr	r3, [r4, #8]
   83586:	6093      	str	r3, [r2, #8]
   83588:	f8da 3004 	ldr.w	r3, [sl, #4]
   8358c:	e774      	b.n	83478 <_realloc_r+0xdc>
   8358e:	6823      	ldr	r3, [r4, #0]
   83590:	2a1b      	cmp	r2, #27
   83592:	6003      	str	r3, [r0, #0]
   83594:	6863      	ldr	r3, [r4, #4]
   83596:	6043      	str	r3, [r0, #4]
   83598:	d862      	bhi.n	83660 <_realloc_r+0x2c4>
   8359a:	f100 0308 	add.w	r3, r0, #8
   8359e:	f104 0208 	add.w	r2, r4, #8
   835a2:	e7b3      	b.n	8350c <_realloc_r+0x170>
   835a4:	4643      	mov	r3, r8
   835a6:	6822      	ldr	r2, [r4, #0]
   835a8:	4675      	mov	r5, lr
   835aa:	601a      	str	r2, [r3, #0]
   835ac:	6862      	ldr	r2, [r4, #4]
   835ae:	4657      	mov	r7, sl
   835b0:	605a      	str	r2, [r3, #4]
   835b2:	68a2      	ldr	r2, [r4, #8]
   835b4:	609a      	str	r2, [r3, #8]
   835b6:	f8da 3004 	ldr.w	r3, [sl, #4]
   835ba:	e75d      	b.n	83478 <_realloc_r+0xdc>
   835bc:	1b83      	subs	r3, r0, r6
   835be:	4437      	add	r7, r6
   835c0:	f043 0301 	orr.w	r3, r3, #1
   835c4:	f8cb 7008 	str.w	r7, [fp, #8]
   835c8:	607b      	str	r3, [r7, #4]
   835ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
   835ce:	4648      	mov	r0, r9
   835d0:	f003 0301 	and.w	r3, r3, #1
   835d4:	431e      	orrs	r6, r3
   835d6:	f844 6c04 	str.w	r6, [r4, #-4]
   835da:	f7ff fedd 	bl	83398 <__malloc_unlock>
   835de:	4620      	mov	r0, r4
   835e0:	e75a      	b.n	83498 <_realloc_r+0xfc>
   835e2:	4621      	mov	r1, r4
   835e4:	f7ff fe70 	bl	832c8 <memmove>
   835e8:	e796      	b.n	83518 <_realloc_r+0x17c>
   835ea:	eb02 0c03 	add.w	ip, r2, r3
   835ee:	f106 0210 	add.w	r2, r6, #16
   835f2:	4594      	cmp	ip, r2
   835f4:	f6ff af70 	blt.w	834d8 <_realloc_r+0x13c>
   835f8:	4657      	mov	r7, sl
   835fa:	f857 1f08 	ldr.w	r1, [r7, #8]!
   835fe:	f8da 300c 	ldr.w	r3, [sl, #12]
   83602:	1f2a      	subs	r2, r5, #4
   83604:	2a24      	cmp	r2, #36	; 0x24
   83606:	60cb      	str	r3, [r1, #12]
   83608:	6099      	str	r1, [r3, #8]
   8360a:	f200 8086 	bhi.w	8371a <_realloc_r+0x37e>
   8360e:	2a13      	cmp	r2, #19
   83610:	d977      	bls.n	83702 <_realloc_r+0x366>
   83612:	6823      	ldr	r3, [r4, #0]
   83614:	2a1b      	cmp	r2, #27
   83616:	f8ca 3008 	str.w	r3, [sl, #8]
   8361a:	6863      	ldr	r3, [r4, #4]
   8361c:	f8ca 300c 	str.w	r3, [sl, #12]
   83620:	f200 8084 	bhi.w	8372c <_realloc_r+0x390>
   83624:	3408      	adds	r4, #8
   83626:	f10a 0310 	add.w	r3, sl, #16
   8362a:	6822      	ldr	r2, [r4, #0]
   8362c:	601a      	str	r2, [r3, #0]
   8362e:	6862      	ldr	r2, [r4, #4]
   83630:	605a      	str	r2, [r3, #4]
   83632:	68a2      	ldr	r2, [r4, #8]
   83634:	609a      	str	r2, [r3, #8]
   83636:	ebc6 020c 	rsb	r2, r6, ip
   8363a:	eb0a 0306 	add.w	r3, sl, r6
   8363e:	f042 0201 	orr.w	r2, r2, #1
   83642:	f8cb 3008 	str.w	r3, [fp, #8]
   83646:	605a      	str	r2, [r3, #4]
   83648:	f8da 3004 	ldr.w	r3, [sl, #4]
   8364c:	4648      	mov	r0, r9
   8364e:	f003 0301 	and.w	r3, r3, #1
   83652:	431e      	orrs	r6, r3
   83654:	f8ca 6004 	str.w	r6, [sl, #4]
   83658:	f7ff fe9e 	bl	83398 <__malloc_unlock>
   8365c:	4638      	mov	r0, r7
   8365e:	e71b      	b.n	83498 <_realloc_r+0xfc>
   83660:	68a3      	ldr	r3, [r4, #8]
   83662:	2a24      	cmp	r2, #36	; 0x24
   83664:	6083      	str	r3, [r0, #8]
   83666:	68e3      	ldr	r3, [r4, #12]
   83668:	60c3      	str	r3, [r0, #12]
   8366a:	d02b      	beq.n	836c4 <_realloc_r+0x328>
   8366c:	f100 0310 	add.w	r3, r0, #16
   83670:	f104 0210 	add.w	r2, r4, #16
   83674:	e74a      	b.n	8350c <_realloc_r+0x170>
   83676:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8367a:	46a0      	mov	r8, r4
   8367c:	f022 0203 	bic.w	r2, r2, #3
   83680:	4415      	add	r5, r2
   83682:	e6f9      	b.n	83478 <_realloc_r+0xdc>
   83684:	4621      	mov	r1, r4
   83686:	4640      	mov	r0, r8
   83688:	4675      	mov	r5, lr
   8368a:	4657      	mov	r7, sl
   8368c:	f7ff fe1c 	bl	832c8 <memmove>
   83690:	f8da 3004 	ldr.w	r3, [sl, #4]
   83694:	e6f0      	b.n	83478 <_realloc_r+0xdc>
   83696:	4642      	mov	r2, r8
   83698:	e76e      	b.n	83578 <_realloc_r+0x1dc>
   8369a:	4621      	mov	r1, r4
   8369c:	4640      	mov	r0, r8
   8369e:	461d      	mov	r5, r3
   836a0:	4657      	mov	r7, sl
   836a2:	f7ff fe11 	bl	832c8 <memmove>
   836a6:	f8da 3004 	ldr.w	r3, [sl, #4]
   836aa:	e6e5      	b.n	83478 <_realloc_r+0xdc>
   836ac:	68a3      	ldr	r3, [r4, #8]
   836ae:	2a24      	cmp	r2, #36	; 0x24
   836b0:	f8ca 3010 	str.w	r3, [sl, #16]
   836b4:	68e3      	ldr	r3, [r4, #12]
   836b6:	f8ca 3014 	str.w	r3, [sl, #20]
   836ba:	d018      	beq.n	836ee <_realloc_r+0x352>
   836bc:	3410      	adds	r4, #16
   836be:	f10a 0318 	add.w	r3, sl, #24
   836c2:	e770      	b.n	835a6 <_realloc_r+0x20a>
   836c4:	6922      	ldr	r2, [r4, #16]
   836c6:	f100 0318 	add.w	r3, r0, #24
   836ca:	6102      	str	r2, [r0, #16]
   836cc:	6961      	ldr	r1, [r4, #20]
   836ce:	f104 0218 	add.w	r2, r4, #24
   836d2:	6141      	str	r1, [r0, #20]
   836d4:	e71a      	b.n	8350c <_realloc_r+0x170>
   836d6:	68a1      	ldr	r1, [r4, #8]
   836d8:	2a24      	cmp	r2, #36	; 0x24
   836da:	f8ca 1010 	str.w	r1, [sl, #16]
   836de:	68e1      	ldr	r1, [r4, #12]
   836e0:	f8ca 1014 	str.w	r1, [sl, #20]
   836e4:	d00f      	beq.n	83706 <_realloc_r+0x36a>
   836e6:	3410      	adds	r4, #16
   836e8:	f10a 0218 	add.w	r2, sl, #24
   836ec:	e744      	b.n	83578 <_realloc_r+0x1dc>
   836ee:	6922      	ldr	r2, [r4, #16]
   836f0:	f10a 0320 	add.w	r3, sl, #32
   836f4:	f8ca 2018 	str.w	r2, [sl, #24]
   836f8:	6962      	ldr	r2, [r4, #20]
   836fa:	3418      	adds	r4, #24
   836fc:	f8ca 201c 	str.w	r2, [sl, #28]
   83700:	e751      	b.n	835a6 <_realloc_r+0x20a>
   83702:	463b      	mov	r3, r7
   83704:	e791      	b.n	8362a <_realloc_r+0x28e>
   83706:	6921      	ldr	r1, [r4, #16]
   83708:	f10a 0220 	add.w	r2, sl, #32
   8370c:	f8ca 1018 	str.w	r1, [sl, #24]
   83710:	6961      	ldr	r1, [r4, #20]
   83712:	3418      	adds	r4, #24
   83714:	f8ca 101c 	str.w	r1, [sl, #28]
   83718:	e72e      	b.n	83578 <_realloc_r+0x1dc>
   8371a:	4621      	mov	r1, r4
   8371c:	4638      	mov	r0, r7
   8371e:	f8cd c004 	str.w	ip, [sp, #4]
   83722:	f7ff fdd1 	bl	832c8 <memmove>
   83726:	f8dd c004 	ldr.w	ip, [sp, #4]
   8372a:	e784      	b.n	83636 <_realloc_r+0x29a>
   8372c:	68a3      	ldr	r3, [r4, #8]
   8372e:	2a24      	cmp	r2, #36	; 0x24
   83730:	f8ca 3010 	str.w	r3, [sl, #16]
   83734:	68e3      	ldr	r3, [r4, #12]
   83736:	f8ca 3014 	str.w	r3, [sl, #20]
   8373a:	d003      	beq.n	83744 <_realloc_r+0x3a8>
   8373c:	3410      	adds	r4, #16
   8373e:	f10a 0318 	add.w	r3, sl, #24
   83742:	e772      	b.n	8362a <_realloc_r+0x28e>
   83744:	6922      	ldr	r2, [r4, #16]
   83746:	f10a 0320 	add.w	r3, sl, #32
   8374a:	f8ca 2018 	str.w	r2, [sl, #24]
   8374e:	6962      	ldr	r2, [r4, #20]
   83750:	3418      	adds	r4, #24
   83752:	f8ca 201c 	str.w	r2, [sl, #28]
   83756:	e768      	b.n	8362a <_realloc_r+0x28e>
   83758:	20070580 	.word	0x20070580

0008375c <_sbrk_r>:
   8375c:	b538      	push	{r3, r4, r5, lr}
   8375e:	4c07      	ldr	r4, [pc, #28]	; (8377c <_sbrk_r+0x20>)
   83760:	2300      	movs	r3, #0
   83762:	4605      	mov	r5, r0
   83764:	4608      	mov	r0, r1
   83766:	6023      	str	r3, [r4, #0]
   83768:	f7fd f9d0 	bl	80b0c <_sbrk>
   8376c:	1c43      	adds	r3, r0, #1
   8376e:	d000      	beq.n	83772 <_sbrk_r+0x16>
   83770:	bd38      	pop	{r3, r4, r5, pc}
   83772:	6823      	ldr	r3, [r4, #0]
   83774:	2b00      	cmp	r3, #0
   83776:	d0fb      	beq.n	83770 <_sbrk_r+0x14>
   83778:	602b      	str	r3, [r5, #0]
   8377a:	bd38      	pop	{r3, r4, r5, pc}
   8377c:	20070a64 	.word	0x20070a64

00083780 <__sread>:
   83780:	b510      	push	{r4, lr}
   83782:	460c      	mov	r4, r1
   83784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83788:	f000 f99e 	bl	83ac8 <_read_r>
   8378c:	2800      	cmp	r0, #0
   8378e:	db03      	blt.n	83798 <__sread+0x18>
   83790:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83792:	4403      	add	r3, r0
   83794:	6523      	str	r3, [r4, #80]	; 0x50
   83796:	bd10      	pop	{r4, pc}
   83798:	89a3      	ldrh	r3, [r4, #12]
   8379a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8379e:	81a3      	strh	r3, [r4, #12]
   837a0:	bd10      	pop	{r4, pc}
   837a2:	bf00      	nop

000837a4 <__swrite>:
   837a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   837a8:	460c      	mov	r4, r1
   837aa:	8989      	ldrh	r1, [r1, #12]
   837ac:	461d      	mov	r5, r3
   837ae:	05cb      	lsls	r3, r1, #23
   837b0:	4616      	mov	r6, r2
   837b2:	4607      	mov	r7, r0
   837b4:	d506      	bpl.n	837c4 <__swrite+0x20>
   837b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   837ba:	2200      	movs	r2, #0
   837bc:	2302      	movs	r3, #2
   837be:	f000 f96f 	bl	83aa0 <_lseek_r>
   837c2:	89a1      	ldrh	r1, [r4, #12]
   837c4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   837c8:	81a1      	strh	r1, [r4, #12]
   837ca:	4638      	mov	r0, r7
   837cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   837d0:	4632      	mov	r2, r6
   837d2:	462b      	mov	r3, r5
   837d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   837d8:	f000 b87a 	b.w	838d0 <_write_r>

000837dc <__sseek>:
   837dc:	b510      	push	{r4, lr}
   837de:	460c      	mov	r4, r1
   837e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   837e4:	f000 f95c 	bl	83aa0 <_lseek_r>
   837e8:	89a3      	ldrh	r3, [r4, #12]
   837ea:	1c42      	adds	r2, r0, #1
   837ec:	bf0e      	itee	eq
   837ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   837f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   837f6:	6520      	strne	r0, [r4, #80]	; 0x50
   837f8:	81a3      	strh	r3, [r4, #12]
   837fa:	bd10      	pop	{r4, pc}

000837fc <__sclose>:
   837fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83800:	f000 b8ce 	b.w	839a0 <_close_r>

00083804 <strlen>:
   83804:	f020 0103 	bic.w	r1, r0, #3
   83808:	f010 0003 	ands.w	r0, r0, #3
   8380c:	f1c0 0000 	rsb	r0, r0, #0
   83810:	f851 3b04 	ldr.w	r3, [r1], #4
   83814:	f100 0c04 	add.w	ip, r0, #4
   83818:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8381c:	f06f 0200 	mvn.w	r2, #0
   83820:	bf1c      	itt	ne
   83822:	fa22 f20c 	lsrne.w	r2, r2, ip
   83826:	4313      	orrne	r3, r2
   83828:	f04f 0c01 	mov.w	ip, #1
   8382c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83830:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83834:	eba3 020c 	sub.w	r2, r3, ip
   83838:	ea22 0203 	bic.w	r2, r2, r3
   8383c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83840:	bf04      	itt	eq
   83842:	f851 3b04 	ldreq.w	r3, [r1], #4
   83846:	3004      	addeq	r0, #4
   83848:	d0f4      	beq.n	83834 <strlen+0x30>
   8384a:	f013 0fff 	tst.w	r3, #255	; 0xff
   8384e:	bf1f      	itttt	ne
   83850:	3001      	addne	r0, #1
   83852:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   83856:	3001      	addne	r0, #1
   83858:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   8385c:	bf18      	it	ne
   8385e:	3001      	addne	r0, #1
   83860:	4770      	bx	lr
   83862:	bf00      	nop

00083864 <_wcrtomb_r>:
   83864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83868:	461e      	mov	r6, r3
   8386a:	b086      	sub	sp, #24
   8386c:	460c      	mov	r4, r1
   8386e:	4605      	mov	r5, r0
   83870:	4617      	mov	r7, r2
   83872:	4b0f      	ldr	r3, [pc, #60]	; (838b0 <_wcrtomb_r+0x4c>)
   83874:	b191      	cbz	r1, 8389c <_wcrtomb_r+0x38>
   83876:	f8d3 8000 	ldr.w	r8, [r3]
   8387a:	f7ff f947 	bl	82b0c <__locale_charset>
   8387e:	9600      	str	r6, [sp, #0]
   83880:	4603      	mov	r3, r0
   83882:	4621      	mov	r1, r4
   83884:	463a      	mov	r2, r7
   83886:	4628      	mov	r0, r5
   83888:	47c0      	blx	r8
   8388a:	1c43      	adds	r3, r0, #1
   8388c:	d103      	bne.n	83896 <_wcrtomb_r+0x32>
   8388e:	2200      	movs	r2, #0
   83890:	238a      	movs	r3, #138	; 0x8a
   83892:	6032      	str	r2, [r6, #0]
   83894:	602b      	str	r3, [r5, #0]
   83896:	b006      	add	sp, #24
   83898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8389c:	681f      	ldr	r7, [r3, #0]
   8389e:	f7ff f935 	bl	82b0c <__locale_charset>
   838a2:	9600      	str	r6, [sp, #0]
   838a4:	4603      	mov	r3, r0
   838a6:	4622      	mov	r2, r4
   838a8:	4628      	mov	r0, r5
   838aa:	a903      	add	r1, sp, #12
   838ac:	47b8      	blx	r7
   838ae:	e7ec      	b.n	8388a <_wcrtomb_r+0x26>
   838b0:	20070990 	.word	0x20070990

000838b4 <__ascii_wctomb>:
   838b4:	b121      	cbz	r1, 838c0 <__ascii_wctomb+0xc>
   838b6:	2aff      	cmp	r2, #255	; 0xff
   838b8:	d804      	bhi.n	838c4 <__ascii_wctomb+0x10>
   838ba:	700a      	strb	r2, [r1, #0]
   838bc:	2001      	movs	r0, #1
   838be:	4770      	bx	lr
   838c0:	4608      	mov	r0, r1
   838c2:	4770      	bx	lr
   838c4:	238a      	movs	r3, #138	; 0x8a
   838c6:	6003      	str	r3, [r0, #0]
   838c8:	f04f 30ff 	mov.w	r0, #4294967295
   838cc:	4770      	bx	lr
   838ce:	bf00      	nop

000838d0 <_write_r>:
   838d0:	b570      	push	{r4, r5, r6, lr}
   838d2:	4c08      	ldr	r4, [pc, #32]	; (838f4 <_write_r+0x24>)
   838d4:	4606      	mov	r6, r0
   838d6:	2500      	movs	r5, #0
   838d8:	4608      	mov	r0, r1
   838da:	4611      	mov	r1, r2
   838dc:	461a      	mov	r2, r3
   838de:	6025      	str	r5, [r4, #0]
   838e0:	f7fc fd54 	bl	8038c <_write>
   838e4:	1c43      	adds	r3, r0, #1
   838e6:	d000      	beq.n	838ea <_write_r+0x1a>
   838e8:	bd70      	pop	{r4, r5, r6, pc}
   838ea:	6823      	ldr	r3, [r4, #0]
   838ec:	2b00      	cmp	r3, #0
   838ee:	d0fb      	beq.n	838e8 <_write_r+0x18>
   838f0:	6033      	str	r3, [r6, #0]
   838f2:	bd70      	pop	{r4, r5, r6, pc}
   838f4:	20070a64 	.word	0x20070a64

000838f8 <__register_exitproc>:
   838f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   838fa:	4c27      	ldr	r4, [pc, #156]	; (83998 <__register_exitproc+0xa0>)
   838fc:	b085      	sub	sp, #20
   838fe:	6826      	ldr	r6, [r4, #0]
   83900:	4607      	mov	r7, r0
   83902:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   83906:	2c00      	cmp	r4, #0
   83908:	d040      	beq.n	8398c <__register_exitproc+0x94>
   8390a:	6865      	ldr	r5, [r4, #4]
   8390c:	2d1f      	cmp	r5, #31
   8390e:	dd1e      	ble.n	8394e <__register_exitproc+0x56>
   83910:	4822      	ldr	r0, [pc, #136]	; (8399c <__register_exitproc+0xa4>)
   83912:	b918      	cbnz	r0, 8391c <__register_exitproc+0x24>
   83914:	f04f 30ff 	mov.w	r0, #4294967295
   83918:	b005      	add	sp, #20
   8391a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8391c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83920:	9103      	str	r1, [sp, #12]
   83922:	9202      	str	r2, [sp, #8]
   83924:	9301      	str	r3, [sp, #4]
   83926:	f7ff f96b 	bl	82c00 <malloc>
   8392a:	9903      	ldr	r1, [sp, #12]
   8392c:	4604      	mov	r4, r0
   8392e:	9a02      	ldr	r2, [sp, #8]
   83930:	9b01      	ldr	r3, [sp, #4]
   83932:	2800      	cmp	r0, #0
   83934:	d0ee      	beq.n	83914 <__register_exitproc+0x1c>
   83936:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   8393a:	2000      	movs	r0, #0
   8393c:	6025      	str	r5, [r4, #0]
   8393e:	6060      	str	r0, [r4, #4]
   83940:	4605      	mov	r5, r0
   83942:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83946:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   8394a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   8394e:	b93f      	cbnz	r7, 83960 <__register_exitproc+0x68>
   83950:	1c6b      	adds	r3, r5, #1
   83952:	2000      	movs	r0, #0
   83954:	3502      	adds	r5, #2
   83956:	6063      	str	r3, [r4, #4]
   83958:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   8395c:	b005      	add	sp, #20
   8395e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83960:	2601      	movs	r6, #1
   83962:	40ae      	lsls	r6, r5
   83964:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83968:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   8396c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83970:	2f02      	cmp	r7, #2
   83972:	ea42 0206 	orr.w	r2, r2, r6
   83976:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8397a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   8397e:	d1e7      	bne.n	83950 <__register_exitproc+0x58>
   83980:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83984:	431e      	orrs	r6, r3
   83986:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8398a:	e7e1      	b.n	83950 <__register_exitproc+0x58>
   8398c:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83990:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83994:	e7b9      	b.n	8390a <__register_exitproc+0x12>
   83996:	bf00      	nop
   83998:	00083b14 	.word	0x00083b14
   8399c:	00082c01 	.word	0x00082c01

000839a0 <_close_r>:
   839a0:	b538      	push	{r3, r4, r5, lr}
   839a2:	4c07      	ldr	r4, [pc, #28]	; (839c0 <_close_r+0x20>)
   839a4:	2300      	movs	r3, #0
   839a6:	4605      	mov	r5, r0
   839a8:	4608      	mov	r0, r1
   839aa:	6023      	str	r3, [r4, #0]
   839ac:	f7fd f8c8 	bl	80b40 <_close>
   839b0:	1c43      	adds	r3, r0, #1
   839b2:	d000      	beq.n	839b6 <_close_r+0x16>
   839b4:	bd38      	pop	{r3, r4, r5, pc}
   839b6:	6823      	ldr	r3, [r4, #0]
   839b8:	2b00      	cmp	r3, #0
   839ba:	d0fb      	beq.n	839b4 <_close_r+0x14>
   839bc:	602b      	str	r3, [r5, #0]
   839be:	bd38      	pop	{r3, r4, r5, pc}
   839c0:	20070a64 	.word	0x20070a64

000839c4 <_fclose_r>:
   839c4:	b570      	push	{r4, r5, r6, lr}
   839c6:	460c      	mov	r4, r1
   839c8:	4605      	mov	r5, r0
   839ca:	b131      	cbz	r1, 839da <_fclose_r+0x16>
   839cc:	b110      	cbz	r0, 839d4 <_fclose_r+0x10>
   839ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
   839d0:	2b00      	cmp	r3, #0
   839d2:	d02f      	beq.n	83a34 <_fclose_r+0x70>
   839d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   839d8:	b90b      	cbnz	r3, 839de <_fclose_r+0x1a>
   839da:	2000      	movs	r0, #0
   839dc:	bd70      	pop	{r4, r5, r6, pc}
   839de:	4628      	mov	r0, r5
   839e0:	4621      	mov	r1, r4
   839e2:	f7fe fcb7 	bl	82354 <_fflush_r>
   839e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   839e8:	4606      	mov	r6, r0
   839ea:	b133      	cbz	r3, 839fa <_fclose_r+0x36>
   839ec:	4628      	mov	r0, r5
   839ee:	69e1      	ldr	r1, [r4, #28]
   839f0:	4798      	blx	r3
   839f2:	2800      	cmp	r0, #0
   839f4:	bfb8      	it	lt
   839f6:	f04f 36ff 	movlt.w	r6, #4294967295
   839fa:	89a3      	ldrh	r3, [r4, #12]
   839fc:	061b      	lsls	r3, r3, #24
   839fe:	d41c      	bmi.n	83a3a <_fclose_r+0x76>
   83a00:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83a02:	b141      	cbz	r1, 83a16 <_fclose_r+0x52>
   83a04:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83a08:	4299      	cmp	r1, r3
   83a0a:	d002      	beq.n	83a12 <_fclose_r+0x4e>
   83a0c:	4628      	mov	r0, r5
   83a0e:	f7fe fe01 	bl	82614 <_free_r>
   83a12:	2300      	movs	r3, #0
   83a14:	6323      	str	r3, [r4, #48]	; 0x30
   83a16:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83a18:	b121      	cbz	r1, 83a24 <_fclose_r+0x60>
   83a1a:	4628      	mov	r0, r5
   83a1c:	f7fe fdfa 	bl	82614 <_free_r>
   83a20:	2300      	movs	r3, #0
   83a22:	6463      	str	r3, [r4, #68]	; 0x44
   83a24:	f7fe fd2c 	bl	82480 <__sfp_lock_acquire>
   83a28:	2300      	movs	r3, #0
   83a2a:	81a3      	strh	r3, [r4, #12]
   83a2c:	f7fe fd2a 	bl	82484 <__sfp_lock_release>
   83a30:	4630      	mov	r0, r6
   83a32:	bd70      	pop	{r4, r5, r6, pc}
   83a34:	f7fe fcaa 	bl	8238c <__sinit>
   83a38:	e7cc      	b.n	839d4 <_fclose_r+0x10>
   83a3a:	4628      	mov	r0, r5
   83a3c:	6921      	ldr	r1, [r4, #16]
   83a3e:	f7fe fde9 	bl	82614 <_free_r>
   83a42:	e7dd      	b.n	83a00 <_fclose_r+0x3c>

00083a44 <fclose>:
   83a44:	4b02      	ldr	r3, [pc, #8]	; (83a50 <fclose+0xc>)
   83a46:	4601      	mov	r1, r0
   83a48:	6818      	ldr	r0, [r3, #0]
   83a4a:	f7ff bfbb 	b.w	839c4 <_fclose_r>
   83a4e:	bf00      	nop
   83a50:	20070558 	.word	0x20070558

00083a54 <_fstat_r>:
   83a54:	b538      	push	{r3, r4, r5, lr}
   83a56:	4c08      	ldr	r4, [pc, #32]	; (83a78 <_fstat_r+0x24>)
   83a58:	2300      	movs	r3, #0
   83a5a:	4605      	mov	r5, r0
   83a5c:	4608      	mov	r0, r1
   83a5e:	4611      	mov	r1, r2
   83a60:	6023      	str	r3, [r4, #0]
   83a62:	f7fd f871 	bl	80b48 <_fstat>
   83a66:	1c43      	adds	r3, r0, #1
   83a68:	d000      	beq.n	83a6c <_fstat_r+0x18>
   83a6a:	bd38      	pop	{r3, r4, r5, pc}
   83a6c:	6823      	ldr	r3, [r4, #0]
   83a6e:	2b00      	cmp	r3, #0
   83a70:	d0fb      	beq.n	83a6a <_fstat_r+0x16>
   83a72:	602b      	str	r3, [r5, #0]
   83a74:	bd38      	pop	{r3, r4, r5, pc}
   83a76:	bf00      	nop
   83a78:	20070a64 	.word	0x20070a64

00083a7c <_isatty_r>:
   83a7c:	b538      	push	{r3, r4, r5, lr}
   83a7e:	4c07      	ldr	r4, [pc, #28]	; (83a9c <_isatty_r+0x20>)
   83a80:	2300      	movs	r3, #0
   83a82:	4605      	mov	r5, r0
   83a84:	4608      	mov	r0, r1
   83a86:	6023      	str	r3, [r4, #0]
   83a88:	f7fd f864 	bl	80b54 <_isatty>
   83a8c:	1c43      	adds	r3, r0, #1
   83a8e:	d000      	beq.n	83a92 <_isatty_r+0x16>
   83a90:	bd38      	pop	{r3, r4, r5, pc}
   83a92:	6823      	ldr	r3, [r4, #0]
   83a94:	2b00      	cmp	r3, #0
   83a96:	d0fb      	beq.n	83a90 <_isatty_r+0x14>
   83a98:	602b      	str	r3, [r5, #0]
   83a9a:	bd38      	pop	{r3, r4, r5, pc}
   83a9c:	20070a64 	.word	0x20070a64

00083aa0 <_lseek_r>:
   83aa0:	b570      	push	{r4, r5, r6, lr}
   83aa2:	4c08      	ldr	r4, [pc, #32]	; (83ac4 <_lseek_r+0x24>)
   83aa4:	4606      	mov	r6, r0
   83aa6:	2500      	movs	r5, #0
   83aa8:	4608      	mov	r0, r1
   83aaa:	4611      	mov	r1, r2
   83aac:	461a      	mov	r2, r3
   83aae:	6025      	str	r5, [r4, #0]
   83ab0:	f7fd f852 	bl	80b58 <_lseek>
   83ab4:	1c43      	adds	r3, r0, #1
   83ab6:	d000      	beq.n	83aba <_lseek_r+0x1a>
   83ab8:	bd70      	pop	{r4, r5, r6, pc}
   83aba:	6823      	ldr	r3, [r4, #0]
   83abc:	2b00      	cmp	r3, #0
   83abe:	d0fb      	beq.n	83ab8 <_lseek_r+0x18>
   83ac0:	6033      	str	r3, [r6, #0]
   83ac2:	bd70      	pop	{r4, r5, r6, pc}
   83ac4:	20070a64 	.word	0x20070a64

00083ac8 <_read_r>:
   83ac8:	b570      	push	{r4, r5, r6, lr}
   83aca:	4c08      	ldr	r4, [pc, #32]	; (83aec <_read_r+0x24>)
   83acc:	4606      	mov	r6, r0
   83ace:	2500      	movs	r5, #0
   83ad0:	4608      	mov	r0, r1
   83ad2:	4611      	mov	r1, r2
   83ad4:	461a      	mov	r2, r3
   83ad6:	6025      	str	r5, [r4, #0]
   83ad8:	f7fc fc38 	bl	8034c <_read>
   83adc:	1c43      	adds	r3, r0, #1
   83ade:	d000      	beq.n	83ae2 <_read_r+0x1a>
   83ae0:	bd70      	pop	{r4, r5, r6, pc}
   83ae2:	6823      	ldr	r3, [r4, #0]
   83ae4:	2b00      	cmp	r3, #0
   83ae6:	d0fb      	beq.n	83ae0 <_read_r+0x18>
   83ae8:	6033      	str	r3, [r6, #0]
   83aea:	bd70      	pop	{r4, r5, r6, pc}
   83aec:	20070a64 	.word	0x20070a64
   83af0:	736e6f43 	.word	0x736e6f43
   83af4:	20656c6f 	.word	0x20656c6f
   83af8:	64616572 	.word	0x64616572
   83afc:	00000a79 	.word	0x00000a79
   83b00:	3d3d3d3d 	.word	0x3d3d3d3d
   83b04:	3d3d3d3d 	.word	0x3d3d3d3d
   83b08:	3d3d3d3d 	.word	0x3d3d3d3d
   83b0c:	00000a3d 	.word	0x00000a3d
   83b10:	00000043 	.word	0x00000043

00083b14 <_global_impure_ptr>:
   83b14:	20070130 33323130 37363534 42413938     0.. 0123456789AB
   83b24:	46454443 00000000 33323130 37363534     CDEF....01234567
   83b34:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83b44:	0000296c                                l)..

00083b48 <zeroes.6721>:
   83b48:	30303030 30303030 30303030 30303030     0000000000000000

00083b58 <blanks.6720>:
   83b58:	20202020 20202020 20202020 20202020                     

00083b68 <_init>:
   83b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83b6a:	bf00      	nop
   83b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83b6e:	bc08      	pop	{r3}
   83b70:	469e      	mov	lr, r3
   83b72:	4770      	bx	lr

00083b74 <__init_array_start>:
   83b74:	000821ed 	.word	0x000821ed

00083b78 <__frame_dummy_init_array_entry>:
   83b78:	00080119                                ....

00083b7c <_fini>:
   83b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83b7e:	bf00      	nop
   83b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83b82:	bc08      	pop	{r3}
   83b84:	469e      	mov	lr, r3
   83b86:	4770      	bx	lr

00083b88 <__fini_array_start>:
   83b88:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
20070164:	00083b10 00000000 00000000 00000000     .;..............
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...

20070558 <_impure_ptr>:
20070558:	20070130                                0.. 

2007055c <lc_ctype_charset>:
2007055c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007057c <__mb_cur_max>:
2007057c:	00000001                                ....

20070580 <__malloc_av_>:
	...
20070588:	20070580 20070580 20070588 20070588     ... ... ... ... 
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 

20070988 <__malloc_trim_threshold>:
20070988:	00020000                                ....

2007098c <__malloc_sbrk_base>:
2007098c:	ffffffff                                ....

20070990 <__wctomb>:
20070990:	000838b5                                .8..
