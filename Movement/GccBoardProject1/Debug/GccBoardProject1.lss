
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004758  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084758  00084758  0000c758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  00084760  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000ec  200709a8  00085108  000109a4  2**3
                  ALLOC
  4 .stack        00002004  20070a94  000851f4  000109a4  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109a4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000c729  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002277  00000000  00000000  0001d151  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003cfc  00000000  00000000  0001f3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009b8  00000000  00000000  000230c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000898  00000000  00000000  00023a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00017927  00000000  00000000  00024314  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e441  00000000  00000000  0003bc3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00061f73  00000000  00000000  0004a07c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001f1c  00000000  00000000  000abff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072a98 	.word	0x20072a98
   80004:	00080ab1 	.word	0x00080ab1
   80008:	00080aad 	.word	0x00080aad
   8000c:	00080aad 	.word	0x00080aad
   80010:	00080aad 	.word	0x00080aad
   80014:	00080aad 	.word	0x00080aad
   80018:	00080aad 	.word	0x00080aad
	...
   8002c:	00080aad 	.word	0x00080aad
   80030:	00080aad 	.word	0x00080aad
   80034:	00000000 	.word	0x00000000
   80038:	00080aad 	.word	0x00080aad
   8003c:	00080aad 	.word	0x00080aad
   80040:	00080aad 	.word	0x00080aad
   80044:	00080aad 	.word	0x00080aad
   80048:	00080aad 	.word	0x00080aad
   8004c:	00080aad 	.word	0x00080aad
   80050:	00080aad 	.word	0x00080aad
   80054:	00080aad 	.word	0x00080aad
   80058:	00080aad 	.word	0x00080aad
   8005c:	00080aad 	.word	0x00080aad
   80060:	00080aad 	.word	0x00080aad
   80064:	00080aad 	.word	0x00080aad
   80068:	00000000 	.word	0x00000000
   8006c:	000808f9 	.word	0x000808f9
   80070:	0008090d 	.word	0x0008090d
   80074:	00080921 	.word	0x00080921
   80078:	00080935 	.word	0x00080935
	...
   80084:	00080aad 	.word	0x00080aad
   80088:	00080aad 	.word	0x00080aad
   8008c:	00080aad 	.word	0x00080aad
   80090:	00080aad 	.word	0x00080aad
   80094:	00080aad 	.word	0x00080aad
   80098:	00080aad 	.word	0x00080aad
   8009c:	00080aad 	.word	0x00080aad
   800a0:	00080aad 	.word	0x00080aad
   800a4:	00000000 	.word	0x00000000
   800a8:	00080aad 	.word	0x00080aad
   800ac:	00080aad 	.word	0x00080aad
   800b0:	00080aad 	.word	0x00080aad
   800b4:	00080aad 	.word	0x00080aad
   800b8:	00080aad 	.word	0x00080aad
   800bc:	00080aad 	.word	0x00080aad
   800c0:	00080aad 	.word	0x00080aad
   800c4:	00080aad 	.word	0x00080aad
   800c8:	00080aad 	.word	0x00080aad
   800cc:	00080aad 	.word	0x00080aad
   800d0:	00080aad 	.word	0x00080aad
   800d4:	00080aad 	.word	0x00080aad
   800d8:	00080aad 	.word	0x00080aad
   800dc:	00080aad 	.word	0x00080aad
   800e0:	00080aad 	.word	0x00080aad
   800e4:	00080aad 	.word	0x00080aad
   800e8:	00080aad 	.word	0x00080aad
   800ec:	00080aad 	.word	0x00080aad
   800f0:	00080aad 	.word	0x00080aad

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a8 	.word	0x200709a8
   80110:	00000000 	.word	0x00000000
   80114:	00084760 	.word	0x00084760

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00084760 	.word	0x00084760
   8013c:	200709ac 	.word	0x200709ac
   80140:	00084760 	.word	0x00084760
   80144:	00000000 	.word	0x00000000

00080148 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80148:	b5f0      	push	{r4, r5, r6, r7, lr}
   8014a:	b083      	sub	sp, #12
   8014c:	4604      	mov	r4, r0
   8014e:	460d      	mov	r5, r1
	uint32_t val = 0;
   80150:	2300      	movs	r3, #0
   80152:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80154:	4b1f      	ldr	r3, [pc, #124]	; (801d4 <usart_serial_getchar+0x8c>)
   80156:	4298      	cmp	r0, r3
   80158:	d107      	bne.n	8016a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   8015a:	461f      	mov	r7, r3
   8015c:	4e1e      	ldr	r6, [pc, #120]	; (801d8 <usart_serial_getchar+0x90>)
   8015e:	4638      	mov	r0, r7
   80160:	4629      	mov	r1, r5
   80162:	47b0      	blx	r6
   80164:	2800      	cmp	r0, #0
   80166:	d1fa      	bne.n	8015e <usart_serial_getchar+0x16>
   80168:	e019      	b.n	8019e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8016a:	4b1c      	ldr	r3, [pc, #112]	; (801dc <usart_serial_getchar+0x94>)
   8016c:	4298      	cmp	r0, r3
   8016e:	d109      	bne.n	80184 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80170:	461f      	mov	r7, r3
   80172:	4e1b      	ldr	r6, [pc, #108]	; (801e0 <usart_serial_getchar+0x98>)
   80174:	4638      	mov	r0, r7
   80176:	a901      	add	r1, sp, #4
   80178:	47b0      	blx	r6
   8017a:	2800      	cmp	r0, #0
   8017c:	d1fa      	bne.n	80174 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   8017e:	9b01      	ldr	r3, [sp, #4]
   80180:	702b      	strb	r3, [r5, #0]
   80182:	e019      	b.n	801b8 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80184:	4b17      	ldr	r3, [pc, #92]	; (801e4 <usart_serial_getchar+0x9c>)
   80186:	4298      	cmp	r0, r3
   80188:	d109      	bne.n	8019e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   8018a:	461e      	mov	r6, r3
   8018c:	4c14      	ldr	r4, [pc, #80]	; (801e0 <usart_serial_getchar+0x98>)
   8018e:	4630      	mov	r0, r6
   80190:	a901      	add	r1, sp, #4
   80192:	47a0      	blx	r4
   80194:	2800      	cmp	r0, #0
   80196:	d1fa      	bne.n	8018e <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80198:	9b01      	ldr	r3, [sp, #4]
   8019a:	702b      	strb	r3, [r5, #0]
   8019c:	e018      	b.n	801d0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8019e:	4b12      	ldr	r3, [pc, #72]	; (801e8 <usart_serial_getchar+0xa0>)
   801a0:	429c      	cmp	r4, r3
   801a2:	d109      	bne.n	801b8 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   801a4:	461e      	mov	r6, r3
   801a6:	4c0e      	ldr	r4, [pc, #56]	; (801e0 <usart_serial_getchar+0x98>)
   801a8:	4630      	mov	r0, r6
   801aa:	a901      	add	r1, sp, #4
   801ac:	47a0      	blx	r4
   801ae:	2800      	cmp	r0, #0
   801b0:	d1fa      	bne.n	801a8 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   801b2:	9b01      	ldr	r3, [sp, #4]
   801b4:	702b      	strb	r3, [r5, #0]
   801b6:	e00b      	b.n	801d0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801b8:	4b0c      	ldr	r3, [pc, #48]	; (801ec <usart_serial_getchar+0xa4>)
   801ba:	429c      	cmp	r4, r3
   801bc:	d108      	bne.n	801d0 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   801be:	461e      	mov	r6, r3
   801c0:	4c07      	ldr	r4, [pc, #28]	; (801e0 <usart_serial_getchar+0x98>)
   801c2:	4630      	mov	r0, r6
   801c4:	a901      	add	r1, sp, #4
   801c6:	47a0      	blx	r4
   801c8:	2800      	cmp	r0, #0
   801ca:	d1fa      	bne.n	801c2 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   801cc:	9b01      	ldr	r3, [sp, #4]
   801ce:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   801d0:	b003      	add	sp, #12
   801d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   801d4:	400e0800 	.word	0x400e0800
   801d8:	00080409 	.word	0x00080409
   801dc:	40098000 	.word	0x40098000
   801e0:	00080431 	.word	0x00080431
   801e4:	4009c000 	.word	0x4009c000
   801e8:	400a0000 	.word	0x400a0000
   801ec:	400a4000 	.word	0x400a4000

000801f0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   801f0:	b570      	push	{r4, r5, r6, lr}
   801f2:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   801f4:	4b21      	ldr	r3, [pc, #132]	; (8027c <usart_serial_putchar+0x8c>)
   801f6:	4298      	cmp	r0, r3
   801f8:	d107      	bne.n	8020a <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   801fa:	461e      	mov	r6, r3
   801fc:	4d20      	ldr	r5, [pc, #128]	; (80280 <usart_serial_putchar+0x90>)
   801fe:	4630      	mov	r0, r6
   80200:	4621      	mov	r1, r4
   80202:	47a8      	blx	r5
   80204:	2800      	cmp	r0, #0
   80206:	d1fa      	bne.n	801fe <usart_serial_putchar+0xe>
   80208:	e02b      	b.n	80262 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8020a:	4b1e      	ldr	r3, [pc, #120]	; (80284 <usart_serial_putchar+0x94>)
   8020c:	4298      	cmp	r0, r3
   8020e:	d107      	bne.n	80220 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   80210:	461e      	mov	r6, r3
   80212:	4d1d      	ldr	r5, [pc, #116]	; (80288 <usart_serial_putchar+0x98>)
   80214:	4630      	mov	r0, r6
   80216:	4621      	mov	r1, r4
   80218:	47a8      	blx	r5
   8021a:	2800      	cmp	r0, #0
   8021c:	d1fa      	bne.n	80214 <usart_serial_putchar+0x24>
   8021e:	e022      	b.n	80266 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80220:	4b1a      	ldr	r3, [pc, #104]	; (8028c <usart_serial_putchar+0x9c>)
   80222:	4298      	cmp	r0, r3
   80224:	d107      	bne.n	80236 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   80226:	461e      	mov	r6, r3
   80228:	4d17      	ldr	r5, [pc, #92]	; (80288 <usart_serial_putchar+0x98>)
   8022a:	4630      	mov	r0, r6
   8022c:	4621      	mov	r1, r4
   8022e:	47a8      	blx	r5
   80230:	2800      	cmp	r0, #0
   80232:	d1fa      	bne.n	8022a <usart_serial_putchar+0x3a>
   80234:	e019      	b.n	8026a <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80236:	4b16      	ldr	r3, [pc, #88]	; (80290 <usart_serial_putchar+0xa0>)
   80238:	4298      	cmp	r0, r3
   8023a:	d107      	bne.n	8024c <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   8023c:	461e      	mov	r6, r3
   8023e:	4d12      	ldr	r5, [pc, #72]	; (80288 <usart_serial_putchar+0x98>)
   80240:	4630      	mov	r0, r6
   80242:	4621      	mov	r1, r4
   80244:	47a8      	blx	r5
   80246:	2800      	cmp	r0, #0
   80248:	d1fa      	bne.n	80240 <usart_serial_putchar+0x50>
   8024a:	e010      	b.n	8026e <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8024c:	4b11      	ldr	r3, [pc, #68]	; (80294 <usart_serial_putchar+0xa4>)
   8024e:	4298      	cmp	r0, r3
   80250:	d10f      	bne.n	80272 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   80252:	461e      	mov	r6, r3
   80254:	4d0c      	ldr	r5, [pc, #48]	; (80288 <usart_serial_putchar+0x98>)
   80256:	4630      	mov	r0, r6
   80258:	4621      	mov	r1, r4
   8025a:	47a8      	blx	r5
   8025c:	2800      	cmp	r0, #0
   8025e:	d1fa      	bne.n	80256 <usart_serial_putchar+0x66>
   80260:	e009      	b.n	80276 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   80262:	2001      	movs	r0, #1
   80264:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80266:	2001      	movs	r0, #1
   80268:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8026a:	2001      	movs	r0, #1
   8026c:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8026e:	2001      	movs	r0, #1
   80270:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80272:	2000      	movs	r0, #0
   80274:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80276:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80278:	bd70      	pop	{r4, r5, r6, pc}
   8027a:	bf00      	nop
   8027c:	400e0800 	.word	0x400e0800
   80280:	000803f9 	.word	0x000803f9
   80284:	40098000 	.word	0x40098000
   80288:	0008041d 	.word	0x0008041d
   8028c:	4009c000 	.word	0x4009c000
   80290:	400a0000 	.word	0x400a0000
   80294:	400a4000 	.word	0x400a4000

00080298 <configureConsole>:
#include "consoleFunctions.h"

void configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   80298:	b530      	push	{r4, r5, lr}
   8029a:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8029c:	2008      	movs	r0, #8
   8029e:	4d15      	ldr	r5, [pc, #84]	; (802f4 <configureConsole+0x5c>)
   802a0:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   802a2:	4c15      	ldr	r4, [pc, #84]	; (802f8 <configureConsole+0x60>)
   802a4:	4b15      	ldr	r3, [pc, #84]	; (802fc <configureConsole+0x64>)
   802a6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   802a8:	4a15      	ldr	r2, [pc, #84]	; (80300 <configureConsole+0x68>)
   802aa:	4b16      	ldr	r3, [pc, #88]	; (80304 <configureConsole+0x6c>)
   802ac:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   802ae:	4a16      	ldr	r2, [pc, #88]	; (80308 <configureConsole+0x70>)
   802b0:	4b16      	ldr	r3, [pc, #88]	; (8030c <configureConsole+0x74>)
   802b2:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   802b4:	4b16      	ldr	r3, [pc, #88]	; (80310 <configureConsole+0x78>)
   802b6:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   802b8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   802bc:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   802be:	f44f 6300 	mov.w	r3, #2048	; 0x800
   802c2:	9303      	str	r3, [sp, #12]
   802c4:	2008      	movs	r0, #8
   802c6:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   802c8:	4620      	mov	r0, r4
   802ca:	a901      	add	r1, sp, #4
   802cc:	4b11      	ldr	r3, [pc, #68]	; (80314 <configureConsole+0x7c>)
   802ce:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   802d0:	4d11      	ldr	r5, [pc, #68]	; (80318 <configureConsole+0x80>)
   802d2:	682b      	ldr	r3, [r5, #0]
   802d4:	6898      	ldr	r0, [r3, #8]
   802d6:	2100      	movs	r1, #0
   802d8:	4c10      	ldr	r4, [pc, #64]	; (8031c <configureConsole+0x84>)
   802da:	47a0      	blx	r4
	setbuf(stdin, NULL);
   802dc:	682b      	ldr	r3, [r5, #0]
   802de:	6858      	ldr	r0, [r3, #4]
   802e0:	2100      	movs	r1, #0
   802e2:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   802e4:	480e      	ldr	r0, [pc, #56]	; (80320 <configureConsole+0x88>)
   802e6:	4c0f      	ldr	r4, [pc, #60]	; (80324 <configureConsole+0x8c>)
   802e8:	47a0      	blx	r4
	printf("=============\n");
   802ea:	480f      	ldr	r0, [pc, #60]	; (80328 <configureConsole+0x90>)
   802ec:	47a0      	blx	r4
   802ee:	b005      	add	sp, #20
   802f0:	bd30      	pop	{r4, r5, pc}
   802f2:	bf00      	nop
   802f4:	00080a31 	.word	0x00080a31
   802f8:	400e0800 	.word	0x400e0800
   802fc:	20070a80 	.word	0x20070a80
   80300:	000801f1 	.word	0x000801f1
   80304:	20070a7c 	.word	0x20070a7c
   80308:	00080149 	.word	0x00080149
   8030c:	20070a78 	.word	0x20070a78
   80310:	0501bd00 	.word	0x0501bd00
   80314:	000803c1 	.word	0x000803c1
   80318:	20070568 	.word	0x20070568
   8031c:	00081df5 	.word	0x00081df5
   80320:	000846bc 	.word	0x000846bc
   80324:	00081d39 	.word	0x00081d39
   80328:	000846cc 	.word	0x000846cc

0008032c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8032c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80330:	460c      	mov	r4, r1
   80332:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80334:	b960      	cbnz	r0, 80350 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80336:	2a00      	cmp	r2, #0
   80338:	dd0e      	ble.n	80358 <_read+0x2c>
   8033a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   8033c:	4e09      	ldr	r6, [pc, #36]	; (80364 <_read+0x38>)
   8033e:	4d0a      	ldr	r5, [pc, #40]	; (80368 <_read+0x3c>)
   80340:	6830      	ldr	r0, [r6, #0]
   80342:	4621      	mov	r1, r4
   80344:	682b      	ldr	r3, [r5, #0]
   80346:	4798      	blx	r3
		ptr++;
   80348:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8034a:	42bc      	cmp	r4, r7
   8034c:	d1f8      	bne.n	80340 <_read+0x14>
   8034e:	e006      	b.n	8035e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80350:	f04f 30ff 	mov.w	r0, #4294967295
   80354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80358:	2000      	movs	r0, #0
   8035a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8035e:	4640      	mov	r0, r8
	}
	return nChars;
}
   80360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80364:	20070a80 	.word	0x20070a80
   80368:	20070a78 	.word	0x20070a78

0008036c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8036c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80370:	460e      	mov	r6, r1
   80372:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80374:	3801      	subs	r0, #1
   80376:	2802      	cmp	r0, #2
   80378:	d80f      	bhi.n	8039a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   8037a:	b192      	cbz	r2, 803a2 <_write+0x36>
   8037c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8037e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 803bc <_write+0x50>
   80382:	4f0d      	ldr	r7, [pc, #52]	; (803b8 <_write+0x4c>)
   80384:	f8d8 0000 	ldr.w	r0, [r8]
   80388:	5d31      	ldrb	r1, [r6, r4]
   8038a:	683b      	ldr	r3, [r7, #0]
   8038c:	4798      	blx	r3
   8038e:	2800      	cmp	r0, #0
   80390:	db0a      	blt.n	803a8 <_write+0x3c>
			return -1;
		}
		++nChars;
   80392:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80394:	42a5      	cmp	r5, r4
   80396:	d1f5      	bne.n	80384 <_write+0x18>
   80398:	e00a      	b.n	803b0 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8039a:	f04f 30ff 	mov.w	r0, #4294967295
   8039e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   803a2:	2000      	movs	r0, #0
   803a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   803a8:	f04f 30ff 	mov.w	r0, #4294967295
   803ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   803b0:	4620      	mov	r0, r4
	}
	return nChars;
}
   803b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   803b6:	bf00      	nop
   803b8:	20070a7c 	.word	0x20070a7c
   803bc:	20070a80 	.word	0x20070a80

000803c0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   803c0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   803c2:	23ac      	movs	r3, #172	; 0xac
   803c4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   803c6:	680a      	ldr	r2, [r1, #0]
   803c8:	684b      	ldr	r3, [r1, #4]
   803ca:	fbb2 f3f3 	udiv	r3, r2, r3
   803ce:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   803d0:	1e5c      	subs	r4, r3, #1
   803d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   803d6:	4294      	cmp	r4, r2
   803d8:	d80a      	bhi.n	803f0 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   803da:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   803dc:	688b      	ldr	r3, [r1, #8]
   803de:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   803e0:	f240 2302 	movw	r3, #514	; 0x202
   803e4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   803e8:	2350      	movs	r3, #80	; 0x50
   803ea:	6003      	str	r3, [r0, #0]

	return 0;
   803ec:	2000      	movs	r0, #0
   803ee:	e000      	b.n	803f2 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   803f0:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   803f2:	f85d 4b04 	ldr.w	r4, [sp], #4
   803f6:	4770      	bx	lr

000803f8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   803f8:	6943      	ldr	r3, [r0, #20]
   803fa:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   803fe:	bf1a      	itte	ne
   80400:	61c1      	strne	r1, [r0, #28]
	return 0;
   80402:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80404:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80406:	4770      	bx	lr

00080408 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80408:	6943      	ldr	r3, [r0, #20]
   8040a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8040e:	bf1d      	ittte	ne
   80410:	6983      	ldrne	r3, [r0, #24]
   80412:	700b      	strbne	r3, [r1, #0]
	return 0;
   80414:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80416:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80418:	4770      	bx	lr
   8041a:	bf00      	nop

0008041c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8041c:	6943      	ldr	r3, [r0, #20]
   8041e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80422:	bf1d      	ittte	ne
   80424:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80428:	61c1      	strne	r1, [r0, #28]
	return 0;
   8042a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8042c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8042e:	4770      	bx	lr

00080430 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80430:	6943      	ldr	r3, [r0, #20]
   80432:	f013 0f01 	tst.w	r3, #1
   80436:	d005      	beq.n	80444 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80438:	6983      	ldr	r3, [r0, #24]
   8043a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8043e:	600b      	str	r3, [r1, #0]

	return 0;
   80440:	2000      	movs	r0, #0
   80442:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80444:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80446:	4770      	bx	lr

00080448 <pulseCounter_handlerA>:
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80448:	4b04      	ldr	r3, [pc, #16]	; (8045c <pulseCounter_handlerA+0x14>)
   8044a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 int counterA = 0;
 int counterB = 0;
 

void pulseCounter_handlerA(const uint32_t id, const uint32_t index){
	if (ioport_get_pin_level(A))
   8044c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
   80450:	d003      	beq.n	8045a <pulseCounter_handlerA+0x12>
	{
		counterA++;
   80452:	4b03      	ldr	r3, [pc, #12]	; (80460 <pulseCounter_handlerA+0x18>)
   80454:	681a      	ldr	r2, [r3, #0]
   80456:	3201      	adds	r2, #1
   80458:	601a      	str	r2, [r3, #0]
   8045a:	4770      	bx	lr
   8045c:	400e1200 	.word	0x400e1200
   80460:	200709c4 	.word	0x200709c4

00080464 <pulseCounter_handlerB>:
   80464:	4b04      	ldr	r3, [pc, #16]	; (80478 <pulseCounter_handlerB+0x14>)
   80466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	}

}

void pulseCounter_handlerB(const uint32_t id, const uint32_t index){
	if (ioport_get_pin_level(B))
   80468:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   8046c:	d003      	beq.n	80476 <pulseCounter_handlerB+0x12>
	{
		counterB++;
   8046e:	4b03      	ldr	r3, [pc, #12]	; (8047c <pulseCounter_handlerB+0x18>)
   80470:	681a      	ldr	r2, [r3, #0]
   80472:	3201      	adds	r2, #1
   80474:	601a      	str	r2, [r3, #0]
   80476:	4770      	bx	lr
   80478:	400e1200 	.word	0x400e1200
   8047c:	200709c8 	.word	0x200709c8

00080480 <pulseCounter_configA>:
	}
	
}

void pulseCounter_configA(uint32_t ul_id, Pio *p_pio, const uint32_t ul_mask){
   80480:	b570      	push	{r4, r5, r6, lr}
   80482:	b082      	sub	sp, #8
   80484:	4606      	mov	r6, r0
   80486:	460d      	mov	r5, r1
   80488:	4614      	mov	r4, r2
	pmc_set_writeprotect(false);
   8048a:	2000      	movs	r0, #0
   8048c:	4b0d      	ldr	r3, [pc, #52]	; (804c4 <pulseCounter_configA+0x44>)
   8048e:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   80490:	4630      	mov	r0, r6
   80492:	4b0d      	ldr	r3, [pc, #52]	; (804c8 <pulseCounter_configA+0x48>)
   80494:	4798      	blx	r3
	//pio_set_output(p_pio, ul_mask, LOW, DISABLE, ENABLE);
	pio_set_input(p_pio, ul_mask, PIO_PULLUP);
   80496:	4628      	mov	r0, r5
   80498:	4621      	mov	r1, r4
   8049a:	2201      	movs	r2, #1
   8049c:	4b0b      	ldr	r3, [pc, #44]	; (804cc <pulseCounter_configA+0x4c>)
   8049e:	4798      	blx	r3
	pio_handler_set(p_pio, ul_id, ul_mask, PIO_IT_EDGE, pulseCounter_handlerA);
   804a0:	4b0b      	ldr	r3, [pc, #44]	; (804d0 <pulseCounter_configA+0x50>)
   804a2:	9300      	str	r3, [sp, #0]
   804a4:	4628      	mov	r0, r5
   804a6:	4631      	mov	r1, r6
   804a8:	4622      	mov	r2, r4
   804aa:	2340      	movs	r3, #64	; 0x40
   804ac:	4e09      	ldr	r6, [pc, #36]	; (804d4 <pulseCounter_configA+0x54>)
   804ae:	47b0      	blx	r6
	pio_enable_interrupt(p_pio, ul_mask);
   804b0:	4628      	mov	r0, r5
   804b2:	4621      	mov	r1, r4
   804b4:	4b08      	ldr	r3, [pc, #32]	; (804d8 <pulseCounter_configA+0x58>)
   804b6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   804b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   804bc:	4b07      	ldr	r3, [pc, #28]	; (804dc <pulseCounter_configA+0x5c>)
   804be:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
}
   804c0:	b002      	add	sp, #8
   804c2:	bd70      	pop	{r4, r5, r6, pc}
   804c4:	00080a89 	.word	0x00080a89
   804c8:	00080a31 	.word	0x00080a31
   804cc:	00080655 	.word	0x00080655
   804d0:	00080449 	.word	0x00080449
   804d4:	000808bd 	.word	0x000808bd
   804d8:	000806e1 	.word	0x000806e1
   804dc:	e000e100 	.word	0xe000e100

000804e0 <pulseCounter_configB>:

void pulseCounter_configB(uint32_t ul_id, Pio *p_pio, const uint32_t ul_mask){
   804e0:	b570      	push	{r4, r5, r6, lr}
   804e2:	b082      	sub	sp, #8
   804e4:	4606      	mov	r6, r0
   804e6:	460d      	mov	r5, r1
   804e8:	4614      	mov	r4, r2
	pmc_set_writeprotect(false);
   804ea:	2000      	movs	r0, #0
   804ec:	4b0d      	ldr	r3, [pc, #52]	; (80524 <pulseCounter_configB+0x44>)
   804ee:	4798      	blx	r3
	pmc_enable_periph_clk(ul_id);
   804f0:	4630      	mov	r0, r6
   804f2:	4b0d      	ldr	r3, [pc, #52]	; (80528 <pulseCounter_configB+0x48>)
   804f4:	4798      	blx	r3
	//pio_set_output(p_pio, ul_mask, LOW, DISABLE, ENABLE);
	pio_set_input(p_pio, ul_mask, PIO_PULLUP);
   804f6:	4628      	mov	r0, r5
   804f8:	4621      	mov	r1, r4
   804fa:	2201      	movs	r2, #1
   804fc:	4b0b      	ldr	r3, [pc, #44]	; (8052c <pulseCounter_configB+0x4c>)
   804fe:	4798      	blx	r3
	pio_handler_set(p_pio, ul_id, ul_mask, PIO_IT_EDGE, pulseCounter_handlerB);
   80500:	4b0b      	ldr	r3, [pc, #44]	; (80530 <pulseCounter_configB+0x50>)
   80502:	9300      	str	r3, [sp, #0]
   80504:	4628      	mov	r0, r5
   80506:	4631      	mov	r1, r6
   80508:	4622      	mov	r2, r4
   8050a:	2340      	movs	r3, #64	; 0x40
   8050c:	4e09      	ldr	r6, [pc, #36]	; (80534 <pulseCounter_configB+0x54>)
   8050e:	47b0      	blx	r6
	pio_enable_interrupt(p_pio, ul_mask);
   80510:	4628      	mov	r0, r5
   80512:	4621      	mov	r1, r4
   80514:	4b08      	ldr	r3, [pc, #32]	; (80538 <pulseCounter_configB+0x58>)
   80516:	4798      	blx	r3
   80518:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8051c:	4b07      	ldr	r3, [pc, #28]	; (8053c <pulseCounter_configB+0x5c>)
   8051e:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOC_IRQn);
   80520:	b002      	add	sp, #8
   80522:	bd70      	pop	{r4, r5, r6, pc}
   80524:	00080a89 	.word	0x00080a89
   80528:	00080a31 	.word	0x00080a31
   8052c:	00080655 	.word	0x00080655
   80530:	00080465 	.word	0x00080465
   80534:	000808bd 	.word	0x000808bd
   80538:	000806e1 	.word	0x000806e1
   8053c:	e000e100 	.word	0xe000e100

00080540 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80540:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80542:	480e      	ldr	r0, [pc, #56]	; (8057c <sysclk_init+0x3c>)
   80544:	4b0e      	ldr	r3, [pc, #56]	; (80580 <sysclk_init+0x40>)
   80546:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80548:	2000      	movs	r0, #0
   8054a:	213e      	movs	r1, #62	; 0x3e
   8054c:	4b0d      	ldr	r3, [pc, #52]	; (80584 <sysclk_init+0x44>)
   8054e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80550:	4c0d      	ldr	r4, [pc, #52]	; (80588 <sysclk_init+0x48>)
   80552:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80554:	2800      	cmp	r0, #0
   80556:	d0fc      	beq.n	80552 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80558:	4b0c      	ldr	r3, [pc, #48]	; (8058c <sysclk_init+0x4c>)
   8055a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8055c:	4a0c      	ldr	r2, [pc, #48]	; (80590 <sysclk_init+0x50>)
   8055e:	4b0d      	ldr	r3, [pc, #52]	; (80594 <sysclk_init+0x54>)
   80560:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80562:	4c0d      	ldr	r4, [pc, #52]	; (80598 <sysclk_init+0x58>)
   80564:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80566:	2800      	cmp	r0, #0
   80568:	d0fc      	beq.n	80564 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8056a:	2010      	movs	r0, #16
   8056c:	4b0b      	ldr	r3, [pc, #44]	; (8059c <sysclk_init+0x5c>)
   8056e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80570:	4b0b      	ldr	r3, [pc, #44]	; (805a0 <sysclk_init+0x60>)
   80572:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80574:	4801      	ldr	r0, [pc, #4]	; (8057c <sysclk_init+0x3c>)
   80576:	4b02      	ldr	r3, [pc, #8]	; (80580 <sysclk_init+0x40>)
   80578:	4798      	blx	r3
   8057a:	bd10      	pop	{r4, pc}
   8057c:	0501bd00 	.word	0x0501bd00
   80580:	200700b1 	.word	0x200700b1
   80584:	000809ad 	.word	0x000809ad
   80588:	00080a01 	.word	0x00080a01
   8058c:	00080a11 	.word	0x00080a11
   80590:	200d3f01 	.word	0x200d3f01
   80594:	400e0600 	.word	0x400e0600
   80598:	00080a21 	.word	0x00080a21
   8059c:	00080949 	.word	0x00080949
   805a0:	00080b61 	.word	0x00080b61

000805a4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   805a4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   805a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   805aa:	4b13      	ldr	r3, [pc, #76]	; (805f8 <board_init+0x54>)
   805ac:	605a      	str	r2, [r3, #4]
   805ae:	200b      	movs	r0, #11
   805b0:	4c12      	ldr	r4, [pc, #72]	; (805fc <board_init+0x58>)
   805b2:	47a0      	blx	r4
   805b4:	200c      	movs	r0, #12
   805b6:	47a0      	blx	r4
   805b8:	200d      	movs	r0, #13
   805ba:	47a0      	blx	r4
   805bc:	200e      	movs	r0, #14
   805be:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   805c0:	203b      	movs	r0, #59	; 0x3b
   805c2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805c6:	4c0e      	ldr	r4, [pc, #56]	; (80600 <board_init+0x5c>)
   805c8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   805ca:	2055      	movs	r0, #85	; 0x55
   805cc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805d0:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   805d2:	2056      	movs	r0, #86	; 0x56
   805d4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805d8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   805da:	2068      	movs	r0, #104	; 0x68
   805dc:	4909      	ldr	r1, [pc, #36]	; (80604 <board_init+0x60>)
   805de:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   805e0:	205c      	movs	r0, #92	; 0x5c
   805e2:	4909      	ldr	r1, [pc, #36]	; (80608 <board_init+0x64>)
   805e4:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	//Use the first line in normal cases
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   805e6:	4809      	ldr	r0, [pc, #36]	; (8060c <board_init+0x68>)
   805e8:	f44f 7140 	mov.w	r1, #768	; 0x300
   805ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   805f0:	4b07      	ldr	r3, [pc, #28]	; (80610 <board_init+0x6c>)
   805f2:	4798      	blx	r3
   805f4:	bd10      	pop	{r4, pc}
   805f6:	bf00      	nop
   805f8:	400e1a50 	.word	0x400e1a50
   805fc:	00080a31 	.word	0x00080a31
   80600:	000806f1 	.word	0x000806f1
   80604:	28000079 	.word	0x28000079
   80608:	28000001 	.word	0x28000001
   8060c:	400e0e00 	.word	0x400e0e00
   80610:	000807c5 	.word	0x000807c5

00080614 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80614:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80616:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8061a:	d016      	beq.n	8064a <pio_set_peripheral+0x36>
   8061c:	d804      	bhi.n	80628 <pio_set_peripheral+0x14>
   8061e:	b1c1      	cbz	r1, 80652 <pio_set_peripheral+0x3e>
   80620:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80624:	d00a      	beq.n	8063c <pio_set_peripheral+0x28>
   80626:	e013      	b.n	80650 <pio_set_peripheral+0x3c>
   80628:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8062c:	d011      	beq.n	80652 <pio_set_peripheral+0x3e>
   8062e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80632:	d00e      	beq.n	80652 <pio_set_peripheral+0x3e>
   80634:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80638:	d10a      	bne.n	80650 <pio_set_peripheral+0x3c>
   8063a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8063c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8063e:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80640:	400b      	ands	r3, r1
   80642:	ea23 0302 	bic.w	r3, r3, r2
   80646:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80648:	e002      	b.n	80650 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8064a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8064c:	4313      	orrs	r3, r2
   8064e:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80650:	6042      	str	r2, [r0, #4]
   80652:	4770      	bx	lr

00080654 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80654:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80656:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8065a:	bf14      	ite	ne
   8065c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8065e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80660:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80664:	bf14      	ite	ne
   80666:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80668:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8066a:	f012 0f02 	tst.w	r2, #2
   8066e:	d002      	beq.n	80676 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80670:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80674:	e004      	b.n	80680 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80676:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8067a:	bf18      	it	ne
   8067c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80680:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80682:	6001      	str	r1, [r0, #0]
   80684:	4770      	bx	lr
   80686:	bf00      	nop

00080688 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80688:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8068a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8068c:	9c01      	ldr	r4, [sp, #4]
   8068e:	b10c      	cbz	r4, 80694 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80690:	6641      	str	r1, [r0, #100]	; 0x64
   80692:	e000      	b.n	80696 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80694:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80696:	b10b      	cbz	r3, 8069c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80698:	6501      	str	r1, [r0, #80]	; 0x50
   8069a:	e000      	b.n	8069e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8069c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8069e:	b10a      	cbz	r2, 806a4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   806a0:	6301      	str	r1, [r0, #48]	; 0x30
   806a2:	e000      	b.n	806a6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   806a4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   806a6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   806a8:	6001      	str	r1, [r0, #0]
}
   806aa:	f85d 4b04 	ldr.w	r4, [sp], #4
   806ae:	4770      	bx	lr

000806b0 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   806b0:	f012 0f10 	tst.w	r2, #16
   806b4:	d010      	beq.n	806d8 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   806b6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   806ba:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   806be:	bf14      	ite	ne
   806c0:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   806c4:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   806c8:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   806cc:	bf14      	ite	ne
   806ce:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   806d2:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   806d6:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   806d8:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   806dc:	4770      	bx	lr
   806de:	bf00      	nop

000806e0 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
   806e0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
   806e2:	6401      	str	r1, [r0, #64]	; 0x40
   806e4:	4770      	bx	lr
   806e6:	bf00      	nop

000806e8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   806e8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   806ea:	4770      	bx	lr

000806ec <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   806ec:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   806ee:	4770      	bx	lr

000806f0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   806f0:	b570      	push	{r4, r5, r6, lr}
   806f2:	b082      	sub	sp, #8
   806f4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   806f6:	0944      	lsrs	r4, r0, #5
   806f8:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   806fc:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80700:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80702:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80706:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8070a:	d030      	beq.n	8076e <pio_configure_pin+0x7e>
   8070c:	d806      	bhi.n	8071c <pio_configure_pin+0x2c>
   8070e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80712:	d00a      	beq.n	8072a <pio_configure_pin+0x3a>
   80714:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80718:	d018      	beq.n	8074c <pio_configure_pin+0x5c>
   8071a:	e049      	b.n	807b0 <pio_configure_pin+0xc0>
   8071c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80720:	d030      	beq.n	80784 <pio_configure_pin+0x94>
   80722:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80726:	d02d      	beq.n	80784 <pio_configure_pin+0x94>
   80728:	e042      	b.n	807b0 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8072a:	f000 001f 	and.w	r0, r0, #31
   8072e:	2401      	movs	r4, #1
   80730:	4084      	lsls	r4, r0
   80732:	4630      	mov	r0, r6
   80734:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80738:	4622      	mov	r2, r4
   8073a:	4b1f      	ldr	r3, [pc, #124]	; (807b8 <pio_configure_pin+0xc8>)
   8073c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8073e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80742:	bf14      	ite	ne
   80744:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80746:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80748:	2001      	movs	r0, #1
   8074a:	e032      	b.n	807b2 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8074c:	f000 001f 	and.w	r0, r0, #31
   80750:	2401      	movs	r4, #1
   80752:	4084      	lsls	r4, r0
   80754:	4630      	mov	r0, r6
   80756:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8075a:	4622      	mov	r2, r4
   8075c:	4b16      	ldr	r3, [pc, #88]	; (807b8 <pio_configure_pin+0xc8>)
   8075e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80760:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80764:	bf14      	ite	ne
   80766:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80768:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8076a:	2001      	movs	r0, #1
   8076c:	e021      	b.n	807b2 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8076e:	f000 011f 	and.w	r1, r0, #31
   80772:	2401      	movs	r4, #1
   80774:	4630      	mov	r0, r6
   80776:	fa04 f101 	lsl.w	r1, r4, r1
   8077a:	462a      	mov	r2, r5
   8077c:	4b0f      	ldr	r3, [pc, #60]	; (807bc <pio_configure_pin+0xcc>)
   8077e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80780:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80782:	e016      	b.n	807b2 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80784:	f000 011f 	and.w	r1, r0, #31
   80788:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8078a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8078e:	ea05 0304 	and.w	r3, r5, r4
   80792:	9300      	str	r3, [sp, #0]
   80794:	4630      	mov	r0, r6
   80796:	fa04 f101 	lsl.w	r1, r4, r1
   8079a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8079e:	bf14      	ite	ne
   807a0:	2200      	movne	r2, #0
   807a2:	2201      	moveq	r2, #1
   807a4:	f3c5 0380 	ubfx	r3, r5, #2, #1
   807a8:	4d05      	ldr	r5, [pc, #20]	; (807c0 <pio_configure_pin+0xd0>)
   807aa:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   807ac:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   807ae:	e000      	b.n	807b2 <pio_configure_pin+0xc2>

	default:
		return 0;
   807b0:	2000      	movs	r0, #0
	}

	return 1;
}
   807b2:	b002      	add	sp, #8
   807b4:	bd70      	pop	{r4, r5, r6, pc}
   807b6:	bf00      	nop
   807b8:	00080615 	.word	0x00080615
   807bc:	00080655 	.word	0x00080655
   807c0:	00080689 	.word	0x00080689

000807c4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   807c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   807c6:	b083      	sub	sp, #12
   807c8:	4607      	mov	r7, r0
   807ca:	460e      	mov	r6, r1
   807cc:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   807ce:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   807d2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   807d6:	d026      	beq.n	80826 <pio_configure_pin_group+0x62>
   807d8:	d806      	bhi.n	807e8 <pio_configure_pin_group+0x24>
   807da:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   807de:	d00a      	beq.n	807f6 <pio_configure_pin_group+0x32>
   807e0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   807e4:	d013      	beq.n	8080e <pio_configure_pin_group+0x4a>
   807e6:	e034      	b.n	80852 <pio_configure_pin_group+0x8e>
   807e8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   807ec:	d01f      	beq.n	8082e <pio_configure_pin_group+0x6a>
   807ee:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   807f2:	d01c      	beq.n	8082e <pio_configure_pin_group+0x6a>
   807f4:	e02d      	b.n	80852 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   807f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807fa:	4632      	mov	r2, r6
   807fc:	4b16      	ldr	r3, [pc, #88]	; (80858 <pio_configure_pin_group+0x94>)
   807fe:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80800:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80804:	bf14      	ite	ne
   80806:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80808:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8080a:	2001      	movs	r0, #1
   8080c:	e022      	b.n	80854 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8080e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80812:	4632      	mov	r2, r6
   80814:	4b10      	ldr	r3, [pc, #64]	; (80858 <pio_configure_pin_group+0x94>)
   80816:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80818:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8081c:	bf14      	ite	ne
   8081e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80820:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80822:	2001      	movs	r0, #1
   80824:	e016      	b.n	80854 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80826:	4b0d      	ldr	r3, [pc, #52]	; (8085c <pio_configure_pin_group+0x98>)
   80828:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8082a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   8082c:	e012      	b.n	80854 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8082e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80832:	f005 0301 	and.w	r3, r5, #1
   80836:	9300      	str	r3, [sp, #0]
   80838:	4638      	mov	r0, r7
   8083a:	4631      	mov	r1, r6
   8083c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80840:	bf14      	ite	ne
   80842:	2200      	movne	r2, #0
   80844:	2201      	moveq	r2, #1
   80846:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8084a:	4c05      	ldr	r4, [pc, #20]	; (80860 <pio_configure_pin_group+0x9c>)
   8084c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8084e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80850:	e000      	b.n	80854 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80852:	2000      	movs	r0, #0
	}

	return 1;
}
   80854:	b003      	add	sp, #12
   80856:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80858:	00080615 	.word	0x00080615
   8085c:	00080655 	.word	0x00080655
   80860:	00080689 	.word	0x00080689

00080864 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80868:	4604      	mov	r4, r0
   8086a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8086c:	4b10      	ldr	r3, [pc, #64]	; (808b0 <pio_handler_process+0x4c>)
   8086e:	4798      	blx	r3
   80870:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80872:	4620      	mov	r0, r4
   80874:	4b0f      	ldr	r3, [pc, #60]	; (808b4 <pio_handler_process+0x50>)
   80876:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80878:	4005      	ands	r5, r0
   8087a:	d017      	beq.n	808ac <pio_handler_process+0x48>
   8087c:	4f0e      	ldr	r7, [pc, #56]	; (808b8 <pio_handler_process+0x54>)
   8087e:	f107 040c 	add.w	r4, r7, #12
   80882:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80884:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80888:	42b3      	cmp	r3, r6
   8088a:	d10a      	bne.n	808a2 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8088c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80890:	4229      	tst	r1, r5
   80892:	d006      	beq.n	808a2 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80894:	6823      	ldr	r3, [r4, #0]
   80896:	4630      	mov	r0, r6
   80898:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8089a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8089e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   808a2:	42bc      	cmp	r4, r7
   808a4:	d002      	beq.n	808ac <pio_handler_process+0x48>
   808a6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   808a8:	2d00      	cmp	r5, #0
   808aa:	d1eb      	bne.n	80884 <pio_handler_process+0x20>
   808ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   808b0:	000806e9 	.word	0x000806e9
   808b4:	000806ed 	.word	0x000806ed
   808b8:	200709d0 	.word	0x200709d0

000808bc <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   808bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   808be:	4c0b      	ldr	r4, [pc, #44]	; (808ec <pio_handler_set+0x30>)
   808c0:	6824      	ldr	r4, [r4, #0]
   808c2:	2c06      	cmp	r4, #6
   808c4:	d810      	bhi.n	808e8 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
   808c6:	4f0a      	ldr	r7, [pc, #40]	; (808f0 <pio_handler_set+0x34>)
   808c8:	0126      	lsls	r6, r4, #4
   808ca:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
   808cc:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
   808ce:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
   808d0:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
   808d2:	9906      	ldr	r1, [sp, #24]
   808d4:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
   808d6:	3401      	adds	r4, #1
   808d8:	4904      	ldr	r1, [pc, #16]	; (808ec <pio_handler_set+0x30>)
   808da:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   808dc:	4611      	mov	r1, r2
   808de:	461a      	mov	r2, r3
   808e0:	4b04      	ldr	r3, [pc, #16]	; (808f4 <pio_handler_set+0x38>)
   808e2:	4798      	blx	r3

	return 0;
   808e4:	2000      	movs	r0, #0
   808e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   808e8:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   808ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   808ec:	200709cc 	.word	0x200709cc
   808f0:	200709d0 	.word	0x200709d0
   808f4:	000806b1 	.word	0x000806b1

000808f8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   808f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   808fa:	4802      	ldr	r0, [pc, #8]	; (80904 <PIOA_Handler+0xc>)
   808fc:	210b      	movs	r1, #11
   808fe:	4b02      	ldr	r3, [pc, #8]	; (80908 <PIOA_Handler+0x10>)
   80900:	4798      	blx	r3
   80902:	bd08      	pop	{r3, pc}
   80904:	400e0e00 	.word	0x400e0e00
   80908:	00080865 	.word	0x00080865

0008090c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8090c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8090e:	4802      	ldr	r0, [pc, #8]	; (80918 <PIOB_Handler+0xc>)
   80910:	210c      	movs	r1, #12
   80912:	4b02      	ldr	r3, [pc, #8]	; (8091c <PIOB_Handler+0x10>)
   80914:	4798      	blx	r3
   80916:	bd08      	pop	{r3, pc}
   80918:	400e1000 	.word	0x400e1000
   8091c:	00080865 	.word	0x00080865

00080920 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80920:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80922:	4802      	ldr	r0, [pc, #8]	; (8092c <PIOC_Handler+0xc>)
   80924:	210d      	movs	r1, #13
   80926:	4b02      	ldr	r3, [pc, #8]	; (80930 <PIOC_Handler+0x10>)
   80928:	4798      	blx	r3
   8092a:	bd08      	pop	{r3, pc}
   8092c:	400e1200 	.word	0x400e1200
   80930:	00080865 	.word	0x00080865

00080934 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80934:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80936:	4802      	ldr	r0, [pc, #8]	; (80940 <PIOD_Handler+0xc>)
   80938:	210e      	movs	r1, #14
   8093a:	4b02      	ldr	r3, [pc, #8]	; (80944 <PIOD_Handler+0x10>)
   8093c:	4798      	blx	r3
   8093e:	bd08      	pop	{r3, pc}
   80940:	400e1400 	.word	0x400e1400
   80944:	00080865 	.word	0x00080865

00080948 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80948:	4b17      	ldr	r3, [pc, #92]	; (809a8 <pmc_switch_mck_to_pllack+0x60>)
   8094a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8094c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   80950:	4310      	orrs	r0, r2
   80952:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80956:	f013 0f08 	tst.w	r3, #8
   8095a:	d109      	bne.n	80970 <pmc_switch_mck_to_pllack+0x28>
   8095c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80960:	4911      	ldr	r1, [pc, #68]	; (809a8 <pmc_switch_mck_to_pllack+0x60>)
   80962:	e001      	b.n	80968 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80964:	3b01      	subs	r3, #1
   80966:	d019      	beq.n	8099c <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80968:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8096a:	f012 0f08 	tst.w	r2, #8
   8096e:	d0f9      	beq.n	80964 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80970:	4b0d      	ldr	r3, [pc, #52]	; (809a8 <pmc_switch_mck_to_pllack+0x60>)
   80972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80974:	f022 0203 	bic.w	r2, r2, #3
   80978:	f042 0202 	orr.w	r2, r2, #2
   8097c:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8097e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80980:	f010 0008 	ands.w	r0, r0, #8
   80984:	d10c      	bne.n	809a0 <pmc_switch_mck_to_pllack+0x58>
   80986:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8098a:	4907      	ldr	r1, [pc, #28]	; (809a8 <pmc_switch_mck_to_pllack+0x60>)
   8098c:	e001      	b.n	80992 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8098e:	3b01      	subs	r3, #1
   80990:	d008      	beq.n	809a4 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80992:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80994:	f012 0f08 	tst.w	r2, #8
   80998:	d0f9      	beq.n	8098e <pmc_switch_mck_to_pllack+0x46>
   8099a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8099c:	2001      	movs	r0, #1
   8099e:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   809a0:	2000      	movs	r0, #0
   809a2:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   809a4:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   809a6:	4770      	bx	lr
   809a8:	400e0600 	.word	0x400e0600

000809ac <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   809ac:	b138      	cbz	r0, 809be <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   809ae:	4911      	ldr	r1, [pc, #68]	; (809f4 <pmc_switch_mainck_to_xtal+0x48>)
   809b0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   809b2:	4a11      	ldr	r2, [pc, #68]	; (809f8 <pmc_switch_mainck_to_xtal+0x4c>)
   809b4:	401a      	ands	r2, r3
   809b6:	4b11      	ldr	r3, [pc, #68]	; (809fc <pmc_switch_mainck_to_xtal+0x50>)
   809b8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   809ba:	620b      	str	r3, [r1, #32]
   809bc:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   809be:	4a0d      	ldr	r2, [pc, #52]	; (809f4 <pmc_switch_mainck_to_xtal+0x48>)
   809c0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   809c2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   809c6:	f023 0303 	bic.w	r3, r3, #3
   809ca:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   809ce:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   809d2:	0209      	lsls	r1, r1, #8
   809d4:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   809d6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   809d8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   809da:	6e93      	ldr	r3, [r2, #104]	; 0x68
   809dc:	f013 0f01 	tst.w	r3, #1
   809e0:	d0fb      	beq.n	809da <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   809e2:	4a04      	ldr	r2, [pc, #16]	; (809f4 <pmc_switch_mainck_to_xtal+0x48>)
   809e4:	6a13      	ldr	r3, [r2, #32]
   809e6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   809ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   809ee:	6213      	str	r3, [r2, #32]
   809f0:	4770      	bx	lr
   809f2:	bf00      	nop
   809f4:	400e0600 	.word	0x400e0600
   809f8:	fec8fffc 	.word	0xfec8fffc
   809fc:	01370002 	.word	0x01370002

00080a00 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80a00:	4b02      	ldr	r3, [pc, #8]	; (80a0c <pmc_osc_is_ready_mainck+0xc>)
   80a02:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80a04:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80a08:	4770      	bx	lr
   80a0a:	bf00      	nop
   80a0c:	400e0600 	.word	0x400e0600

00080a10 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80a10:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80a14:	4b01      	ldr	r3, [pc, #4]	; (80a1c <pmc_disable_pllack+0xc>)
   80a16:	629a      	str	r2, [r3, #40]	; 0x28
   80a18:	4770      	bx	lr
   80a1a:	bf00      	nop
   80a1c:	400e0600 	.word	0x400e0600

00080a20 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80a20:	4b02      	ldr	r3, [pc, #8]	; (80a2c <pmc_is_locked_pllack+0xc>)
   80a22:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80a24:	f000 0002 	and.w	r0, r0, #2
   80a28:	4770      	bx	lr
   80a2a:	bf00      	nop
   80a2c:	400e0600 	.word	0x400e0600

00080a30 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80a30:	282c      	cmp	r0, #44	; 0x2c
   80a32:	d820      	bhi.n	80a76 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80a34:	281f      	cmp	r0, #31
   80a36:	d80d      	bhi.n	80a54 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80a38:	4b12      	ldr	r3, [pc, #72]	; (80a84 <pmc_enable_periph_clk+0x54>)
   80a3a:	699a      	ldr	r2, [r3, #24]
   80a3c:	2301      	movs	r3, #1
   80a3e:	4083      	lsls	r3, r0
   80a40:	401a      	ands	r2, r3
   80a42:	4293      	cmp	r3, r2
   80a44:	d019      	beq.n	80a7a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80a46:	2301      	movs	r3, #1
   80a48:	fa03 f000 	lsl.w	r0, r3, r0
   80a4c:	4b0d      	ldr	r3, [pc, #52]	; (80a84 <pmc_enable_periph_clk+0x54>)
   80a4e:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80a50:	2000      	movs	r0, #0
   80a52:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80a54:	4b0b      	ldr	r3, [pc, #44]	; (80a84 <pmc_enable_periph_clk+0x54>)
   80a56:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   80a5a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80a5c:	2301      	movs	r3, #1
   80a5e:	4083      	lsls	r3, r0
   80a60:	401a      	ands	r2, r3
   80a62:	4293      	cmp	r3, r2
   80a64:	d00b      	beq.n	80a7e <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80a66:	2301      	movs	r3, #1
   80a68:	fa03 f000 	lsl.w	r0, r3, r0
   80a6c:	4b05      	ldr	r3, [pc, #20]	; (80a84 <pmc_enable_periph_clk+0x54>)
   80a6e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80a72:	2000      	movs	r0, #0
   80a74:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80a76:	2001      	movs	r0, #1
   80a78:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80a7a:	2000      	movs	r0, #0
   80a7c:	4770      	bx	lr
   80a7e:	2000      	movs	r0, #0
}
   80a80:	4770      	bx	lr
   80a82:	bf00      	nop
   80a84:	400e0600 	.word	0x400e0600

00080a88 <pmc_set_writeprotect>:
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
   80a88:	b120      	cbz	r0, 80a94 <pmc_set_writeprotect+0xc>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
   80a8a:	4a05      	ldr	r2, [pc, #20]	; (80aa0 <pmc_set_writeprotect+0x18>)
   80a8c:	4b05      	ldr	r3, [pc, #20]	; (80aa4 <pmc_set_writeprotect+0x1c>)
   80a8e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   80a92:	4770      	bx	lr
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
   80a94:	4a04      	ldr	r2, [pc, #16]	; (80aa8 <pmc_set_writeprotect+0x20>)
   80a96:	4b03      	ldr	r3, [pc, #12]	; (80aa4 <pmc_set_writeprotect+0x1c>)
   80a98:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   80a9c:	4770      	bx	lr
   80a9e:	bf00      	nop
   80aa0:	504d4301 	.word	0x504d4301
   80aa4:	400e0600 	.word	0x400e0600
   80aa8:	504d4300 	.word	0x504d4300

00080aac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80aac:	e7fe      	b.n	80aac <Dummy_Handler>
   80aae:	bf00      	nop

00080ab0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80ab0:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80ab2:	4b1e      	ldr	r3, [pc, #120]	; (80b2c <Reset_Handler+0x7c>)
   80ab4:	4a1e      	ldr	r2, [pc, #120]	; (80b30 <Reset_Handler+0x80>)
   80ab6:	429a      	cmp	r2, r3
   80ab8:	d003      	beq.n	80ac2 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80aba:	4b1e      	ldr	r3, [pc, #120]	; (80b34 <Reset_Handler+0x84>)
   80abc:	4a1b      	ldr	r2, [pc, #108]	; (80b2c <Reset_Handler+0x7c>)
   80abe:	429a      	cmp	r2, r3
   80ac0:	d304      	bcc.n	80acc <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80ac2:	4b1d      	ldr	r3, [pc, #116]	; (80b38 <Reset_Handler+0x88>)
   80ac4:	4a1d      	ldr	r2, [pc, #116]	; (80b3c <Reset_Handler+0x8c>)
   80ac6:	429a      	cmp	r2, r3
   80ac8:	d30f      	bcc.n	80aea <Reset_Handler+0x3a>
   80aca:	e01a      	b.n	80b02 <Reset_Handler+0x52>
   80acc:	4b1c      	ldr	r3, [pc, #112]	; (80b40 <Reset_Handler+0x90>)
   80ace:	4c1d      	ldr	r4, [pc, #116]	; (80b44 <Reset_Handler+0x94>)
   80ad0:	1ae4      	subs	r4, r4, r3
   80ad2:	f024 0403 	bic.w	r4, r4, #3
   80ad6:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80ad8:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80ada:	4814      	ldr	r0, [pc, #80]	; (80b2c <Reset_Handler+0x7c>)
   80adc:	4914      	ldr	r1, [pc, #80]	; (80b30 <Reset_Handler+0x80>)
   80ade:	585a      	ldr	r2, [r3, r1]
   80ae0:	501a      	str	r2, [r3, r0]
   80ae2:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80ae4:	42a3      	cmp	r3, r4
   80ae6:	d1fa      	bne.n	80ade <Reset_Handler+0x2e>
   80ae8:	e7eb      	b.n	80ac2 <Reset_Handler+0x12>
   80aea:	4b17      	ldr	r3, [pc, #92]	; (80b48 <Reset_Handler+0x98>)
   80aec:	4917      	ldr	r1, [pc, #92]	; (80b4c <Reset_Handler+0x9c>)
   80aee:	1ac9      	subs	r1, r1, r3
   80af0:	f021 0103 	bic.w	r1, r1, #3
   80af4:	1d1a      	adds	r2, r3, #4
   80af6:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80af8:	2200      	movs	r2, #0
   80afa:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80afe:	428b      	cmp	r3, r1
   80b00:	d1fb      	bne.n	80afa <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80b02:	4a13      	ldr	r2, [pc, #76]	; (80b50 <Reset_Handler+0xa0>)
   80b04:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80b08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80b0c:	4911      	ldr	r1, [pc, #68]	; (80b54 <Reset_Handler+0xa4>)
   80b0e:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80b10:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80b14:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80b18:	d203      	bcs.n	80b22 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80b1a:	688a      	ldr	r2, [r1, #8]
   80b1c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80b20:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80b22:	4b0d      	ldr	r3, [pc, #52]	; (80b58 <Reset_Handler+0xa8>)
   80b24:	4798      	blx	r3

	/* Branch to main function */
	main();
   80b26:	4b0d      	ldr	r3, [pc, #52]	; (80b5c <Reset_Handler+0xac>)
   80b28:	4798      	blx	r3
   80b2a:	e7fe      	b.n	80b2a <Reset_Handler+0x7a>
   80b2c:	20070000 	.word	0x20070000
   80b30:	00084760 	.word	0x00084760
   80b34:	200709a4 	.word	0x200709a4
   80b38:	20070a94 	.word	0x20070a94
   80b3c:	200709a8 	.word	0x200709a8
   80b40:	20070004 	.word	0x20070004
   80b44:	200709a7 	.word	0x200709a7
   80b48:	200709a4 	.word	0x200709a4
   80b4c:	20070a8f 	.word	0x20070a8f
   80b50:	00080000 	.word	0x00080000
   80b54:	e000ed00 	.word	0xe000ed00
   80b58:	00081ce9 	.word	0x00081ce9
   80b5c:	00080df9 	.word	0x00080df9

00080b60 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80b60:	4b3e      	ldr	r3, [pc, #248]	; (80c5c <SystemCoreClockUpdate+0xfc>)
   80b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b64:	f003 0303 	and.w	r3, r3, #3
   80b68:	2b03      	cmp	r3, #3
   80b6a:	d85f      	bhi.n	80c2c <SystemCoreClockUpdate+0xcc>
   80b6c:	e8df f003 	tbb	[pc, r3]
   80b70:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80b74:	4b3a      	ldr	r3, [pc, #232]	; (80c60 <SystemCoreClockUpdate+0x100>)
   80b76:	695b      	ldr	r3, [r3, #20]
   80b78:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80b7c:	bf14      	ite	ne
   80b7e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80b82:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80b86:	4b37      	ldr	r3, [pc, #220]	; (80c64 <SystemCoreClockUpdate+0x104>)
   80b88:	601a      	str	r2, [r3, #0]
   80b8a:	e04f      	b.n	80c2c <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80b8c:	4b33      	ldr	r3, [pc, #204]	; (80c5c <SystemCoreClockUpdate+0xfc>)
   80b8e:	6a1b      	ldr	r3, [r3, #32]
   80b90:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80b94:	d003      	beq.n	80b9e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b96:	4a34      	ldr	r2, [pc, #208]	; (80c68 <SystemCoreClockUpdate+0x108>)
   80b98:	4b32      	ldr	r3, [pc, #200]	; (80c64 <SystemCoreClockUpdate+0x104>)
   80b9a:	601a      	str	r2, [r3, #0]
   80b9c:	e046      	b.n	80c2c <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80b9e:	4a33      	ldr	r2, [pc, #204]	; (80c6c <SystemCoreClockUpdate+0x10c>)
   80ba0:	4b30      	ldr	r3, [pc, #192]	; (80c64 <SystemCoreClockUpdate+0x104>)
   80ba2:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80ba4:	4b2d      	ldr	r3, [pc, #180]	; (80c5c <SystemCoreClockUpdate+0xfc>)
   80ba6:	6a1b      	ldr	r3, [r3, #32]
   80ba8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80bac:	2b10      	cmp	r3, #16
   80bae:	d002      	beq.n	80bb6 <SystemCoreClockUpdate+0x56>
   80bb0:	2b20      	cmp	r3, #32
   80bb2:	d004      	beq.n	80bbe <SystemCoreClockUpdate+0x5e>
   80bb4:	e03a      	b.n	80c2c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80bb6:	4a2e      	ldr	r2, [pc, #184]	; (80c70 <SystemCoreClockUpdate+0x110>)
   80bb8:	4b2a      	ldr	r3, [pc, #168]	; (80c64 <SystemCoreClockUpdate+0x104>)
   80bba:	601a      	str	r2, [r3, #0]
				break;
   80bbc:	e036      	b.n	80c2c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80bbe:	4a2a      	ldr	r2, [pc, #168]	; (80c68 <SystemCoreClockUpdate+0x108>)
   80bc0:	4b28      	ldr	r3, [pc, #160]	; (80c64 <SystemCoreClockUpdate+0x104>)
   80bc2:	601a      	str	r2, [r3, #0]
				break;
   80bc4:	e032      	b.n	80c2c <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80bc6:	4b25      	ldr	r3, [pc, #148]	; (80c5c <SystemCoreClockUpdate+0xfc>)
   80bc8:	6a1b      	ldr	r3, [r3, #32]
   80bca:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80bce:	d003      	beq.n	80bd8 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80bd0:	4a25      	ldr	r2, [pc, #148]	; (80c68 <SystemCoreClockUpdate+0x108>)
   80bd2:	4b24      	ldr	r3, [pc, #144]	; (80c64 <SystemCoreClockUpdate+0x104>)
   80bd4:	601a      	str	r2, [r3, #0]
   80bd6:	e012      	b.n	80bfe <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80bd8:	4a24      	ldr	r2, [pc, #144]	; (80c6c <SystemCoreClockUpdate+0x10c>)
   80bda:	4b22      	ldr	r3, [pc, #136]	; (80c64 <SystemCoreClockUpdate+0x104>)
   80bdc:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80bde:	4b1f      	ldr	r3, [pc, #124]	; (80c5c <SystemCoreClockUpdate+0xfc>)
   80be0:	6a1b      	ldr	r3, [r3, #32]
   80be2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80be6:	2b10      	cmp	r3, #16
   80be8:	d002      	beq.n	80bf0 <SystemCoreClockUpdate+0x90>
   80bea:	2b20      	cmp	r3, #32
   80bec:	d004      	beq.n	80bf8 <SystemCoreClockUpdate+0x98>
   80bee:	e006      	b.n	80bfe <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80bf0:	4a1f      	ldr	r2, [pc, #124]	; (80c70 <SystemCoreClockUpdate+0x110>)
   80bf2:	4b1c      	ldr	r3, [pc, #112]	; (80c64 <SystemCoreClockUpdate+0x104>)
   80bf4:	601a      	str	r2, [r3, #0]
				break;
   80bf6:	e002      	b.n	80bfe <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80bf8:	4a1b      	ldr	r2, [pc, #108]	; (80c68 <SystemCoreClockUpdate+0x108>)
   80bfa:	4b1a      	ldr	r3, [pc, #104]	; (80c64 <SystemCoreClockUpdate+0x104>)
   80bfc:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80bfe:	4b17      	ldr	r3, [pc, #92]	; (80c5c <SystemCoreClockUpdate+0xfc>)
   80c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80c02:	f003 0303 	and.w	r3, r3, #3
   80c06:	2b02      	cmp	r3, #2
   80c08:	d10d      	bne.n	80c26 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80c0a:	4b14      	ldr	r3, [pc, #80]	; (80c5c <SystemCoreClockUpdate+0xfc>)
   80c0c:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80c0e:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80c10:	4b14      	ldr	r3, [pc, #80]	; (80c64 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80c12:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80c16:	681a      	ldr	r2, [r3, #0]
   80c18:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80c1c:	b2c9      	uxtb	r1, r1
   80c1e:	fbb2 f2f1 	udiv	r2, r2, r1
   80c22:	601a      	str	r2, [r3, #0]
   80c24:	e002      	b.n	80c2c <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80c26:	4a13      	ldr	r2, [pc, #76]	; (80c74 <SystemCoreClockUpdate+0x114>)
   80c28:	4b0e      	ldr	r3, [pc, #56]	; (80c64 <SystemCoreClockUpdate+0x104>)
   80c2a:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80c2c:	4b0b      	ldr	r3, [pc, #44]	; (80c5c <SystemCoreClockUpdate+0xfc>)
   80c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80c30:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80c34:	2b70      	cmp	r3, #112	; 0x70
   80c36:	d107      	bne.n	80c48 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80c38:	4b0a      	ldr	r3, [pc, #40]	; (80c64 <SystemCoreClockUpdate+0x104>)
   80c3a:	681a      	ldr	r2, [r3, #0]
   80c3c:	490e      	ldr	r1, [pc, #56]	; (80c78 <SystemCoreClockUpdate+0x118>)
   80c3e:	fba1 0202 	umull	r0, r2, r1, r2
   80c42:	0852      	lsrs	r2, r2, #1
   80c44:	601a      	str	r2, [r3, #0]
   80c46:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80c48:	4b04      	ldr	r3, [pc, #16]	; (80c5c <SystemCoreClockUpdate+0xfc>)
   80c4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80c4c:	4b05      	ldr	r3, [pc, #20]	; (80c64 <SystemCoreClockUpdate+0x104>)
   80c4e:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80c52:	681a      	ldr	r2, [r3, #0]
   80c54:	40ca      	lsrs	r2, r1
   80c56:	601a      	str	r2, [r3, #0]
   80c58:	4770      	bx	lr
   80c5a:	bf00      	nop
   80c5c:	400e0600 	.word	0x400e0600
   80c60:	400e1a10 	.word	0x400e1a10
   80c64:	20070138 	.word	0x20070138
   80c68:	00b71b00 	.word	0x00b71b00
   80c6c:	003d0900 	.word	0x003d0900
   80c70:	007a1200 	.word	0x007a1200
   80c74:	0e4e1c00 	.word	0x0e4e1c00
   80c78:	aaaaaaab 	.word	0xaaaaaaab

00080c7c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80c7c:	4b09      	ldr	r3, [pc, #36]	; (80ca4 <_sbrk+0x28>)
   80c7e:	681b      	ldr	r3, [r3, #0]
   80c80:	b913      	cbnz	r3, 80c88 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80c82:	4a09      	ldr	r2, [pc, #36]	; (80ca8 <_sbrk+0x2c>)
   80c84:	4b07      	ldr	r3, [pc, #28]	; (80ca4 <_sbrk+0x28>)
   80c86:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80c88:	4b06      	ldr	r3, [pc, #24]	; (80ca4 <_sbrk+0x28>)
   80c8a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80c8c:	181a      	adds	r2, r3, r0
   80c8e:	4907      	ldr	r1, [pc, #28]	; (80cac <_sbrk+0x30>)
   80c90:	4291      	cmp	r1, r2
   80c92:	db04      	blt.n	80c9e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80c94:	4610      	mov	r0, r2
   80c96:	4a03      	ldr	r2, [pc, #12]	; (80ca4 <_sbrk+0x28>)
   80c98:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80c9a:	4618      	mov	r0, r3
   80c9c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80c9e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80ca2:	4770      	bx	lr
   80ca4:	20070a40 	.word	0x20070a40
   80ca8:	20072a98 	.word	0x20072a98
   80cac:	20087ffc 	.word	0x20087ffc

00080cb0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80cb0:	f04f 30ff 	mov.w	r0, #4294967295
   80cb4:	4770      	bx	lr
   80cb6:	bf00      	nop

00080cb8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80cbc:	604b      	str	r3, [r1, #4]

	return 0;
}
   80cbe:	2000      	movs	r0, #0
   80cc0:	4770      	bx	lr
   80cc2:	bf00      	nop

00080cc4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80cc4:	2001      	movs	r0, #1
   80cc6:	4770      	bx	lr

00080cc8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80cc8:	2000      	movs	r0, #0
   80cca:	4770      	bx	lr
   80ccc:	0000      	movs	r0, r0
	...

00080cd0 <pulse>:
#include "pulseCounterHandler.h"

double distanceToMove;

//Sends the pulse to the engine
void pulse(uint16_t motorSpeed){
   80cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80cd2:	4c0d      	ldr	r4, [pc, #52]	; (80d08 <pulse+0x38>)
   80cd4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   80cd8:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(pin24, HIGH);
	delay_us(motorSpeed);
   80cda:	a309      	add	r3, pc, #36	; (adr r3, 80d00 <pulse+0x30>)
   80cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   80ce0:	490a      	ldr	r1, [pc, #40]	; (80d0c <pulse+0x3c>)
   80ce2:	4616      	mov	r6, r2
   80ce4:	461f      	mov	r7, r3
   80ce6:	fbe1 6700 	umlal	r6, r7, r1, r0
   80cea:	4630      	mov	r0, r6
   80cec:	4639      	mov	r1, r7
   80cee:	4a08      	ldr	r2, [pc, #32]	; (80d10 <pulse+0x40>)
   80cf0:	2300      	movs	r3, #0
   80cf2:	4e08      	ldr	r6, [pc, #32]	; (80d14 <pulse+0x44>)
   80cf4:	47b0      	blx	r6
   80cf6:	4b08      	ldr	r3, [pc, #32]	; (80d18 <pulse+0x48>)
   80cf8:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80cfa:	6365      	str	r5, [r4, #52]	; 0x34
   80cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80cfe:	bf00      	nop
   80d00:	00d59f7f 	.word	0x00d59f7f
   80d04:	00000000 	.word	0x00000000
   80d08:	400e0e00 	.word	0x400e0e00
   80d0c:	0501bd00 	.word	0x0501bd00
   80d10:	00d59f80 	.word	0x00d59f80
   80d14:	00081729 	.word	0x00081729
   80d18:	20070001 	.word	0x20070001
   80d1c:	f3af 8000 	nop.w

00080d20 <stop>:
	pulse(reverseBaseSpeed);
	delay_ms(timeOut);
}

//Stops both of the engines
void stop(){
   80d20:	b538      	push	{r3, r4, r5, lr}
	pulse(1500);
   80d22:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80d26:	4d06      	ldr	r5, [pc, #24]	; (80d40 <stop+0x20>)
   80d28:	47a8      	blx	r5
	delay_us(motorSwitch);
   80d2a:	f641 10c8 	movw	r0, #6600	; 0x19c8
   80d2e:	4c05      	ldr	r4, [pc, #20]	; (80d44 <stop+0x24>)
   80d30:	47a0      	blx	r4
	pulse(1500);
   80d32:	f240 50dc 	movw	r0, #1500	; 0x5dc
   80d36:	47a8      	blx	r5
	delay_ms(timeOut);
   80d38:	4803      	ldr	r0, [pc, #12]	; (80d48 <stop+0x28>)
   80d3a:	47a0      	blx	r4
   80d3c:	bd38      	pop	{r3, r4, r5, pc}
   80d3e:	bf00      	nop
   80d40:	00080cd1 	.word	0x00080cd1
   80d44:	20070001 	.word	0x20070001
   80d48:	0036ee80 	.word	0x0036ee80
   80d4c:	00000000 	.word	0x00000000

00080d50 <reverseDrive>:
	counterB = 0;
}

//Sets both engines to go the same direction with the "same" speed (reverse)
//@Depricated
void reverseDrive(int distance){
   80d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d52:	4606      	mov	r6, r0
	stop();
   80d54:	4b1e      	ldr	r3, [pc, #120]	; (80dd0 <reverseDrive+0x80>)
   80d56:	4798      	blx	r3
	distanceToMove = distance/1.355;
   80d58:	4c1e      	ldr	r4, [pc, #120]	; (80dd4 <reverseDrive+0x84>)
   80d5a:	4d1f      	ldr	r5, [pc, #124]	; (80dd8 <reverseDrive+0x88>)
   80d5c:	4630      	mov	r0, r6
   80d5e:	47a8      	blx	r5
   80d60:	a319      	add	r3, pc, #100	; (adr r3, 80dc8 <reverseDrive+0x78>)
   80d62:	e9d3 2300 	ldrd	r2, r3, [r3]
   80d66:	4e1d      	ldr	r6, [pc, #116]	; (80ddc <reverseDrive+0x8c>)
   80d68:	47b0      	blx	r6
   80d6a:	e9c4 0100 	strd	r0, r1, [r4]
	counterA = 0;
   80d6e:	4e1c      	ldr	r6, [pc, #112]	; (80de0 <reverseDrive+0x90>)
   80d70:	2300      	movs	r3, #0
   80d72:	6033      	str	r3, [r6, #0]
	counterB = 0;
   80d74:	4a1b      	ldr	r2, [pc, #108]	; (80de4 <reverseDrive+0x94>)
   80d76:	6013      	str	r3, [r2, #0]
	
	pulse(reverseBaseSpeed);
   80d78:	f44f 60a0 	mov.w	r0, #1280	; 0x500
   80d7c:	4f1a      	ldr	r7, [pc, #104]	; (80de8 <reverseDrive+0x98>)
   80d7e:	47b8      	blx	r7
	delay_us(motorSwitch);
   80d80:	f641 10c8 	movw	r0, #6600	; 0x19c8
   80d84:	4b19      	ldr	r3, [pc, #100]	; (80dec <reverseDrive+0x9c>)
   80d86:	4798      	blx	r3
	pulse(reverseBaseSpeed);
   80d88:	f44f 60a0 	mov.w	r0, #1280	; 0x500
   80d8c:	47b8      	blx	r7
	
	while (counterA<distanceToMove)
   80d8e:	6830      	ldr	r0, [r6, #0]
   80d90:	47a8      	blx	r5
   80d92:	e9d4 2300 	ldrd	r2, r3, [r4]
   80d96:	4c16      	ldr	r4, [pc, #88]	; (80df0 <reverseDrive+0xa0>)
   80d98:	47a0      	blx	r4
   80d9a:	b160      	cbz	r0, 80db6 <reverseDrive+0x66>
	{
		delay_ms(1);
   80d9c:	4f13      	ldr	r7, [pc, #76]	; (80dec <reverseDrive+0x9c>)
   80d9e:	f241 7070 	movw	r0, #6000	; 0x1770
   80da2:	47b8      	blx	r7
	
	pulse(reverseBaseSpeed);
	delay_us(motorSwitch);
	pulse(reverseBaseSpeed);
	
	while (counterA<distanceToMove)
   80da4:	6830      	ldr	r0, [r6, #0]
   80da6:	47a8      	blx	r5
   80da8:	4b0a      	ldr	r3, [pc, #40]	; (80dd4 <reverseDrive+0x84>)
   80daa:	e9d3 2300 	ldrd	r2, r3, [r3]
   80dae:	4c10      	ldr	r4, [pc, #64]	; (80df0 <reverseDrive+0xa0>)
   80db0:	47a0      	blx	r4
   80db2:	2800      	cmp	r0, #0
   80db4:	d1f3      	bne.n	80d9e <reverseDrive+0x4e>
	{
		delay_ms(1);
	}
	
	stop();
   80db6:	4b06      	ldr	r3, [pc, #24]	; (80dd0 <reverseDrive+0x80>)
   80db8:	4798      	blx	r3
	counterA = 0;
   80dba:	2300      	movs	r3, #0
   80dbc:	4a08      	ldr	r2, [pc, #32]	; (80de0 <reverseDrive+0x90>)
   80dbe:	6013      	str	r3, [r2, #0]
	counterB = 0;
   80dc0:	4a08      	ldr	r2, [pc, #32]	; (80de4 <reverseDrive+0x94>)
   80dc2:	6013      	str	r3, [r2, #0]
   80dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80dc6:	bf00      	nop
   80dc8:	7ae147ae 	.word	0x7ae147ae
   80dcc:	3ff5ae14 	.word	0x3ff5ae14
   80dd0:	00080d21 	.word	0x00080d21
   80dd4:	20070a88 	.word	0x20070a88
   80dd8:	00081129 	.word	0x00081129
   80ddc:	00081449 	.word	0x00081449
   80de0:	200709c4 	.word	0x200709c4
   80de4:	200709c8 	.word	0x200709c8
   80de8:	00080cd1 	.word	0x00080cd1
   80dec:	20070001 	.word	0x20070001
   80df0:	000816d9 	.word	0x000816d9
   80df4:	f3af 8000 	nop.w

00080df8 <main>:
#include "Hjulreglering.h"
#include "navigation.h"


int main (void)
{
   80df8:	b570      	push	{r4, r5, r6, lr}
	sysclk_init();
   80dfa:	4b17      	ldr	r3, [pc, #92]	; (80e58 <main+0x60>)
   80dfc:	4798      	blx	r3
	board_init();
   80dfe:	4b17      	ldr	r3, [pc, #92]	; (80e5c <main+0x64>)
   80e00:	4798      	blx	r3
	configureConsole();
   80e02:	4b17      	ldr	r3, [pc, #92]	; (80e60 <main+0x68>)
   80e04:	4798      	blx	r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80e06:	4b17      	ldr	r3, [pc, #92]	; (80e64 <main+0x6c>)
   80e08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80e0c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80e0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80e12:	4c15      	ldr	r4, [pc, #84]	; (80e68 <main+0x70>)
   80e14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   80e18:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80e1a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80e1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   80e22:	6163      	str	r3, [r4, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80e24:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	ioport_set_pin_dir(pin24,IOPORT_DIR_OUTPUT);
	
	
	ioport_set_pin_dir(trig,IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(echo, IOPORT_DIR_INPUT);
	pulseCounter_configA(ID_PIOC, PIOC, PIO_PC28);
   80e28:	200d      	movs	r0, #13
   80e2a:	4621      	mov	r1, r4
   80e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80e30:	4b0e      	ldr	r3, [pc, #56]	; (80e6c <main+0x74>)
   80e32:	4798      	blx	r3
	pulseCounter_configB(ID_PIOC, PIOC, PIO_PC23);
   80e34:	200d      	movs	r0, #13
   80e36:	4621      	mov	r1, r4
   80e38:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80e3c:	4b0c      	ldr	r3, [pc, #48]	; (80e70 <main+0x78>)
   80e3e:	4798      	blx	r3
	
	//Starts with a delay simply to reduce the chance of an error occuring when reseting the program.
	delay_ms(2000);
   80e40:	480c      	ldr	r0, [pc, #48]	; (80e74 <main+0x7c>)
   80e42:	4b0d      	ldr	r3, [pc, #52]	; (80e78 <main+0x80>)
   80e44:	4798      	blx	r3
	double someVal=0;
	while (1)
	{
		//forwardDrive(100);
		//delay_ms(3000);
		reverseDrive(100);
   80e46:	4e0d      	ldr	r6, [pc, #52]	; (80e7c <main+0x84>)
		delay_ms(3000);
   80e48:	4d0d      	ldr	r5, [pc, #52]	; (80e80 <main+0x88>)
   80e4a:	4c0b      	ldr	r4, [pc, #44]	; (80e78 <main+0x80>)
	double someVal=0;
	while (1)
	{
		//forwardDrive(100);
		//delay_ms(3000);
		reverseDrive(100);
   80e4c:	2064      	movs	r0, #100	; 0x64
   80e4e:	47b0      	blx	r6
		delay_ms(3000);
   80e50:	4628      	mov	r0, r5
   80e52:	47a0      	blx	r4
   80e54:	e7fa      	b.n	80e4c <main+0x54>
   80e56:	bf00      	nop
   80e58:	00080541 	.word	0x00080541
   80e5c:	000805a5 	.word	0x000805a5
   80e60:	00080299 	.word	0x00080299
   80e64:	400e0e00 	.word	0x400e0e00
   80e68:	400e1200 	.word	0x400e1200
   80e6c:	00080481 	.word	0x00080481
   80e70:	000804e1 	.word	0x000804e1
   80e74:	00b71b00 	.word	0x00b71b00
   80e78:	20070001 	.word	0x20070001
   80e7c:	00080d51 	.word	0x00080d51
   80e80:	0112a880 	.word	0x0112a880

00080e84 <__aeabi_drsub>:
   80e84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80e88:	e002      	b.n	80e90 <__adddf3>
   80e8a:	bf00      	nop

00080e8c <__aeabi_dsub>:
   80e8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080e90 <__adddf3>:
   80e90:	b530      	push	{r4, r5, lr}
   80e92:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80e96:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80e9a:	ea94 0f05 	teq	r4, r5
   80e9e:	bf08      	it	eq
   80ea0:	ea90 0f02 	teqeq	r0, r2
   80ea4:	bf1f      	itttt	ne
   80ea6:	ea54 0c00 	orrsne.w	ip, r4, r0
   80eaa:	ea55 0c02 	orrsne.w	ip, r5, r2
   80eae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80eb2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80eb6:	f000 80e2 	beq.w	8107e <__adddf3+0x1ee>
   80eba:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80ebe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80ec2:	bfb8      	it	lt
   80ec4:	426d      	neglt	r5, r5
   80ec6:	dd0c      	ble.n	80ee2 <__adddf3+0x52>
   80ec8:	442c      	add	r4, r5
   80eca:	ea80 0202 	eor.w	r2, r0, r2
   80ece:	ea81 0303 	eor.w	r3, r1, r3
   80ed2:	ea82 0000 	eor.w	r0, r2, r0
   80ed6:	ea83 0101 	eor.w	r1, r3, r1
   80eda:	ea80 0202 	eor.w	r2, r0, r2
   80ede:	ea81 0303 	eor.w	r3, r1, r3
   80ee2:	2d36      	cmp	r5, #54	; 0x36
   80ee4:	bf88      	it	hi
   80ee6:	bd30      	pophi	{r4, r5, pc}
   80ee8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80eec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80ef0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80ef4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80ef8:	d002      	beq.n	80f00 <__adddf3+0x70>
   80efa:	4240      	negs	r0, r0
   80efc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80f00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80f04:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80f08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80f0c:	d002      	beq.n	80f14 <__adddf3+0x84>
   80f0e:	4252      	negs	r2, r2
   80f10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80f14:	ea94 0f05 	teq	r4, r5
   80f18:	f000 80a7 	beq.w	8106a <__adddf3+0x1da>
   80f1c:	f1a4 0401 	sub.w	r4, r4, #1
   80f20:	f1d5 0e20 	rsbs	lr, r5, #32
   80f24:	db0d      	blt.n	80f42 <__adddf3+0xb2>
   80f26:	fa02 fc0e 	lsl.w	ip, r2, lr
   80f2a:	fa22 f205 	lsr.w	r2, r2, r5
   80f2e:	1880      	adds	r0, r0, r2
   80f30:	f141 0100 	adc.w	r1, r1, #0
   80f34:	fa03 f20e 	lsl.w	r2, r3, lr
   80f38:	1880      	adds	r0, r0, r2
   80f3a:	fa43 f305 	asr.w	r3, r3, r5
   80f3e:	4159      	adcs	r1, r3
   80f40:	e00e      	b.n	80f60 <__adddf3+0xd0>
   80f42:	f1a5 0520 	sub.w	r5, r5, #32
   80f46:	f10e 0e20 	add.w	lr, lr, #32
   80f4a:	2a01      	cmp	r2, #1
   80f4c:	fa03 fc0e 	lsl.w	ip, r3, lr
   80f50:	bf28      	it	cs
   80f52:	f04c 0c02 	orrcs.w	ip, ip, #2
   80f56:	fa43 f305 	asr.w	r3, r3, r5
   80f5a:	18c0      	adds	r0, r0, r3
   80f5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80f60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80f64:	d507      	bpl.n	80f76 <__adddf3+0xe6>
   80f66:	f04f 0e00 	mov.w	lr, #0
   80f6a:	f1dc 0c00 	rsbs	ip, ip, #0
   80f6e:	eb7e 0000 	sbcs.w	r0, lr, r0
   80f72:	eb6e 0101 	sbc.w	r1, lr, r1
   80f76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80f7a:	d31b      	bcc.n	80fb4 <__adddf3+0x124>
   80f7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80f80:	d30c      	bcc.n	80f9c <__adddf3+0x10c>
   80f82:	0849      	lsrs	r1, r1, #1
   80f84:	ea5f 0030 	movs.w	r0, r0, rrx
   80f88:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80f8c:	f104 0401 	add.w	r4, r4, #1
   80f90:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80f94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80f98:	f080 809a 	bcs.w	810d0 <__adddf3+0x240>
   80f9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80fa0:	bf08      	it	eq
   80fa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80fa6:	f150 0000 	adcs.w	r0, r0, #0
   80faa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80fae:	ea41 0105 	orr.w	r1, r1, r5
   80fb2:	bd30      	pop	{r4, r5, pc}
   80fb4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80fb8:	4140      	adcs	r0, r0
   80fba:	eb41 0101 	adc.w	r1, r1, r1
   80fbe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80fc2:	f1a4 0401 	sub.w	r4, r4, #1
   80fc6:	d1e9      	bne.n	80f9c <__adddf3+0x10c>
   80fc8:	f091 0f00 	teq	r1, #0
   80fcc:	bf04      	itt	eq
   80fce:	4601      	moveq	r1, r0
   80fd0:	2000      	moveq	r0, #0
   80fd2:	fab1 f381 	clz	r3, r1
   80fd6:	bf08      	it	eq
   80fd8:	3320      	addeq	r3, #32
   80fda:	f1a3 030b 	sub.w	r3, r3, #11
   80fde:	f1b3 0220 	subs.w	r2, r3, #32
   80fe2:	da0c      	bge.n	80ffe <__adddf3+0x16e>
   80fe4:	320c      	adds	r2, #12
   80fe6:	dd08      	ble.n	80ffa <__adddf3+0x16a>
   80fe8:	f102 0c14 	add.w	ip, r2, #20
   80fec:	f1c2 020c 	rsb	r2, r2, #12
   80ff0:	fa01 f00c 	lsl.w	r0, r1, ip
   80ff4:	fa21 f102 	lsr.w	r1, r1, r2
   80ff8:	e00c      	b.n	81014 <__adddf3+0x184>
   80ffa:	f102 0214 	add.w	r2, r2, #20
   80ffe:	bfd8      	it	le
   81000:	f1c2 0c20 	rsble	ip, r2, #32
   81004:	fa01 f102 	lsl.w	r1, r1, r2
   81008:	fa20 fc0c 	lsr.w	ip, r0, ip
   8100c:	bfdc      	itt	le
   8100e:	ea41 010c 	orrle.w	r1, r1, ip
   81012:	4090      	lslle	r0, r2
   81014:	1ae4      	subs	r4, r4, r3
   81016:	bfa2      	ittt	ge
   81018:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8101c:	4329      	orrge	r1, r5
   8101e:	bd30      	popge	{r4, r5, pc}
   81020:	ea6f 0404 	mvn.w	r4, r4
   81024:	3c1f      	subs	r4, #31
   81026:	da1c      	bge.n	81062 <__adddf3+0x1d2>
   81028:	340c      	adds	r4, #12
   8102a:	dc0e      	bgt.n	8104a <__adddf3+0x1ba>
   8102c:	f104 0414 	add.w	r4, r4, #20
   81030:	f1c4 0220 	rsb	r2, r4, #32
   81034:	fa20 f004 	lsr.w	r0, r0, r4
   81038:	fa01 f302 	lsl.w	r3, r1, r2
   8103c:	ea40 0003 	orr.w	r0, r0, r3
   81040:	fa21 f304 	lsr.w	r3, r1, r4
   81044:	ea45 0103 	orr.w	r1, r5, r3
   81048:	bd30      	pop	{r4, r5, pc}
   8104a:	f1c4 040c 	rsb	r4, r4, #12
   8104e:	f1c4 0220 	rsb	r2, r4, #32
   81052:	fa20 f002 	lsr.w	r0, r0, r2
   81056:	fa01 f304 	lsl.w	r3, r1, r4
   8105a:	ea40 0003 	orr.w	r0, r0, r3
   8105e:	4629      	mov	r1, r5
   81060:	bd30      	pop	{r4, r5, pc}
   81062:	fa21 f004 	lsr.w	r0, r1, r4
   81066:	4629      	mov	r1, r5
   81068:	bd30      	pop	{r4, r5, pc}
   8106a:	f094 0f00 	teq	r4, #0
   8106e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81072:	bf06      	itte	eq
   81074:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81078:	3401      	addeq	r4, #1
   8107a:	3d01      	subne	r5, #1
   8107c:	e74e      	b.n	80f1c <__adddf3+0x8c>
   8107e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81082:	bf18      	it	ne
   81084:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81088:	d029      	beq.n	810de <__adddf3+0x24e>
   8108a:	ea94 0f05 	teq	r4, r5
   8108e:	bf08      	it	eq
   81090:	ea90 0f02 	teqeq	r0, r2
   81094:	d005      	beq.n	810a2 <__adddf3+0x212>
   81096:	ea54 0c00 	orrs.w	ip, r4, r0
   8109a:	bf04      	itt	eq
   8109c:	4619      	moveq	r1, r3
   8109e:	4610      	moveq	r0, r2
   810a0:	bd30      	pop	{r4, r5, pc}
   810a2:	ea91 0f03 	teq	r1, r3
   810a6:	bf1e      	ittt	ne
   810a8:	2100      	movne	r1, #0
   810aa:	2000      	movne	r0, #0
   810ac:	bd30      	popne	{r4, r5, pc}
   810ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   810b2:	d105      	bne.n	810c0 <__adddf3+0x230>
   810b4:	0040      	lsls	r0, r0, #1
   810b6:	4149      	adcs	r1, r1
   810b8:	bf28      	it	cs
   810ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   810be:	bd30      	pop	{r4, r5, pc}
   810c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   810c4:	bf3c      	itt	cc
   810c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   810ca:	bd30      	popcc	{r4, r5, pc}
   810cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   810d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   810d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   810d8:	f04f 0000 	mov.w	r0, #0
   810dc:	bd30      	pop	{r4, r5, pc}
   810de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   810e2:	bf1a      	itte	ne
   810e4:	4619      	movne	r1, r3
   810e6:	4610      	movne	r0, r2
   810e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   810ec:	bf1c      	itt	ne
   810ee:	460b      	movne	r3, r1
   810f0:	4602      	movne	r2, r0
   810f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   810f6:	bf06      	itte	eq
   810f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   810fc:	ea91 0f03 	teqeq	r1, r3
   81100:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81104:	bd30      	pop	{r4, r5, pc}
   81106:	bf00      	nop

00081108 <__aeabi_ui2d>:
   81108:	f090 0f00 	teq	r0, #0
   8110c:	bf04      	itt	eq
   8110e:	2100      	moveq	r1, #0
   81110:	4770      	bxeq	lr
   81112:	b530      	push	{r4, r5, lr}
   81114:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81118:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8111c:	f04f 0500 	mov.w	r5, #0
   81120:	f04f 0100 	mov.w	r1, #0
   81124:	e750      	b.n	80fc8 <__adddf3+0x138>
   81126:	bf00      	nop

00081128 <__aeabi_i2d>:
   81128:	f090 0f00 	teq	r0, #0
   8112c:	bf04      	itt	eq
   8112e:	2100      	moveq	r1, #0
   81130:	4770      	bxeq	lr
   81132:	b530      	push	{r4, r5, lr}
   81134:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81138:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8113c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81140:	bf48      	it	mi
   81142:	4240      	negmi	r0, r0
   81144:	f04f 0100 	mov.w	r1, #0
   81148:	e73e      	b.n	80fc8 <__adddf3+0x138>
   8114a:	bf00      	nop

0008114c <__aeabi_f2d>:
   8114c:	0042      	lsls	r2, r0, #1
   8114e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81152:	ea4f 0131 	mov.w	r1, r1, rrx
   81156:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8115a:	bf1f      	itttt	ne
   8115c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81160:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81164:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81168:	4770      	bxne	lr
   8116a:	f092 0f00 	teq	r2, #0
   8116e:	bf14      	ite	ne
   81170:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81174:	4770      	bxeq	lr
   81176:	b530      	push	{r4, r5, lr}
   81178:	f44f 7460 	mov.w	r4, #896	; 0x380
   8117c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81180:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81184:	e720      	b.n	80fc8 <__adddf3+0x138>
   81186:	bf00      	nop

00081188 <__aeabi_ul2d>:
   81188:	ea50 0201 	orrs.w	r2, r0, r1
   8118c:	bf08      	it	eq
   8118e:	4770      	bxeq	lr
   81190:	b530      	push	{r4, r5, lr}
   81192:	f04f 0500 	mov.w	r5, #0
   81196:	e00a      	b.n	811ae <__aeabi_l2d+0x16>

00081198 <__aeabi_l2d>:
   81198:	ea50 0201 	orrs.w	r2, r0, r1
   8119c:	bf08      	it	eq
   8119e:	4770      	bxeq	lr
   811a0:	b530      	push	{r4, r5, lr}
   811a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   811a6:	d502      	bpl.n	811ae <__aeabi_l2d+0x16>
   811a8:	4240      	negs	r0, r0
   811aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   811ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   811b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   811b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   811ba:	f43f aedc 	beq.w	80f76 <__adddf3+0xe6>
   811be:	f04f 0203 	mov.w	r2, #3
   811c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   811c6:	bf18      	it	ne
   811c8:	3203      	addne	r2, #3
   811ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   811ce:	bf18      	it	ne
   811d0:	3203      	addne	r2, #3
   811d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   811d6:	f1c2 0320 	rsb	r3, r2, #32
   811da:	fa00 fc03 	lsl.w	ip, r0, r3
   811de:	fa20 f002 	lsr.w	r0, r0, r2
   811e2:	fa01 fe03 	lsl.w	lr, r1, r3
   811e6:	ea40 000e 	orr.w	r0, r0, lr
   811ea:	fa21 f102 	lsr.w	r1, r1, r2
   811ee:	4414      	add	r4, r2
   811f0:	e6c1      	b.n	80f76 <__adddf3+0xe6>
   811f2:	bf00      	nop

000811f4 <__aeabi_dmul>:
   811f4:	b570      	push	{r4, r5, r6, lr}
   811f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   811fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   811fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81202:	bf1d      	ittte	ne
   81204:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81208:	ea94 0f0c 	teqne	r4, ip
   8120c:	ea95 0f0c 	teqne	r5, ip
   81210:	f000 f8de 	bleq	813d0 <__aeabi_dmul+0x1dc>
   81214:	442c      	add	r4, r5
   81216:	ea81 0603 	eor.w	r6, r1, r3
   8121a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8121e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81222:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81226:	bf18      	it	ne
   81228:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8122c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81234:	d038      	beq.n	812a8 <__aeabi_dmul+0xb4>
   81236:	fba0 ce02 	umull	ip, lr, r0, r2
   8123a:	f04f 0500 	mov.w	r5, #0
   8123e:	fbe1 e502 	umlal	lr, r5, r1, r2
   81242:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81246:	fbe0 e503 	umlal	lr, r5, r0, r3
   8124a:	f04f 0600 	mov.w	r6, #0
   8124e:	fbe1 5603 	umlal	r5, r6, r1, r3
   81252:	f09c 0f00 	teq	ip, #0
   81256:	bf18      	it	ne
   81258:	f04e 0e01 	orrne.w	lr, lr, #1
   8125c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81260:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81264:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81268:	d204      	bcs.n	81274 <__aeabi_dmul+0x80>
   8126a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8126e:	416d      	adcs	r5, r5
   81270:	eb46 0606 	adc.w	r6, r6, r6
   81274:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81278:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8127c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81280:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81284:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81288:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8128c:	bf88      	it	hi
   8128e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81292:	d81e      	bhi.n	812d2 <__aeabi_dmul+0xde>
   81294:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81298:	bf08      	it	eq
   8129a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8129e:	f150 0000 	adcs.w	r0, r0, #0
   812a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   812a6:	bd70      	pop	{r4, r5, r6, pc}
   812a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   812ac:	ea46 0101 	orr.w	r1, r6, r1
   812b0:	ea40 0002 	orr.w	r0, r0, r2
   812b4:	ea81 0103 	eor.w	r1, r1, r3
   812b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   812bc:	bfc2      	ittt	gt
   812be:	ebd4 050c 	rsbsgt	r5, r4, ip
   812c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   812c6:	bd70      	popgt	{r4, r5, r6, pc}
   812c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   812cc:	f04f 0e00 	mov.w	lr, #0
   812d0:	3c01      	subs	r4, #1
   812d2:	f300 80ab 	bgt.w	8142c <__aeabi_dmul+0x238>
   812d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   812da:	bfde      	ittt	le
   812dc:	2000      	movle	r0, #0
   812de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   812e2:	bd70      	pople	{r4, r5, r6, pc}
   812e4:	f1c4 0400 	rsb	r4, r4, #0
   812e8:	3c20      	subs	r4, #32
   812ea:	da35      	bge.n	81358 <__aeabi_dmul+0x164>
   812ec:	340c      	adds	r4, #12
   812ee:	dc1b      	bgt.n	81328 <__aeabi_dmul+0x134>
   812f0:	f104 0414 	add.w	r4, r4, #20
   812f4:	f1c4 0520 	rsb	r5, r4, #32
   812f8:	fa00 f305 	lsl.w	r3, r0, r5
   812fc:	fa20 f004 	lsr.w	r0, r0, r4
   81300:	fa01 f205 	lsl.w	r2, r1, r5
   81304:	ea40 0002 	orr.w	r0, r0, r2
   81308:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8130c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81310:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81314:	fa21 f604 	lsr.w	r6, r1, r4
   81318:	eb42 0106 	adc.w	r1, r2, r6
   8131c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81320:	bf08      	it	eq
   81322:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81326:	bd70      	pop	{r4, r5, r6, pc}
   81328:	f1c4 040c 	rsb	r4, r4, #12
   8132c:	f1c4 0520 	rsb	r5, r4, #32
   81330:	fa00 f304 	lsl.w	r3, r0, r4
   81334:	fa20 f005 	lsr.w	r0, r0, r5
   81338:	fa01 f204 	lsl.w	r2, r1, r4
   8133c:	ea40 0002 	orr.w	r0, r0, r2
   81340:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81348:	f141 0100 	adc.w	r1, r1, #0
   8134c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81350:	bf08      	it	eq
   81352:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81356:	bd70      	pop	{r4, r5, r6, pc}
   81358:	f1c4 0520 	rsb	r5, r4, #32
   8135c:	fa00 f205 	lsl.w	r2, r0, r5
   81360:	ea4e 0e02 	orr.w	lr, lr, r2
   81364:	fa20 f304 	lsr.w	r3, r0, r4
   81368:	fa01 f205 	lsl.w	r2, r1, r5
   8136c:	ea43 0302 	orr.w	r3, r3, r2
   81370:	fa21 f004 	lsr.w	r0, r1, r4
   81374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81378:	fa21 f204 	lsr.w	r2, r1, r4
   8137c:	ea20 0002 	bic.w	r0, r0, r2
   81380:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81384:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81388:	bf08      	it	eq
   8138a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8138e:	bd70      	pop	{r4, r5, r6, pc}
   81390:	f094 0f00 	teq	r4, #0
   81394:	d10f      	bne.n	813b6 <__aeabi_dmul+0x1c2>
   81396:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8139a:	0040      	lsls	r0, r0, #1
   8139c:	eb41 0101 	adc.w	r1, r1, r1
   813a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   813a4:	bf08      	it	eq
   813a6:	3c01      	subeq	r4, #1
   813a8:	d0f7      	beq.n	8139a <__aeabi_dmul+0x1a6>
   813aa:	ea41 0106 	orr.w	r1, r1, r6
   813ae:	f095 0f00 	teq	r5, #0
   813b2:	bf18      	it	ne
   813b4:	4770      	bxne	lr
   813b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   813ba:	0052      	lsls	r2, r2, #1
   813bc:	eb43 0303 	adc.w	r3, r3, r3
   813c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   813c4:	bf08      	it	eq
   813c6:	3d01      	subeq	r5, #1
   813c8:	d0f7      	beq.n	813ba <__aeabi_dmul+0x1c6>
   813ca:	ea43 0306 	orr.w	r3, r3, r6
   813ce:	4770      	bx	lr
   813d0:	ea94 0f0c 	teq	r4, ip
   813d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   813d8:	bf18      	it	ne
   813da:	ea95 0f0c 	teqne	r5, ip
   813de:	d00c      	beq.n	813fa <__aeabi_dmul+0x206>
   813e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   813e4:	bf18      	it	ne
   813e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   813ea:	d1d1      	bne.n	81390 <__aeabi_dmul+0x19c>
   813ec:	ea81 0103 	eor.w	r1, r1, r3
   813f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   813f4:	f04f 0000 	mov.w	r0, #0
   813f8:	bd70      	pop	{r4, r5, r6, pc}
   813fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   813fe:	bf06      	itte	eq
   81400:	4610      	moveq	r0, r2
   81402:	4619      	moveq	r1, r3
   81404:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81408:	d019      	beq.n	8143e <__aeabi_dmul+0x24a>
   8140a:	ea94 0f0c 	teq	r4, ip
   8140e:	d102      	bne.n	81416 <__aeabi_dmul+0x222>
   81410:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81414:	d113      	bne.n	8143e <__aeabi_dmul+0x24a>
   81416:	ea95 0f0c 	teq	r5, ip
   8141a:	d105      	bne.n	81428 <__aeabi_dmul+0x234>
   8141c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81420:	bf1c      	itt	ne
   81422:	4610      	movne	r0, r2
   81424:	4619      	movne	r1, r3
   81426:	d10a      	bne.n	8143e <__aeabi_dmul+0x24a>
   81428:	ea81 0103 	eor.w	r1, r1, r3
   8142c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81430:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81434:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81438:	f04f 0000 	mov.w	r0, #0
   8143c:	bd70      	pop	{r4, r5, r6, pc}
   8143e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81442:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   81446:	bd70      	pop	{r4, r5, r6, pc}

00081448 <__aeabi_ddiv>:
   81448:	b570      	push	{r4, r5, r6, lr}
   8144a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8144e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81452:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81456:	bf1d      	ittte	ne
   81458:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8145c:	ea94 0f0c 	teqne	r4, ip
   81460:	ea95 0f0c 	teqne	r5, ip
   81464:	f000 f8a7 	bleq	815b6 <__aeabi_ddiv+0x16e>
   81468:	eba4 0405 	sub.w	r4, r4, r5
   8146c:	ea81 0e03 	eor.w	lr, r1, r3
   81470:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81474:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81478:	f000 8088 	beq.w	8158c <__aeabi_ddiv+0x144>
   8147c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81480:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81484:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81488:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8148c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81490:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81494:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81498:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8149c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   814a0:	429d      	cmp	r5, r3
   814a2:	bf08      	it	eq
   814a4:	4296      	cmpeq	r6, r2
   814a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   814aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   814ae:	d202      	bcs.n	814b6 <__aeabi_ddiv+0x6e>
   814b0:	085b      	lsrs	r3, r3, #1
   814b2:	ea4f 0232 	mov.w	r2, r2, rrx
   814b6:	1ab6      	subs	r6, r6, r2
   814b8:	eb65 0503 	sbc.w	r5, r5, r3
   814bc:	085b      	lsrs	r3, r3, #1
   814be:	ea4f 0232 	mov.w	r2, r2, rrx
   814c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   814c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   814ca:	ebb6 0e02 	subs.w	lr, r6, r2
   814ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   814d2:	bf22      	ittt	cs
   814d4:	1ab6      	subcs	r6, r6, r2
   814d6:	4675      	movcs	r5, lr
   814d8:	ea40 000c 	orrcs.w	r0, r0, ip
   814dc:	085b      	lsrs	r3, r3, #1
   814de:	ea4f 0232 	mov.w	r2, r2, rrx
   814e2:	ebb6 0e02 	subs.w	lr, r6, r2
   814e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   814ea:	bf22      	ittt	cs
   814ec:	1ab6      	subcs	r6, r6, r2
   814ee:	4675      	movcs	r5, lr
   814f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   814f4:	085b      	lsrs	r3, r3, #1
   814f6:	ea4f 0232 	mov.w	r2, r2, rrx
   814fa:	ebb6 0e02 	subs.w	lr, r6, r2
   814fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   81502:	bf22      	ittt	cs
   81504:	1ab6      	subcs	r6, r6, r2
   81506:	4675      	movcs	r5, lr
   81508:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8150c:	085b      	lsrs	r3, r3, #1
   8150e:	ea4f 0232 	mov.w	r2, r2, rrx
   81512:	ebb6 0e02 	subs.w	lr, r6, r2
   81516:	eb75 0e03 	sbcs.w	lr, r5, r3
   8151a:	bf22      	ittt	cs
   8151c:	1ab6      	subcs	r6, r6, r2
   8151e:	4675      	movcs	r5, lr
   81520:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81524:	ea55 0e06 	orrs.w	lr, r5, r6
   81528:	d018      	beq.n	8155c <__aeabi_ddiv+0x114>
   8152a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8152e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   81532:	ea4f 1606 	mov.w	r6, r6, lsl #4
   81536:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8153a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8153e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   81542:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   81546:	d1c0      	bne.n	814ca <__aeabi_ddiv+0x82>
   81548:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8154c:	d10b      	bne.n	81566 <__aeabi_ddiv+0x11e>
   8154e:	ea41 0100 	orr.w	r1, r1, r0
   81552:	f04f 0000 	mov.w	r0, #0
   81556:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8155a:	e7b6      	b.n	814ca <__aeabi_ddiv+0x82>
   8155c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81560:	bf04      	itt	eq
   81562:	4301      	orreq	r1, r0
   81564:	2000      	moveq	r0, #0
   81566:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8156a:	bf88      	it	hi
   8156c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81570:	f63f aeaf 	bhi.w	812d2 <__aeabi_dmul+0xde>
   81574:	ebb5 0c03 	subs.w	ip, r5, r3
   81578:	bf04      	itt	eq
   8157a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8157e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81582:	f150 0000 	adcs.w	r0, r0, #0
   81586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8158a:	bd70      	pop	{r4, r5, r6, pc}
   8158c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81590:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81594:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81598:	bfc2      	ittt	gt
   8159a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8159e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   815a2:	bd70      	popgt	{r4, r5, r6, pc}
   815a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   815a8:	f04f 0e00 	mov.w	lr, #0
   815ac:	3c01      	subs	r4, #1
   815ae:	e690      	b.n	812d2 <__aeabi_dmul+0xde>
   815b0:	ea45 0e06 	orr.w	lr, r5, r6
   815b4:	e68d      	b.n	812d2 <__aeabi_dmul+0xde>
   815b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   815ba:	ea94 0f0c 	teq	r4, ip
   815be:	bf08      	it	eq
   815c0:	ea95 0f0c 	teqeq	r5, ip
   815c4:	f43f af3b 	beq.w	8143e <__aeabi_dmul+0x24a>
   815c8:	ea94 0f0c 	teq	r4, ip
   815cc:	d10a      	bne.n	815e4 <__aeabi_ddiv+0x19c>
   815ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   815d2:	f47f af34 	bne.w	8143e <__aeabi_dmul+0x24a>
   815d6:	ea95 0f0c 	teq	r5, ip
   815da:	f47f af25 	bne.w	81428 <__aeabi_dmul+0x234>
   815de:	4610      	mov	r0, r2
   815e0:	4619      	mov	r1, r3
   815e2:	e72c      	b.n	8143e <__aeabi_dmul+0x24a>
   815e4:	ea95 0f0c 	teq	r5, ip
   815e8:	d106      	bne.n	815f8 <__aeabi_ddiv+0x1b0>
   815ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   815ee:	f43f aefd 	beq.w	813ec <__aeabi_dmul+0x1f8>
   815f2:	4610      	mov	r0, r2
   815f4:	4619      	mov	r1, r3
   815f6:	e722      	b.n	8143e <__aeabi_dmul+0x24a>
   815f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   815fc:	bf18      	it	ne
   815fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81602:	f47f aec5 	bne.w	81390 <__aeabi_dmul+0x19c>
   81606:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8160a:	f47f af0d 	bne.w	81428 <__aeabi_dmul+0x234>
   8160e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   81612:	f47f aeeb 	bne.w	813ec <__aeabi_dmul+0x1f8>
   81616:	e712      	b.n	8143e <__aeabi_dmul+0x24a>

00081618 <__gedf2>:
   81618:	f04f 3cff 	mov.w	ip, #4294967295
   8161c:	e006      	b.n	8162c <__cmpdf2+0x4>
   8161e:	bf00      	nop

00081620 <__ledf2>:
   81620:	f04f 0c01 	mov.w	ip, #1
   81624:	e002      	b.n	8162c <__cmpdf2+0x4>
   81626:	bf00      	nop

00081628 <__cmpdf2>:
   81628:	f04f 0c01 	mov.w	ip, #1
   8162c:	f84d cd04 	str.w	ip, [sp, #-4]!
   81630:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   81634:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   81638:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8163c:	bf18      	it	ne
   8163e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   81642:	d01b      	beq.n	8167c <__cmpdf2+0x54>
   81644:	b001      	add	sp, #4
   81646:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8164a:	bf0c      	ite	eq
   8164c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   81650:	ea91 0f03 	teqne	r1, r3
   81654:	bf02      	ittt	eq
   81656:	ea90 0f02 	teqeq	r0, r2
   8165a:	2000      	moveq	r0, #0
   8165c:	4770      	bxeq	lr
   8165e:	f110 0f00 	cmn.w	r0, #0
   81662:	ea91 0f03 	teq	r1, r3
   81666:	bf58      	it	pl
   81668:	4299      	cmppl	r1, r3
   8166a:	bf08      	it	eq
   8166c:	4290      	cmpeq	r0, r2
   8166e:	bf2c      	ite	cs
   81670:	17d8      	asrcs	r0, r3, #31
   81672:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   81676:	f040 0001 	orr.w	r0, r0, #1
   8167a:	4770      	bx	lr
   8167c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   81680:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   81684:	d102      	bne.n	8168c <__cmpdf2+0x64>
   81686:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8168a:	d107      	bne.n	8169c <__cmpdf2+0x74>
   8168c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   81690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   81694:	d1d6      	bne.n	81644 <__cmpdf2+0x1c>
   81696:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8169a:	d0d3      	beq.n	81644 <__cmpdf2+0x1c>
   8169c:	f85d 0b04 	ldr.w	r0, [sp], #4
   816a0:	4770      	bx	lr
   816a2:	bf00      	nop

000816a4 <__aeabi_cdrcmple>:
   816a4:	4684      	mov	ip, r0
   816a6:	4610      	mov	r0, r2
   816a8:	4662      	mov	r2, ip
   816aa:	468c      	mov	ip, r1
   816ac:	4619      	mov	r1, r3
   816ae:	4663      	mov	r3, ip
   816b0:	e000      	b.n	816b4 <__aeabi_cdcmpeq>
   816b2:	bf00      	nop

000816b4 <__aeabi_cdcmpeq>:
   816b4:	b501      	push	{r0, lr}
   816b6:	f7ff ffb7 	bl	81628 <__cmpdf2>
   816ba:	2800      	cmp	r0, #0
   816bc:	bf48      	it	mi
   816be:	f110 0f00 	cmnmi.w	r0, #0
   816c2:	bd01      	pop	{r0, pc}

000816c4 <__aeabi_dcmpeq>:
   816c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   816c8:	f7ff fff4 	bl	816b4 <__aeabi_cdcmpeq>
   816cc:	bf0c      	ite	eq
   816ce:	2001      	moveq	r0, #1
   816d0:	2000      	movne	r0, #0
   816d2:	f85d fb08 	ldr.w	pc, [sp], #8
   816d6:	bf00      	nop

000816d8 <__aeabi_dcmplt>:
   816d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   816dc:	f7ff ffea 	bl	816b4 <__aeabi_cdcmpeq>
   816e0:	bf34      	ite	cc
   816e2:	2001      	movcc	r0, #1
   816e4:	2000      	movcs	r0, #0
   816e6:	f85d fb08 	ldr.w	pc, [sp], #8
   816ea:	bf00      	nop

000816ec <__aeabi_dcmple>:
   816ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   816f0:	f7ff ffe0 	bl	816b4 <__aeabi_cdcmpeq>
   816f4:	bf94      	ite	ls
   816f6:	2001      	movls	r0, #1
   816f8:	2000      	movhi	r0, #0
   816fa:	f85d fb08 	ldr.w	pc, [sp], #8
   816fe:	bf00      	nop

00081700 <__aeabi_dcmpge>:
   81700:	f84d ed08 	str.w	lr, [sp, #-8]!
   81704:	f7ff ffce 	bl	816a4 <__aeabi_cdrcmple>
   81708:	bf94      	ite	ls
   8170a:	2001      	movls	r0, #1
   8170c:	2000      	movhi	r0, #0
   8170e:	f85d fb08 	ldr.w	pc, [sp], #8
   81712:	bf00      	nop

00081714 <__aeabi_dcmpgt>:
   81714:	f84d ed08 	str.w	lr, [sp, #-8]!
   81718:	f7ff ffc4 	bl	816a4 <__aeabi_cdrcmple>
   8171c:	bf34      	ite	cc
   8171e:	2001      	movcc	r0, #1
   81720:	2000      	movcs	r0, #0
   81722:	f85d fb08 	ldr.w	pc, [sp], #8
   81726:	bf00      	nop

00081728 <__aeabi_uldivmod>:
   81728:	b94b      	cbnz	r3, 8173e <__aeabi_uldivmod+0x16>
   8172a:	b942      	cbnz	r2, 8173e <__aeabi_uldivmod+0x16>
   8172c:	2900      	cmp	r1, #0
   8172e:	bf08      	it	eq
   81730:	2800      	cmpeq	r0, #0
   81732:	d002      	beq.n	8173a <__aeabi_uldivmod+0x12>
   81734:	f04f 31ff 	mov.w	r1, #4294967295
   81738:	4608      	mov	r0, r1
   8173a:	f000 b83b 	b.w	817b4 <__aeabi_idiv0>
   8173e:	b082      	sub	sp, #8
   81740:	46ec      	mov	ip, sp
   81742:	e92d 5000 	stmdb	sp!, {ip, lr}
   81746:	f000 f81d 	bl	81784 <__gnu_uldivmod_helper>
   8174a:	f8dd e004 	ldr.w	lr, [sp, #4]
   8174e:	b002      	add	sp, #8
   81750:	bc0c      	pop	{r2, r3}
   81752:	4770      	bx	lr

00081754 <__gnu_ldivmod_helper>:
   81754:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   81758:	9e08      	ldr	r6, [sp, #32]
   8175a:	4614      	mov	r4, r2
   8175c:	461d      	mov	r5, r3
   8175e:	4680      	mov	r8, r0
   81760:	4689      	mov	r9, r1
   81762:	f000 f829 	bl	817b8 <__divdi3>
   81766:	fb04 f301 	mul.w	r3, r4, r1
   8176a:	fba4 ab00 	umull	sl, fp, r4, r0
   8176e:	fb00 3205 	mla	r2, r0, r5, r3
   81772:	4493      	add	fp, r2
   81774:	ebb8 080a 	subs.w	r8, r8, sl
   81778:	eb69 090b 	sbc.w	r9, r9, fp
   8177c:	e9c6 8900 	strd	r8, r9, [r6]
   81780:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00081784 <__gnu_uldivmod_helper>:
   81784:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   81788:	9e08      	ldr	r6, [sp, #32]
   8178a:	4614      	mov	r4, r2
   8178c:	461d      	mov	r5, r3
   8178e:	4680      	mov	r8, r0
   81790:	4689      	mov	r9, r1
   81792:	f000 f961 	bl	81a58 <__udivdi3>
   81796:	fb00 f505 	mul.w	r5, r0, r5
   8179a:	fba0 ab04 	umull	sl, fp, r0, r4
   8179e:	fb04 5401 	mla	r4, r4, r1, r5
   817a2:	44a3      	add	fp, r4
   817a4:	ebb8 080a 	subs.w	r8, r8, sl
   817a8:	eb69 090b 	sbc.w	r9, r9, fp
   817ac:	e9c6 8900 	strd	r8, r9, [r6]
   817b0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000817b4 <__aeabi_idiv0>:
   817b4:	4770      	bx	lr
   817b6:	bf00      	nop

000817b8 <__divdi3>:
   817b8:	2900      	cmp	r1, #0
   817ba:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   817be:	f2c0 80a1 	blt.w	81904 <__divdi3+0x14c>
   817c2:	2400      	movs	r4, #0
   817c4:	2b00      	cmp	r3, #0
   817c6:	f2c0 8098 	blt.w	818fa <__divdi3+0x142>
   817ca:	4615      	mov	r5, r2
   817cc:	4606      	mov	r6, r0
   817ce:	460f      	mov	r7, r1
   817d0:	2b00      	cmp	r3, #0
   817d2:	d13f      	bne.n	81854 <__divdi3+0x9c>
   817d4:	428a      	cmp	r2, r1
   817d6:	d958      	bls.n	8188a <__divdi3+0xd2>
   817d8:	fab2 f382 	clz	r3, r2
   817dc:	b14b      	cbz	r3, 817f2 <__divdi3+0x3a>
   817de:	f1c3 0220 	rsb	r2, r3, #32
   817e2:	fa01 f703 	lsl.w	r7, r1, r3
   817e6:	fa20 f202 	lsr.w	r2, r0, r2
   817ea:	409d      	lsls	r5, r3
   817ec:	fa00 f603 	lsl.w	r6, r0, r3
   817f0:	4317      	orrs	r7, r2
   817f2:	0c29      	lsrs	r1, r5, #16
   817f4:	fbb7 f2f1 	udiv	r2, r7, r1
   817f8:	fb01 7712 	mls	r7, r1, r2, r7
   817fc:	b2a8      	uxth	r0, r5
   817fe:	fb00 f302 	mul.w	r3, r0, r2
   81802:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   81806:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   8180a:	42bb      	cmp	r3, r7
   8180c:	d909      	bls.n	81822 <__divdi3+0x6a>
   8180e:	197f      	adds	r7, r7, r5
   81810:	f102 3cff 	add.w	ip, r2, #4294967295
   81814:	f080 8105 	bcs.w	81a22 <__divdi3+0x26a>
   81818:	42bb      	cmp	r3, r7
   8181a:	f240 8102 	bls.w	81a22 <__divdi3+0x26a>
   8181e:	3a02      	subs	r2, #2
   81820:	442f      	add	r7, r5
   81822:	1aff      	subs	r7, r7, r3
   81824:	fbb7 f3f1 	udiv	r3, r7, r1
   81828:	fb01 7113 	mls	r1, r1, r3, r7
   8182c:	fb00 f003 	mul.w	r0, r0, r3
   81830:	b2b6      	uxth	r6, r6
   81832:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   81836:	4288      	cmp	r0, r1
   81838:	d908      	bls.n	8184c <__divdi3+0x94>
   8183a:	1949      	adds	r1, r1, r5
   8183c:	f103 37ff 	add.w	r7, r3, #4294967295
   81840:	f080 80f1 	bcs.w	81a26 <__divdi3+0x26e>
   81844:	4288      	cmp	r0, r1
   81846:	f240 80ee 	bls.w	81a26 <__divdi3+0x26e>
   8184a:	3b02      	subs	r3, #2
   8184c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   81850:	2300      	movs	r3, #0
   81852:	e003      	b.n	8185c <__divdi3+0xa4>
   81854:	428b      	cmp	r3, r1
   81856:	d90a      	bls.n	8186e <__divdi3+0xb6>
   81858:	2300      	movs	r3, #0
   8185a:	461a      	mov	r2, r3
   8185c:	4610      	mov	r0, r2
   8185e:	4619      	mov	r1, r3
   81860:	b114      	cbz	r4, 81868 <__divdi3+0xb0>
   81862:	4240      	negs	r0, r0
   81864:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81868:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8186c:	4770      	bx	lr
   8186e:	fab3 f883 	clz	r8, r3
   81872:	f1b8 0f00 	cmp.w	r8, #0
   81876:	f040 8088 	bne.w	8198a <__divdi3+0x1d2>
   8187a:	428b      	cmp	r3, r1
   8187c:	d302      	bcc.n	81884 <__divdi3+0xcc>
   8187e:	4282      	cmp	r2, r0
   81880:	f200 80e2 	bhi.w	81a48 <__divdi3+0x290>
   81884:	2300      	movs	r3, #0
   81886:	2201      	movs	r2, #1
   81888:	e7e8      	b.n	8185c <__divdi3+0xa4>
   8188a:	b912      	cbnz	r2, 81892 <__divdi3+0xda>
   8188c:	2301      	movs	r3, #1
   8188e:	fbb3 f5f2 	udiv	r5, r3, r2
   81892:	fab5 f285 	clz	r2, r5
   81896:	2a00      	cmp	r2, #0
   81898:	d13a      	bne.n	81910 <__divdi3+0x158>
   8189a:	1b7f      	subs	r7, r7, r5
   8189c:	0c28      	lsrs	r0, r5, #16
   8189e:	fa1f fc85 	uxth.w	ip, r5
   818a2:	2301      	movs	r3, #1
   818a4:	fbb7 f1f0 	udiv	r1, r7, r0
   818a8:	fb00 7711 	mls	r7, r0, r1, r7
   818ac:	fb0c f201 	mul.w	r2, ip, r1
   818b0:	ea4f 4816 	mov.w	r8, r6, lsr #16
   818b4:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   818b8:	42ba      	cmp	r2, r7
   818ba:	d907      	bls.n	818cc <__divdi3+0x114>
   818bc:	197f      	adds	r7, r7, r5
   818be:	f101 38ff 	add.w	r8, r1, #4294967295
   818c2:	d202      	bcs.n	818ca <__divdi3+0x112>
   818c4:	42ba      	cmp	r2, r7
   818c6:	f200 80c4 	bhi.w	81a52 <__divdi3+0x29a>
   818ca:	4641      	mov	r1, r8
   818cc:	1abf      	subs	r7, r7, r2
   818ce:	fbb7 f2f0 	udiv	r2, r7, r0
   818d2:	fb00 7012 	mls	r0, r0, r2, r7
   818d6:	fb0c fc02 	mul.w	ip, ip, r2
   818da:	b2b6      	uxth	r6, r6
   818dc:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   818e0:	4584      	cmp	ip, r0
   818e2:	d907      	bls.n	818f4 <__divdi3+0x13c>
   818e4:	1940      	adds	r0, r0, r5
   818e6:	f102 37ff 	add.w	r7, r2, #4294967295
   818ea:	d202      	bcs.n	818f2 <__divdi3+0x13a>
   818ec:	4584      	cmp	ip, r0
   818ee:	f200 80ae 	bhi.w	81a4e <__divdi3+0x296>
   818f2:	463a      	mov	r2, r7
   818f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   818f8:	e7b0      	b.n	8185c <__divdi3+0xa4>
   818fa:	43e4      	mvns	r4, r4
   818fc:	4252      	negs	r2, r2
   818fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   81902:	e762      	b.n	817ca <__divdi3+0x12>
   81904:	4240      	negs	r0, r0
   81906:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8190a:	f04f 34ff 	mov.w	r4, #4294967295
   8190e:	e759      	b.n	817c4 <__divdi3+0xc>
   81910:	4095      	lsls	r5, r2
   81912:	f1c2 0920 	rsb	r9, r2, #32
   81916:	fa27 f109 	lsr.w	r1, r7, r9
   8191a:	fa26 f909 	lsr.w	r9, r6, r9
   8191e:	4097      	lsls	r7, r2
   81920:	0c28      	lsrs	r0, r5, #16
   81922:	fbb1 f8f0 	udiv	r8, r1, r0
   81926:	fb00 1118 	mls	r1, r0, r8, r1
   8192a:	fa1f fc85 	uxth.w	ip, r5
   8192e:	fb0c f308 	mul.w	r3, ip, r8
   81932:	ea49 0907 	orr.w	r9, r9, r7
   81936:	ea4f 4719 	mov.w	r7, r9, lsr #16
   8193a:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   8193e:	428b      	cmp	r3, r1
   81940:	fa06 f602 	lsl.w	r6, r6, r2
   81944:	d908      	bls.n	81958 <__divdi3+0x1a0>
   81946:	1949      	adds	r1, r1, r5
   81948:	f108 32ff 	add.w	r2, r8, #4294967295
   8194c:	d27a      	bcs.n	81a44 <__divdi3+0x28c>
   8194e:	428b      	cmp	r3, r1
   81950:	d978      	bls.n	81a44 <__divdi3+0x28c>
   81952:	f1a8 0802 	sub.w	r8, r8, #2
   81956:	4429      	add	r1, r5
   81958:	1ac9      	subs	r1, r1, r3
   8195a:	fbb1 f3f0 	udiv	r3, r1, r0
   8195e:	fb00 1713 	mls	r7, r0, r3, r1
   81962:	fb0c f203 	mul.w	r2, ip, r3
   81966:	fa1f f989 	uxth.w	r9, r9
   8196a:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   8196e:	42ba      	cmp	r2, r7
   81970:	d907      	bls.n	81982 <__divdi3+0x1ca>
   81972:	197f      	adds	r7, r7, r5
   81974:	f103 31ff 	add.w	r1, r3, #4294967295
   81978:	d260      	bcs.n	81a3c <__divdi3+0x284>
   8197a:	42ba      	cmp	r2, r7
   8197c:	d95e      	bls.n	81a3c <__divdi3+0x284>
   8197e:	3b02      	subs	r3, #2
   81980:	442f      	add	r7, r5
   81982:	1abf      	subs	r7, r7, r2
   81984:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   81988:	e78c      	b.n	818a4 <__divdi3+0xec>
   8198a:	f1c8 0220 	rsb	r2, r8, #32
   8198e:	fa25 f102 	lsr.w	r1, r5, r2
   81992:	fa03 fc08 	lsl.w	ip, r3, r8
   81996:	fa27 f302 	lsr.w	r3, r7, r2
   8199a:	fa20 f202 	lsr.w	r2, r0, r2
   8199e:	fa07 f708 	lsl.w	r7, r7, r8
   819a2:	ea41 0c0c 	orr.w	ip, r1, ip
   819a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
   819aa:	fbb3 f1f9 	udiv	r1, r3, r9
   819ae:	fb09 3311 	mls	r3, r9, r1, r3
   819b2:	fa1f fa8c 	uxth.w	sl, ip
   819b6:	fb0a fb01 	mul.w	fp, sl, r1
   819ba:	4317      	orrs	r7, r2
   819bc:	0c3a      	lsrs	r2, r7, #16
   819be:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   819c2:	459b      	cmp	fp, r3
   819c4:	fa05 f008 	lsl.w	r0, r5, r8
   819c8:	d908      	bls.n	819dc <__divdi3+0x224>
   819ca:	eb13 030c 	adds.w	r3, r3, ip
   819ce:	f101 32ff 	add.w	r2, r1, #4294967295
   819d2:	d235      	bcs.n	81a40 <__divdi3+0x288>
   819d4:	459b      	cmp	fp, r3
   819d6:	d933      	bls.n	81a40 <__divdi3+0x288>
   819d8:	3902      	subs	r1, #2
   819da:	4463      	add	r3, ip
   819dc:	ebcb 0303 	rsb	r3, fp, r3
   819e0:	fbb3 f2f9 	udiv	r2, r3, r9
   819e4:	fb09 3312 	mls	r3, r9, r2, r3
   819e8:	fb0a fa02 	mul.w	sl, sl, r2
   819ec:	b2bf      	uxth	r7, r7
   819ee:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   819f2:	45ba      	cmp	sl, r7
   819f4:	d908      	bls.n	81a08 <__divdi3+0x250>
   819f6:	eb17 070c 	adds.w	r7, r7, ip
   819fa:	f102 33ff 	add.w	r3, r2, #4294967295
   819fe:	d21b      	bcs.n	81a38 <__divdi3+0x280>
   81a00:	45ba      	cmp	sl, r7
   81a02:	d919      	bls.n	81a38 <__divdi3+0x280>
   81a04:	3a02      	subs	r2, #2
   81a06:	4467      	add	r7, ip
   81a08:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   81a0c:	fba5 0100 	umull	r0, r1, r5, r0
   81a10:	ebca 0707 	rsb	r7, sl, r7
   81a14:	428f      	cmp	r7, r1
   81a16:	f04f 0300 	mov.w	r3, #0
   81a1a:	d30a      	bcc.n	81a32 <__divdi3+0x27a>
   81a1c:	d005      	beq.n	81a2a <__divdi3+0x272>
   81a1e:	462a      	mov	r2, r5
   81a20:	e71c      	b.n	8185c <__divdi3+0xa4>
   81a22:	4662      	mov	r2, ip
   81a24:	e6fd      	b.n	81822 <__divdi3+0x6a>
   81a26:	463b      	mov	r3, r7
   81a28:	e710      	b.n	8184c <__divdi3+0x94>
   81a2a:	fa06 f608 	lsl.w	r6, r6, r8
   81a2e:	4286      	cmp	r6, r0
   81a30:	d2f5      	bcs.n	81a1e <__divdi3+0x266>
   81a32:	1e6a      	subs	r2, r5, #1
   81a34:	2300      	movs	r3, #0
   81a36:	e711      	b.n	8185c <__divdi3+0xa4>
   81a38:	461a      	mov	r2, r3
   81a3a:	e7e5      	b.n	81a08 <__divdi3+0x250>
   81a3c:	460b      	mov	r3, r1
   81a3e:	e7a0      	b.n	81982 <__divdi3+0x1ca>
   81a40:	4611      	mov	r1, r2
   81a42:	e7cb      	b.n	819dc <__divdi3+0x224>
   81a44:	4690      	mov	r8, r2
   81a46:	e787      	b.n	81958 <__divdi3+0x1a0>
   81a48:	4643      	mov	r3, r8
   81a4a:	4642      	mov	r2, r8
   81a4c:	e706      	b.n	8185c <__divdi3+0xa4>
   81a4e:	3a02      	subs	r2, #2
   81a50:	e750      	b.n	818f4 <__divdi3+0x13c>
   81a52:	3902      	subs	r1, #2
   81a54:	442f      	add	r7, r5
   81a56:	e739      	b.n	818cc <__divdi3+0x114>

00081a58 <__udivdi3>:
   81a58:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81a5c:	4614      	mov	r4, r2
   81a5e:	4605      	mov	r5, r0
   81a60:	460e      	mov	r6, r1
   81a62:	2b00      	cmp	r3, #0
   81a64:	d143      	bne.n	81aee <__udivdi3+0x96>
   81a66:	428a      	cmp	r2, r1
   81a68:	d953      	bls.n	81b12 <__udivdi3+0xba>
   81a6a:	fab2 f782 	clz	r7, r2
   81a6e:	b157      	cbz	r7, 81a86 <__udivdi3+0x2e>
   81a70:	f1c7 0620 	rsb	r6, r7, #32
   81a74:	fa20 f606 	lsr.w	r6, r0, r6
   81a78:	fa01 f307 	lsl.w	r3, r1, r7
   81a7c:	fa02 f407 	lsl.w	r4, r2, r7
   81a80:	fa00 f507 	lsl.w	r5, r0, r7
   81a84:	431e      	orrs	r6, r3
   81a86:	0c21      	lsrs	r1, r4, #16
   81a88:	fbb6 f2f1 	udiv	r2, r6, r1
   81a8c:	fb01 6612 	mls	r6, r1, r2, r6
   81a90:	b2a0      	uxth	r0, r4
   81a92:	fb00 f302 	mul.w	r3, r0, r2
   81a96:	0c2f      	lsrs	r7, r5, #16
   81a98:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   81a9c:	42b3      	cmp	r3, r6
   81a9e:	d909      	bls.n	81ab4 <__udivdi3+0x5c>
   81aa0:	1936      	adds	r6, r6, r4
   81aa2:	f102 37ff 	add.w	r7, r2, #4294967295
   81aa6:	f080 80fd 	bcs.w	81ca4 <__udivdi3+0x24c>
   81aaa:	42b3      	cmp	r3, r6
   81aac:	f240 80fa 	bls.w	81ca4 <__udivdi3+0x24c>
   81ab0:	3a02      	subs	r2, #2
   81ab2:	4426      	add	r6, r4
   81ab4:	1af6      	subs	r6, r6, r3
   81ab6:	fbb6 f3f1 	udiv	r3, r6, r1
   81aba:	fb01 6113 	mls	r1, r1, r3, r6
   81abe:	fb00 f003 	mul.w	r0, r0, r3
   81ac2:	b2ad      	uxth	r5, r5
   81ac4:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   81ac8:	4288      	cmp	r0, r1
   81aca:	d908      	bls.n	81ade <__udivdi3+0x86>
   81acc:	1909      	adds	r1, r1, r4
   81ace:	f103 36ff 	add.w	r6, r3, #4294967295
   81ad2:	f080 80e9 	bcs.w	81ca8 <__udivdi3+0x250>
   81ad6:	4288      	cmp	r0, r1
   81ad8:	f240 80e6 	bls.w	81ca8 <__udivdi3+0x250>
   81adc:	3b02      	subs	r3, #2
   81ade:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   81ae2:	2300      	movs	r3, #0
   81ae4:	4610      	mov	r0, r2
   81ae6:	4619      	mov	r1, r3
   81ae8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81aec:	4770      	bx	lr
   81aee:	428b      	cmp	r3, r1
   81af0:	d84c      	bhi.n	81b8c <__udivdi3+0x134>
   81af2:	fab3 f683 	clz	r6, r3
   81af6:	2e00      	cmp	r6, #0
   81af8:	d14f      	bne.n	81b9a <__udivdi3+0x142>
   81afa:	428b      	cmp	r3, r1
   81afc:	d302      	bcc.n	81b04 <__udivdi3+0xac>
   81afe:	4282      	cmp	r2, r0
   81b00:	f200 80dd 	bhi.w	81cbe <__udivdi3+0x266>
   81b04:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81b08:	2300      	movs	r3, #0
   81b0a:	2201      	movs	r2, #1
   81b0c:	4610      	mov	r0, r2
   81b0e:	4619      	mov	r1, r3
   81b10:	4770      	bx	lr
   81b12:	b912      	cbnz	r2, 81b1a <__udivdi3+0xc2>
   81b14:	2401      	movs	r4, #1
   81b16:	fbb4 f4f2 	udiv	r4, r4, r2
   81b1a:	fab4 f284 	clz	r2, r4
   81b1e:	2a00      	cmp	r2, #0
   81b20:	f040 8082 	bne.w	81c28 <__udivdi3+0x1d0>
   81b24:	1b09      	subs	r1, r1, r4
   81b26:	0c26      	lsrs	r6, r4, #16
   81b28:	b2a7      	uxth	r7, r4
   81b2a:	2301      	movs	r3, #1
   81b2c:	fbb1 f0f6 	udiv	r0, r1, r6
   81b30:	fb06 1110 	mls	r1, r6, r0, r1
   81b34:	fb07 f200 	mul.w	r2, r7, r0
   81b38:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   81b3c:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   81b40:	428a      	cmp	r2, r1
   81b42:	d907      	bls.n	81b54 <__udivdi3+0xfc>
   81b44:	1909      	adds	r1, r1, r4
   81b46:	f100 3cff 	add.w	ip, r0, #4294967295
   81b4a:	d202      	bcs.n	81b52 <__udivdi3+0xfa>
   81b4c:	428a      	cmp	r2, r1
   81b4e:	f200 80c8 	bhi.w	81ce2 <__udivdi3+0x28a>
   81b52:	4660      	mov	r0, ip
   81b54:	1a89      	subs	r1, r1, r2
   81b56:	fbb1 f2f6 	udiv	r2, r1, r6
   81b5a:	fb06 1112 	mls	r1, r6, r2, r1
   81b5e:	fb07 f702 	mul.w	r7, r7, r2
   81b62:	b2ad      	uxth	r5, r5
   81b64:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   81b68:	42af      	cmp	r7, r5
   81b6a:	d908      	bls.n	81b7e <__udivdi3+0x126>
   81b6c:	192c      	adds	r4, r5, r4
   81b6e:	f102 31ff 	add.w	r1, r2, #4294967295
   81b72:	f080 809b 	bcs.w	81cac <__udivdi3+0x254>
   81b76:	42a7      	cmp	r7, r4
   81b78:	f240 8098 	bls.w	81cac <__udivdi3+0x254>
   81b7c:	3a02      	subs	r2, #2
   81b7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   81b82:	4610      	mov	r0, r2
   81b84:	4619      	mov	r1, r3
   81b86:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81b8a:	4770      	bx	lr
   81b8c:	2300      	movs	r3, #0
   81b8e:	461a      	mov	r2, r3
   81b90:	4610      	mov	r0, r2
   81b92:	4619      	mov	r1, r3
   81b94:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81b98:	4770      	bx	lr
   81b9a:	f1c6 0520 	rsb	r5, r6, #32
   81b9e:	fa22 f705 	lsr.w	r7, r2, r5
   81ba2:	fa03 f406 	lsl.w	r4, r3, r6
   81ba6:	fa21 f305 	lsr.w	r3, r1, r5
   81baa:	fa01 fb06 	lsl.w	fp, r1, r6
   81bae:	fa20 f505 	lsr.w	r5, r0, r5
   81bb2:	433c      	orrs	r4, r7
   81bb4:	ea4f 4814 	mov.w	r8, r4, lsr #16
   81bb8:	fbb3 fcf8 	udiv	ip, r3, r8
   81bbc:	fb08 331c 	mls	r3, r8, ip, r3
   81bc0:	fa1f f984 	uxth.w	r9, r4
   81bc4:	fb09 fa0c 	mul.w	sl, r9, ip
   81bc8:	ea45 0b0b 	orr.w	fp, r5, fp
   81bcc:	ea4f 451b 	mov.w	r5, fp, lsr #16
   81bd0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   81bd4:	459a      	cmp	sl, r3
   81bd6:	fa02 f206 	lsl.w	r2, r2, r6
   81bda:	d904      	bls.n	81be6 <__udivdi3+0x18e>
   81bdc:	191b      	adds	r3, r3, r4
   81bde:	f10c 35ff 	add.w	r5, ip, #4294967295
   81be2:	d36f      	bcc.n	81cc4 <__udivdi3+0x26c>
   81be4:	46ac      	mov	ip, r5
   81be6:	ebca 0303 	rsb	r3, sl, r3
   81bea:	fbb3 f5f8 	udiv	r5, r3, r8
   81bee:	fb08 3315 	mls	r3, r8, r5, r3
   81bf2:	fb09 f905 	mul.w	r9, r9, r5
   81bf6:	fa1f fb8b 	uxth.w	fp, fp
   81bfa:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   81bfe:	45b9      	cmp	r9, r7
   81c00:	d904      	bls.n	81c0c <__udivdi3+0x1b4>
   81c02:	193f      	adds	r7, r7, r4
   81c04:	f105 33ff 	add.w	r3, r5, #4294967295
   81c08:	d362      	bcc.n	81cd0 <__udivdi3+0x278>
   81c0a:	461d      	mov	r5, r3
   81c0c:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   81c10:	fbac 2302 	umull	r2, r3, ip, r2
   81c14:	ebc9 0707 	rsb	r7, r9, r7
   81c18:	429f      	cmp	r7, r3
   81c1a:	f04f 0500 	mov.w	r5, #0
   81c1e:	d34a      	bcc.n	81cb6 <__udivdi3+0x25e>
   81c20:	d046      	beq.n	81cb0 <__udivdi3+0x258>
   81c22:	4662      	mov	r2, ip
   81c24:	462b      	mov	r3, r5
   81c26:	e75d      	b.n	81ae4 <__udivdi3+0x8c>
   81c28:	4094      	lsls	r4, r2
   81c2a:	f1c2 0920 	rsb	r9, r2, #32
   81c2e:	fa21 fc09 	lsr.w	ip, r1, r9
   81c32:	4091      	lsls	r1, r2
   81c34:	fa20 f909 	lsr.w	r9, r0, r9
   81c38:	0c26      	lsrs	r6, r4, #16
   81c3a:	fbbc f8f6 	udiv	r8, ip, r6
   81c3e:	fb06 cc18 	mls	ip, r6, r8, ip
   81c42:	b2a7      	uxth	r7, r4
   81c44:	fb07 f308 	mul.w	r3, r7, r8
   81c48:	ea49 0901 	orr.w	r9, r9, r1
   81c4c:	ea4f 4119 	mov.w	r1, r9, lsr #16
   81c50:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   81c54:	4563      	cmp	r3, ip
   81c56:	fa00 f502 	lsl.w	r5, r0, r2
   81c5a:	d909      	bls.n	81c70 <__udivdi3+0x218>
   81c5c:	eb1c 0c04 	adds.w	ip, ip, r4
   81c60:	f108 32ff 	add.w	r2, r8, #4294967295
   81c64:	d23b      	bcs.n	81cde <__udivdi3+0x286>
   81c66:	4563      	cmp	r3, ip
   81c68:	d939      	bls.n	81cde <__udivdi3+0x286>
   81c6a:	f1a8 0802 	sub.w	r8, r8, #2
   81c6e:	44a4      	add	ip, r4
   81c70:	ebc3 0c0c 	rsb	ip, r3, ip
   81c74:	fbbc f3f6 	udiv	r3, ip, r6
   81c78:	fb06 c113 	mls	r1, r6, r3, ip
   81c7c:	fb07 f203 	mul.w	r2, r7, r3
   81c80:	fa1f f989 	uxth.w	r9, r9
   81c84:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   81c88:	428a      	cmp	r2, r1
   81c8a:	d907      	bls.n	81c9c <__udivdi3+0x244>
   81c8c:	1909      	adds	r1, r1, r4
   81c8e:	f103 30ff 	add.w	r0, r3, #4294967295
   81c92:	d222      	bcs.n	81cda <__udivdi3+0x282>
   81c94:	428a      	cmp	r2, r1
   81c96:	d920      	bls.n	81cda <__udivdi3+0x282>
   81c98:	3b02      	subs	r3, #2
   81c9a:	4421      	add	r1, r4
   81c9c:	1a89      	subs	r1, r1, r2
   81c9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   81ca2:	e743      	b.n	81b2c <__udivdi3+0xd4>
   81ca4:	463a      	mov	r2, r7
   81ca6:	e705      	b.n	81ab4 <__udivdi3+0x5c>
   81ca8:	4633      	mov	r3, r6
   81caa:	e718      	b.n	81ade <__udivdi3+0x86>
   81cac:	460a      	mov	r2, r1
   81cae:	e766      	b.n	81b7e <__udivdi3+0x126>
   81cb0:	40b0      	lsls	r0, r6
   81cb2:	4290      	cmp	r0, r2
   81cb4:	d2b5      	bcs.n	81c22 <__udivdi3+0x1ca>
   81cb6:	f10c 32ff 	add.w	r2, ip, #4294967295
   81cba:	2300      	movs	r3, #0
   81cbc:	e712      	b.n	81ae4 <__udivdi3+0x8c>
   81cbe:	4633      	mov	r3, r6
   81cc0:	4632      	mov	r2, r6
   81cc2:	e70f      	b.n	81ae4 <__udivdi3+0x8c>
   81cc4:	459a      	cmp	sl, r3
   81cc6:	d98d      	bls.n	81be4 <__udivdi3+0x18c>
   81cc8:	f1ac 0c02 	sub.w	ip, ip, #2
   81ccc:	4423      	add	r3, r4
   81cce:	e78a      	b.n	81be6 <__udivdi3+0x18e>
   81cd0:	45b9      	cmp	r9, r7
   81cd2:	d99a      	bls.n	81c0a <__udivdi3+0x1b2>
   81cd4:	3d02      	subs	r5, #2
   81cd6:	4427      	add	r7, r4
   81cd8:	e798      	b.n	81c0c <__udivdi3+0x1b4>
   81cda:	4603      	mov	r3, r0
   81cdc:	e7de      	b.n	81c9c <__udivdi3+0x244>
   81cde:	4690      	mov	r8, r2
   81ce0:	e7c6      	b.n	81c70 <__udivdi3+0x218>
   81ce2:	3802      	subs	r0, #2
   81ce4:	4421      	add	r1, r4
   81ce6:	e735      	b.n	81b54 <__udivdi3+0xfc>

00081ce8 <__libc_init_array>:
   81ce8:	b570      	push	{r4, r5, r6, lr}
   81cea:	4e0f      	ldr	r6, [pc, #60]	; (81d28 <__libc_init_array+0x40>)
   81cec:	4d0f      	ldr	r5, [pc, #60]	; (81d2c <__libc_init_array+0x44>)
   81cee:	1b76      	subs	r6, r6, r5
   81cf0:	10b6      	asrs	r6, r6, #2
   81cf2:	d007      	beq.n	81d04 <__libc_init_array+0x1c>
   81cf4:	3d04      	subs	r5, #4
   81cf6:	2400      	movs	r4, #0
   81cf8:	3401      	adds	r4, #1
   81cfa:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81cfe:	4798      	blx	r3
   81d00:	42a6      	cmp	r6, r4
   81d02:	d1f9      	bne.n	81cf8 <__libc_init_array+0x10>
   81d04:	4e0a      	ldr	r6, [pc, #40]	; (81d30 <__libc_init_array+0x48>)
   81d06:	4d0b      	ldr	r5, [pc, #44]	; (81d34 <__libc_init_array+0x4c>)
   81d08:	f002 fd14 	bl	84734 <_init>
   81d0c:	1b76      	subs	r6, r6, r5
   81d0e:	10b6      	asrs	r6, r6, #2
   81d10:	d008      	beq.n	81d24 <__libc_init_array+0x3c>
   81d12:	3d04      	subs	r5, #4
   81d14:	2400      	movs	r4, #0
   81d16:	3401      	adds	r4, #1
   81d18:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81d1c:	4798      	blx	r3
   81d1e:	42a6      	cmp	r6, r4
   81d20:	d1f9      	bne.n	81d16 <__libc_init_array+0x2e>
   81d22:	bd70      	pop	{r4, r5, r6, pc}
   81d24:	bd70      	pop	{r4, r5, r6, pc}
   81d26:	bf00      	nop
   81d28:	00084740 	.word	0x00084740
   81d2c:	00084740 	.word	0x00084740
   81d30:	00084748 	.word	0x00084748
   81d34:	00084740 	.word	0x00084740

00081d38 <iprintf>:
   81d38:	b40f      	push	{r0, r1, r2, r3}
   81d3a:	b510      	push	{r4, lr}
   81d3c:	4b07      	ldr	r3, [pc, #28]	; (81d5c <iprintf+0x24>)
   81d3e:	b082      	sub	sp, #8
   81d40:	ac04      	add	r4, sp, #16
   81d42:	f854 2b04 	ldr.w	r2, [r4], #4
   81d46:	6818      	ldr	r0, [r3, #0]
   81d48:	4623      	mov	r3, r4
   81d4a:	6881      	ldr	r1, [r0, #8]
   81d4c:	9401      	str	r4, [sp, #4]
   81d4e:	f000 f915 	bl	81f7c <_vfiprintf_r>
   81d52:	b002      	add	sp, #8
   81d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81d58:	b004      	add	sp, #16
   81d5a:	4770      	bx	lr
   81d5c:	20070568 	.word	0x20070568

00081d60 <memset>:
   81d60:	b4f0      	push	{r4, r5, r6, r7}
   81d62:	0784      	lsls	r4, r0, #30
   81d64:	d043      	beq.n	81dee <memset+0x8e>
   81d66:	1e54      	subs	r4, r2, #1
   81d68:	2a00      	cmp	r2, #0
   81d6a:	d03e      	beq.n	81dea <memset+0x8a>
   81d6c:	b2cd      	uxtb	r5, r1
   81d6e:	4603      	mov	r3, r0
   81d70:	e003      	b.n	81d7a <memset+0x1a>
   81d72:	1e62      	subs	r2, r4, #1
   81d74:	2c00      	cmp	r4, #0
   81d76:	d038      	beq.n	81dea <memset+0x8a>
   81d78:	4614      	mov	r4, r2
   81d7a:	f803 5b01 	strb.w	r5, [r3], #1
   81d7e:	079a      	lsls	r2, r3, #30
   81d80:	d1f7      	bne.n	81d72 <memset+0x12>
   81d82:	2c03      	cmp	r4, #3
   81d84:	d92a      	bls.n	81ddc <memset+0x7c>
   81d86:	b2cd      	uxtb	r5, r1
   81d88:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81d8c:	2c0f      	cmp	r4, #15
   81d8e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81d92:	d915      	bls.n	81dc0 <memset+0x60>
   81d94:	f1a4 0710 	sub.w	r7, r4, #16
   81d98:	093f      	lsrs	r7, r7, #4
   81d9a:	f103 0610 	add.w	r6, r3, #16
   81d9e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   81da2:	461a      	mov	r2, r3
   81da4:	6015      	str	r5, [r2, #0]
   81da6:	6055      	str	r5, [r2, #4]
   81da8:	6095      	str	r5, [r2, #8]
   81daa:	60d5      	str	r5, [r2, #12]
   81dac:	3210      	adds	r2, #16
   81dae:	42b2      	cmp	r2, r6
   81db0:	d1f8      	bne.n	81da4 <memset+0x44>
   81db2:	f004 040f 	and.w	r4, r4, #15
   81db6:	3701      	adds	r7, #1
   81db8:	2c03      	cmp	r4, #3
   81dba:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   81dbe:	d90d      	bls.n	81ddc <memset+0x7c>
   81dc0:	461e      	mov	r6, r3
   81dc2:	4622      	mov	r2, r4
   81dc4:	3a04      	subs	r2, #4
   81dc6:	2a03      	cmp	r2, #3
   81dc8:	f846 5b04 	str.w	r5, [r6], #4
   81dcc:	d8fa      	bhi.n	81dc4 <memset+0x64>
   81dce:	1f22      	subs	r2, r4, #4
   81dd0:	f022 0203 	bic.w	r2, r2, #3
   81dd4:	3204      	adds	r2, #4
   81dd6:	4413      	add	r3, r2
   81dd8:	f004 0403 	and.w	r4, r4, #3
   81ddc:	b12c      	cbz	r4, 81dea <memset+0x8a>
   81dde:	b2c9      	uxtb	r1, r1
   81de0:	441c      	add	r4, r3
   81de2:	f803 1b01 	strb.w	r1, [r3], #1
   81de6:	42a3      	cmp	r3, r4
   81de8:	d1fb      	bne.n	81de2 <memset+0x82>
   81dea:	bcf0      	pop	{r4, r5, r6, r7}
   81dec:	4770      	bx	lr
   81dee:	4614      	mov	r4, r2
   81df0:	4603      	mov	r3, r0
   81df2:	e7c6      	b.n	81d82 <memset+0x22>

00081df4 <setbuf>:
   81df4:	2900      	cmp	r1, #0
   81df6:	bf0c      	ite	eq
   81df8:	2202      	moveq	r2, #2
   81dfa:	2200      	movne	r2, #0
   81dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81e00:	f000 b800 	b.w	81e04 <setvbuf>

00081e04 <setvbuf>:
   81e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81e08:	4d3c      	ldr	r5, [pc, #240]	; (81efc <setvbuf+0xf8>)
   81e0a:	4604      	mov	r4, r0
   81e0c:	682d      	ldr	r5, [r5, #0]
   81e0e:	4688      	mov	r8, r1
   81e10:	4616      	mov	r6, r2
   81e12:	461f      	mov	r7, r3
   81e14:	b115      	cbz	r5, 81e1c <setvbuf+0x18>
   81e16:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81e18:	2b00      	cmp	r3, #0
   81e1a:	d04f      	beq.n	81ebc <setvbuf+0xb8>
   81e1c:	2e02      	cmp	r6, #2
   81e1e:	d830      	bhi.n	81e82 <setvbuf+0x7e>
   81e20:	2f00      	cmp	r7, #0
   81e22:	db2e      	blt.n	81e82 <setvbuf+0x7e>
   81e24:	4628      	mov	r0, r5
   81e26:	4621      	mov	r1, r4
   81e28:	f001 f87a 	bl	82f20 <_fflush_r>
   81e2c:	89a3      	ldrh	r3, [r4, #12]
   81e2e:	2200      	movs	r2, #0
   81e30:	6062      	str	r2, [r4, #4]
   81e32:	61a2      	str	r2, [r4, #24]
   81e34:	061a      	lsls	r2, r3, #24
   81e36:	d428      	bmi.n	81e8a <setvbuf+0x86>
   81e38:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81e3c:	b29b      	uxth	r3, r3
   81e3e:	2e02      	cmp	r6, #2
   81e40:	81a3      	strh	r3, [r4, #12]
   81e42:	d02d      	beq.n	81ea0 <setvbuf+0x9c>
   81e44:	f1b8 0f00 	cmp.w	r8, #0
   81e48:	d03c      	beq.n	81ec4 <setvbuf+0xc0>
   81e4a:	2e01      	cmp	r6, #1
   81e4c:	d013      	beq.n	81e76 <setvbuf+0x72>
   81e4e:	b29b      	uxth	r3, r3
   81e50:	f003 0008 	and.w	r0, r3, #8
   81e54:	4a2a      	ldr	r2, [pc, #168]	; (81f00 <setvbuf+0xfc>)
   81e56:	b280      	uxth	r0, r0
   81e58:	63ea      	str	r2, [r5, #60]	; 0x3c
   81e5a:	f8c4 8000 	str.w	r8, [r4]
   81e5e:	f8c4 8010 	str.w	r8, [r4, #16]
   81e62:	6167      	str	r7, [r4, #20]
   81e64:	b178      	cbz	r0, 81e86 <setvbuf+0x82>
   81e66:	f013 0f03 	tst.w	r3, #3
   81e6a:	bf18      	it	ne
   81e6c:	2700      	movne	r7, #0
   81e6e:	60a7      	str	r7, [r4, #8]
   81e70:	2000      	movs	r0, #0
   81e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e76:	f043 0301 	orr.w	r3, r3, #1
   81e7a:	427a      	negs	r2, r7
   81e7c:	81a3      	strh	r3, [r4, #12]
   81e7e:	61a2      	str	r2, [r4, #24]
   81e80:	e7e5      	b.n	81e4e <setvbuf+0x4a>
   81e82:	f04f 30ff 	mov.w	r0, #4294967295
   81e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e8a:	4628      	mov	r0, r5
   81e8c:	6921      	ldr	r1, [r4, #16]
   81e8e:	f001 f9a7 	bl	831e0 <_free_r>
   81e92:	89a3      	ldrh	r3, [r4, #12]
   81e94:	2e02      	cmp	r6, #2
   81e96:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81e9a:	b29b      	uxth	r3, r3
   81e9c:	81a3      	strh	r3, [r4, #12]
   81e9e:	d1d1      	bne.n	81e44 <setvbuf+0x40>
   81ea0:	2000      	movs	r0, #0
   81ea2:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81ea6:	f043 0302 	orr.w	r3, r3, #2
   81eaa:	2500      	movs	r5, #0
   81eac:	2101      	movs	r1, #1
   81eae:	81a3      	strh	r3, [r4, #12]
   81eb0:	60a5      	str	r5, [r4, #8]
   81eb2:	6022      	str	r2, [r4, #0]
   81eb4:	6122      	str	r2, [r4, #16]
   81eb6:	6161      	str	r1, [r4, #20]
   81eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81ebc:	4628      	mov	r0, r5
   81ebe:	f001 f84b 	bl	82f58 <__sinit>
   81ec2:	e7ab      	b.n	81e1c <setvbuf+0x18>
   81ec4:	2f00      	cmp	r7, #0
   81ec6:	bf08      	it	eq
   81ec8:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81ecc:	4638      	mov	r0, r7
   81ece:	f001 fc7d 	bl	837cc <malloc>
   81ed2:	4680      	mov	r8, r0
   81ed4:	b128      	cbz	r0, 81ee2 <setvbuf+0xde>
   81ed6:	89a3      	ldrh	r3, [r4, #12]
   81ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81edc:	b29b      	uxth	r3, r3
   81ede:	81a3      	strh	r3, [r4, #12]
   81ee0:	e7b3      	b.n	81e4a <setvbuf+0x46>
   81ee2:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81ee6:	f001 fc71 	bl	837cc <malloc>
   81eea:	4680      	mov	r8, r0
   81eec:	b918      	cbnz	r0, 81ef6 <setvbuf+0xf2>
   81eee:	89a3      	ldrh	r3, [r4, #12]
   81ef0:	f04f 30ff 	mov.w	r0, #4294967295
   81ef4:	e7d5      	b.n	81ea2 <setvbuf+0x9e>
   81ef6:	f44f 6780 	mov.w	r7, #1024	; 0x400
   81efa:	e7ec      	b.n	81ed6 <setvbuf+0xd2>
   81efc:	20070568 	.word	0x20070568
   81f00:	00082f4d 	.word	0x00082f4d

00081f04 <__sprint_r.part.0>:
   81f04:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81f06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81f0a:	049c      	lsls	r4, r3, #18
   81f0c:	460e      	mov	r6, r1
   81f0e:	4680      	mov	r8, r0
   81f10:	4691      	mov	r9, r2
   81f12:	d52a      	bpl.n	81f6a <__sprint_r.part.0+0x66>
   81f14:	6893      	ldr	r3, [r2, #8]
   81f16:	6812      	ldr	r2, [r2, #0]
   81f18:	f102 0a08 	add.w	sl, r2, #8
   81f1c:	b31b      	cbz	r3, 81f66 <__sprint_r.part.0+0x62>
   81f1e:	e91a 00a0 	ldmdb	sl, {r5, r7}
   81f22:	08bf      	lsrs	r7, r7, #2
   81f24:	d017      	beq.n	81f56 <__sprint_r.part.0+0x52>
   81f26:	3d04      	subs	r5, #4
   81f28:	2400      	movs	r4, #0
   81f2a:	e001      	b.n	81f30 <__sprint_r.part.0+0x2c>
   81f2c:	42a7      	cmp	r7, r4
   81f2e:	d010      	beq.n	81f52 <__sprint_r.part.0+0x4e>
   81f30:	4640      	mov	r0, r8
   81f32:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81f36:	4632      	mov	r2, r6
   81f38:	f001 f8a4 	bl	83084 <_fputwc_r>
   81f3c:	1c43      	adds	r3, r0, #1
   81f3e:	f104 0401 	add.w	r4, r4, #1
   81f42:	d1f3      	bne.n	81f2c <__sprint_r.part.0+0x28>
   81f44:	2300      	movs	r3, #0
   81f46:	f8c9 3008 	str.w	r3, [r9, #8]
   81f4a:	f8c9 3004 	str.w	r3, [r9, #4]
   81f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81f52:	f8d9 3008 	ldr.w	r3, [r9, #8]
   81f56:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   81f5a:	f8c9 3008 	str.w	r3, [r9, #8]
   81f5e:	f10a 0a08 	add.w	sl, sl, #8
   81f62:	2b00      	cmp	r3, #0
   81f64:	d1db      	bne.n	81f1e <__sprint_r.part.0+0x1a>
   81f66:	2000      	movs	r0, #0
   81f68:	e7ec      	b.n	81f44 <__sprint_r.part.0+0x40>
   81f6a:	f001 fa05 	bl	83378 <__sfvwrite_r>
   81f6e:	2300      	movs	r3, #0
   81f70:	f8c9 3008 	str.w	r3, [r9, #8]
   81f74:	f8c9 3004 	str.w	r3, [r9, #4]
   81f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081f7c <_vfiprintf_r>:
   81f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81f80:	b0b1      	sub	sp, #196	; 0xc4
   81f82:	461c      	mov	r4, r3
   81f84:	9102      	str	r1, [sp, #8]
   81f86:	4690      	mov	r8, r2
   81f88:	9308      	str	r3, [sp, #32]
   81f8a:	9006      	str	r0, [sp, #24]
   81f8c:	b118      	cbz	r0, 81f96 <_vfiprintf_r+0x1a>
   81f8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81f90:	2b00      	cmp	r3, #0
   81f92:	f000 80e8 	beq.w	82166 <_vfiprintf_r+0x1ea>
   81f96:	9d02      	ldr	r5, [sp, #8]
   81f98:	89ab      	ldrh	r3, [r5, #12]
   81f9a:	b29a      	uxth	r2, r3
   81f9c:	0490      	lsls	r0, r2, #18
   81f9e:	d407      	bmi.n	81fb0 <_vfiprintf_r+0x34>
   81fa0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   81fa2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   81fa6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   81faa:	81ab      	strh	r3, [r5, #12]
   81fac:	b29a      	uxth	r2, r3
   81fae:	6669      	str	r1, [r5, #100]	; 0x64
   81fb0:	0711      	lsls	r1, r2, #28
   81fb2:	f140 80b7 	bpl.w	82124 <_vfiprintf_r+0x1a8>
   81fb6:	f8dd b008 	ldr.w	fp, [sp, #8]
   81fba:	f8db 3010 	ldr.w	r3, [fp, #16]
   81fbe:	2b00      	cmp	r3, #0
   81fc0:	f000 80b0 	beq.w	82124 <_vfiprintf_r+0x1a8>
   81fc4:	f002 021a 	and.w	r2, r2, #26
   81fc8:	2a0a      	cmp	r2, #10
   81fca:	f000 80b7 	beq.w	8213c <_vfiprintf_r+0x1c0>
   81fce:	2300      	movs	r3, #0
   81fd0:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   81fd4:	930a      	str	r3, [sp, #40]	; 0x28
   81fd6:	9315      	str	r3, [sp, #84]	; 0x54
   81fd8:	9314      	str	r3, [sp, #80]	; 0x50
   81fda:	9309      	str	r3, [sp, #36]	; 0x24
   81fdc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   81fe0:	464e      	mov	r6, r9
   81fe2:	f898 3000 	ldrb.w	r3, [r8]
   81fe6:	2b00      	cmp	r3, #0
   81fe8:	f000 84c8 	beq.w	8297c <_vfiprintf_r+0xa00>
   81fec:	2b25      	cmp	r3, #37	; 0x25
   81fee:	f000 84c5 	beq.w	8297c <_vfiprintf_r+0xa00>
   81ff2:	f108 0201 	add.w	r2, r8, #1
   81ff6:	e001      	b.n	81ffc <_vfiprintf_r+0x80>
   81ff8:	2b25      	cmp	r3, #37	; 0x25
   81ffa:	d004      	beq.n	82006 <_vfiprintf_r+0x8a>
   81ffc:	7813      	ldrb	r3, [r2, #0]
   81ffe:	4614      	mov	r4, r2
   82000:	3201      	adds	r2, #1
   82002:	2b00      	cmp	r3, #0
   82004:	d1f8      	bne.n	81ff8 <_vfiprintf_r+0x7c>
   82006:	ebc8 0504 	rsb	r5, r8, r4
   8200a:	b195      	cbz	r5, 82032 <_vfiprintf_r+0xb6>
   8200c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8200e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82010:	3301      	adds	r3, #1
   82012:	442a      	add	r2, r5
   82014:	2b07      	cmp	r3, #7
   82016:	f8c6 8000 	str.w	r8, [r6]
   8201a:	6075      	str	r5, [r6, #4]
   8201c:	9215      	str	r2, [sp, #84]	; 0x54
   8201e:	9314      	str	r3, [sp, #80]	; 0x50
   82020:	dd7b      	ble.n	8211a <_vfiprintf_r+0x19e>
   82022:	2a00      	cmp	r2, #0
   82024:	f040 84d5 	bne.w	829d2 <_vfiprintf_r+0xa56>
   82028:	9809      	ldr	r0, [sp, #36]	; 0x24
   8202a:	9214      	str	r2, [sp, #80]	; 0x50
   8202c:	4428      	add	r0, r5
   8202e:	464e      	mov	r6, r9
   82030:	9009      	str	r0, [sp, #36]	; 0x24
   82032:	7823      	ldrb	r3, [r4, #0]
   82034:	2b00      	cmp	r3, #0
   82036:	f000 83ed 	beq.w	82814 <_vfiprintf_r+0x898>
   8203a:	2100      	movs	r1, #0
   8203c:	f04f 0200 	mov.w	r2, #0
   82040:	f04f 3cff 	mov.w	ip, #4294967295
   82044:	7863      	ldrb	r3, [r4, #1]
   82046:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   8204a:	9104      	str	r1, [sp, #16]
   8204c:	468a      	mov	sl, r1
   8204e:	f104 0801 	add.w	r8, r4, #1
   82052:	4608      	mov	r0, r1
   82054:	4665      	mov	r5, ip
   82056:	f108 0801 	add.w	r8, r8, #1
   8205a:	f1a3 0220 	sub.w	r2, r3, #32
   8205e:	2a58      	cmp	r2, #88	; 0x58
   82060:	f200 82d9 	bhi.w	82616 <_vfiprintf_r+0x69a>
   82064:	e8df f012 	tbh	[pc, r2, lsl #1]
   82068:	02d702cb 	.word	0x02d702cb
   8206c:	02d202d7 	.word	0x02d202d7
   82070:	02d702d7 	.word	0x02d702d7
   82074:	02d702d7 	.word	0x02d702d7
   82078:	02d702d7 	.word	0x02d702d7
   8207c:	028f0282 	.word	0x028f0282
   82080:	008402d7 	.word	0x008402d7
   82084:	02d70293 	.word	0x02d70293
   82088:	0196012b 	.word	0x0196012b
   8208c:	01960196 	.word	0x01960196
   82090:	01960196 	.word	0x01960196
   82094:	01960196 	.word	0x01960196
   82098:	01960196 	.word	0x01960196
   8209c:	02d702d7 	.word	0x02d702d7
   820a0:	02d702d7 	.word	0x02d702d7
   820a4:	02d702d7 	.word	0x02d702d7
   820a8:	02d702d7 	.word	0x02d702d7
   820ac:	02d702d7 	.word	0x02d702d7
   820b0:	02d70130 	.word	0x02d70130
   820b4:	02d702d7 	.word	0x02d702d7
   820b8:	02d702d7 	.word	0x02d702d7
   820bc:	02d702d7 	.word	0x02d702d7
   820c0:	02d702d7 	.word	0x02d702d7
   820c4:	017b02d7 	.word	0x017b02d7
   820c8:	02d702d7 	.word	0x02d702d7
   820cc:	02d702d7 	.word	0x02d702d7
   820d0:	01a402d7 	.word	0x01a402d7
   820d4:	02d702d7 	.word	0x02d702d7
   820d8:	02d701bf 	.word	0x02d701bf
   820dc:	02d702d7 	.word	0x02d702d7
   820e0:	02d702d7 	.word	0x02d702d7
   820e4:	02d702d7 	.word	0x02d702d7
   820e8:	02d702d7 	.word	0x02d702d7
   820ec:	01e402d7 	.word	0x01e402d7
   820f0:	02d701fa 	.word	0x02d701fa
   820f4:	02d702d7 	.word	0x02d702d7
   820f8:	01fa0216 	.word	0x01fa0216
   820fc:	02d702d7 	.word	0x02d702d7
   82100:	02d7021b 	.word	0x02d7021b
   82104:	00890228 	.word	0x00890228
   82108:	027d0266 	.word	0x027d0266
   8210c:	023a02d7 	.word	0x023a02d7
   82110:	011902d7 	.word	0x011902d7
   82114:	02d702d7 	.word	0x02d702d7
   82118:	02af      	.short	0x02af
   8211a:	3608      	adds	r6, #8
   8211c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8211e:	4428      	add	r0, r5
   82120:	9009      	str	r0, [sp, #36]	; 0x24
   82122:	e786      	b.n	82032 <_vfiprintf_r+0xb6>
   82124:	9806      	ldr	r0, [sp, #24]
   82126:	9902      	ldr	r1, [sp, #8]
   82128:	f000 fde4 	bl	82cf4 <__swsetup_r>
   8212c:	b9b0      	cbnz	r0, 8215c <_vfiprintf_r+0x1e0>
   8212e:	9d02      	ldr	r5, [sp, #8]
   82130:	89aa      	ldrh	r2, [r5, #12]
   82132:	f002 021a 	and.w	r2, r2, #26
   82136:	2a0a      	cmp	r2, #10
   82138:	f47f af49 	bne.w	81fce <_vfiprintf_r+0x52>
   8213c:	f8dd b008 	ldr.w	fp, [sp, #8]
   82140:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82144:	2b00      	cmp	r3, #0
   82146:	f6ff af42 	blt.w	81fce <_vfiprintf_r+0x52>
   8214a:	9806      	ldr	r0, [sp, #24]
   8214c:	4659      	mov	r1, fp
   8214e:	4642      	mov	r2, r8
   82150:	4623      	mov	r3, r4
   82152:	f000 fd3d 	bl	82bd0 <__sbprintf>
   82156:	b031      	add	sp, #196	; 0xc4
   82158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8215c:	f04f 30ff 	mov.w	r0, #4294967295
   82160:	b031      	add	sp, #196	; 0xc4
   82162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82166:	f000 fef7 	bl	82f58 <__sinit>
   8216a:	e714      	b.n	81f96 <_vfiprintf_r+0x1a>
   8216c:	4240      	negs	r0, r0
   8216e:	9308      	str	r3, [sp, #32]
   82170:	f04a 0a04 	orr.w	sl, sl, #4
   82174:	f898 3000 	ldrb.w	r3, [r8]
   82178:	e76d      	b.n	82056 <_vfiprintf_r+0xda>
   8217a:	f01a 0320 	ands.w	r3, sl, #32
   8217e:	9004      	str	r0, [sp, #16]
   82180:	46ac      	mov	ip, r5
   82182:	f000 80f4 	beq.w	8236e <_vfiprintf_r+0x3f2>
   82186:	f8dd b020 	ldr.w	fp, [sp, #32]
   8218a:	f10b 0307 	add.w	r3, fp, #7
   8218e:	f023 0307 	bic.w	r3, r3, #7
   82192:	f103 0408 	add.w	r4, r3, #8
   82196:	9408      	str	r4, [sp, #32]
   82198:	e9d3 4500 	ldrd	r4, r5, [r3]
   8219c:	2300      	movs	r3, #0
   8219e:	f04f 0000 	mov.w	r0, #0
   821a2:	2100      	movs	r1, #0
   821a4:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   821a8:	f8cd c014 	str.w	ip, [sp, #20]
   821ac:	9107      	str	r1, [sp, #28]
   821ae:	f1bc 0f00 	cmp.w	ip, #0
   821b2:	bfa8      	it	ge
   821b4:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   821b8:	ea54 0205 	orrs.w	r2, r4, r5
   821bc:	f040 80ad 	bne.w	8231a <_vfiprintf_r+0x39e>
   821c0:	f1bc 0f00 	cmp.w	ip, #0
   821c4:	f040 80a9 	bne.w	8231a <_vfiprintf_r+0x39e>
   821c8:	2b00      	cmp	r3, #0
   821ca:	f040 83c0 	bne.w	8294e <_vfiprintf_r+0x9d2>
   821ce:	f01a 0f01 	tst.w	sl, #1
   821d2:	f000 83bc 	beq.w	8294e <_vfiprintf_r+0x9d2>
   821d6:	2330      	movs	r3, #48	; 0x30
   821d8:	af30      	add	r7, sp, #192	; 0xc0
   821da:	f807 3d41 	strb.w	r3, [r7, #-65]!
   821de:	ebc7 0409 	rsb	r4, r7, r9
   821e2:	9405      	str	r4, [sp, #20]
   821e4:	f8dd b014 	ldr.w	fp, [sp, #20]
   821e8:	9c07      	ldr	r4, [sp, #28]
   821ea:	45e3      	cmp	fp, ip
   821ec:	bfb8      	it	lt
   821ee:	46e3      	movlt	fp, ip
   821f0:	f8cd b00c 	str.w	fp, [sp, #12]
   821f4:	b11c      	cbz	r4, 821fe <_vfiprintf_r+0x282>
   821f6:	f10b 0b01 	add.w	fp, fp, #1
   821fa:	f8cd b00c 	str.w	fp, [sp, #12]
   821fe:	f01a 0502 	ands.w	r5, sl, #2
   82202:	9507      	str	r5, [sp, #28]
   82204:	d005      	beq.n	82212 <_vfiprintf_r+0x296>
   82206:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8220a:	f10b 0b02 	add.w	fp, fp, #2
   8220e:	f8cd b00c 	str.w	fp, [sp, #12]
   82212:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   82216:	930b      	str	r3, [sp, #44]	; 0x2c
   82218:	f040 821b 	bne.w	82652 <_vfiprintf_r+0x6d6>
   8221c:	9d04      	ldr	r5, [sp, #16]
   8221e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82222:	ebcb 0405 	rsb	r4, fp, r5
   82226:	2c00      	cmp	r4, #0
   82228:	f340 8213 	ble.w	82652 <_vfiprintf_r+0x6d6>
   8222c:	2c10      	cmp	r4, #16
   8222e:	f340 8489 	ble.w	82b44 <_vfiprintf_r+0xbc8>
   82232:	4dbe      	ldr	r5, [pc, #760]	; (8252c <_vfiprintf_r+0x5b0>)
   82234:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82236:	462b      	mov	r3, r5
   82238:	9814      	ldr	r0, [sp, #80]	; 0x50
   8223a:	4625      	mov	r5, r4
   8223c:	f04f 0b10 	mov.w	fp, #16
   82240:	4664      	mov	r4, ip
   82242:	46b4      	mov	ip, r6
   82244:	461e      	mov	r6, r3
   82246:	e006      	b.n	82256 <_vfiprintf_r+0x2da>
   82248:	1c83      	adds	r3, r0, #2
   8224a:	f10c 0c08 	add.w	ip, ip, #8
   8224e:	4608      	mov	r0, r1
   82250:	3d10      	subs	r5, #16
   82252:	2d10      	cmp	r5, #16
   82254:	dd11      	ble.n	8227a <_vfiprintf_r+0x2fe>
   82256:	1c41      	adds	r1, r0, #1
   82258:	3210      	adds	r2, #16
   8225a:	2907      	cmp	r1, #7
   8225c:	9215      	str	r2, [sp, #84]	; 0x54
   8225e:	e88c 0840 	stmia.w	ip, {r6, fp}
   82262:	9114      	str	r1, [sp, #80]	; 0x50
   82264:	ddf0      	ble.n	82248 <_vfiprintf_r+0x2cc>
   82266:	2a00      	cmp	r2, #0
   82268:	f040 81e6 	bne.w	82638 <_vfiprintf_r+0x6bc>
   8226c:	3d10      	subs	r5, #16
   8226e:	2d10      	cmp	r5, #16
   82270:	f04f 0301 	mov.w	r3, #1
   82274:	4610      	mov	r0, r2
   82276:	46cc      	mov	ip, r9
   82278:	dced      	bgt.n	82256 <_vfiprintf_r+0x2da>
   8227a:	4631      	mov	r1, r6
   8227c:	4666      	mov	r6, ip
   8227e:	46a4      	mov	ip, r4
   82280:	462c      	mov	r4, r5
   82282:	460d      	mov	r5, r1
   82284:	4422      	add	r2, r4
   82286:	2b07      	cmp	r3, #7
   82288:	9215      	str	r2, [sp, #84]	; 0x54
   8228a:	6035      	str	r5, [r6, #0]
   8228c:	6074      	str	r4, [r6, #4]
   8228e:	9314      	str	r3, [sp, #80]	; 0x50
   82290:	f300 836d 	bgt.w	8296e <_vfiprintf_r+0x9f2>
   82294:	3608      	adds	r6, #8
   82296:	1c59      	adds	r1, r3, #1
   82298:	e1de      	b.n	82658 <_vfiprintf_r+0x6dc>
   8229a:	f01a 0f20 	tst.w	sl, #32
   8229e:	9004      	str	r0, [sp, #16]
   822a0:	46ac      	mov	ip, r5
   822a2:	f000 808d 	beq.w	823c0 <_vfiprintf_r+0x444>
   822a6:	9d08      	ldr	r5, [sp, #32]
   822a8:	1deb      	adds	r3, r5, #7
   822aa:	f023 0307 	bic.w	r3, r3, #7
   822ae:	f103 0b08 	add.w	fp, r3, #8
   822b2:	e9d3 4500 	ldrd	r4, r5, [r3]
   822b6:	f8cd b020 	str.w	fp, [sp, #32]
   822ba:	2301      	movs	r3, #1
   822bc:	e76f      	b.n	8219e <_vfiprintf_r+0x222>
   822be:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   822c2:	f898 3000 	ldrb.w	r3, [r8]
   822c6:	e6c6      	b.n	82056 <_vfiprintf_r+0xda>
   822c8:	f04a 0a10 	orr.w	sl, sl, #16
   822cc:	f01a 0f20 	tst.w	sl, #32
   822d0:	9004      	str	r0, [sp, #16]
   822d2:	46ac      	mov	ip, r5
   822d4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   822d8:	f000 80c8 	beq.w	8246c <_vfiprintf_r+0x4f0>
   822dc:	9c08      	ldr	r4, [sp, #32]
   822de:	1de1      	adds	r1, r4, #7
   822e0:	f021 0107 	bic.w	r1, r1, #7
   822e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   822e8:	3108      	adds	r1, #8
   822ea:	9108      	str	r1, [sp, #32]
   822ec:	4614      	mov	r4, r2
   822ee:	461d      	mov	r5, r3
   822f0:	2a00      	cmp	r2, #0
   822f2:	f173 0b00 	sbcs.w	fp, r3, #0
   822f6:	f2c0 83ce 	blt.w	82a96 <_vfiprintf_r+0xb1a>
   822fa:	f1bc 0f00 	cmp.w	ip, #0
   822fe:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   82302:	bfa8      	it	ge
   82304:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   82308:	ea54 0205 	orrs.w	r2, r4, r5
   8230c:	9007      	str	r0, [sp, #28]
   8230e:	f8cd c014 	str.w	ip, [sp, #20]
   82312:	f04f 0301 	mov.w	r3, #1
   82316:	f43f af53 	beq.w	821c0 <_vfiprintf_r+0x244>
   8231a:	2b01      	cmp	r3, #1
   8231c:	f000 8319 	beq.w	82952 <_vfiprintf_r+0x9d6>
   82320:	2b02      	cmp	r3, #2
   82322:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   82326:	f040 824c 	bne.w	827c2 <_vfiprintf_r+0x846>
   8232a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   8232e:	4619      	mov	r1, r3
   82330:	f004 000f 	and.w	r0, r4, #15
   82334:	0922      	lsrs	r2, r4, #4
   82336:	f81b 0000 	ldrb.w	r0, [fp, r0]
   8233a:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   8233e:	092b      	lsrs	r3, r5, #4
   82340:	7008      	strb	r0, [r1, #0]
   82342:	ea52 0003 	orrs.w	r0, r2, r3
   82346:	460f      	mov	r7, r1
   82348:	4614      	mov	r4, r2
   8234a:	461d      	mov	r5, r3
   8234c:	f101 31ff 	add.w	r1, r1, #4294967295
   82350:	d1ee      	bne.n	82330 <_vfiprintf_r+0x3b4>
   82352:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   82356:	ebc7 0309 	rsb	r3, r7, r9
   8235a:	9305      	str	r3, [sp, #20]
   8235c:	e742      	b.n	821e4 <_vfiprintf_r+0x268>
   8235e:	f04a 0a10 	orr.w	sl, sl, #16
   82362:	f01a 0320 	ands.w	r3, sl, #32
   82366:	9004      	str	r0, [sp, #16]
   82368:	46ac      	mov	ip, r5
   8236a:	f47f af0c 	bne.w	82186 <_vfiprintf_r+0x20a>
   8236e:	f01a 0210 	ands.w	r2, sl, #16
   82372:	f040 8311 	bne.w	82998 <_vfiprintf_r+0xa1c>
   82376:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   8237a:	f000 830d 	beq.w	82998 <_vfiprintf_r+0xa1c>
   8237e:	f8dd b020 	ldr.w	fp, [sp, #32]
   82382:	4613      	mov	r3, r2
   82384:	f8bb 4000 	ldrh.w	r4, [fp]
   82388:	f10b 0b04 	add.w	fp, fp, #4
   8238c:	2500      	movs	r5, #0
   8238e:	f8cd b020 	str.w	fp, [sp, #32]
   82392:	e704      	b.n	8219e <_vfiprintf_r+0x222>
   82394:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82398:	2000      	movs	r0, #0
   8239a:	f818 3b01 	ldrb.w	r3, [r8], #1
   8239e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   823a2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   823a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   823aa:	2a09      	cmp	r2, #9
   823ac:	d9f5      	bls.n	8239a <_vfiprintf_r+0x41e>
   823ae:	e654      	b.n	8205a <_vfiprintf_r+0xde>
   823b0:	f04a 0a10 	orr.w	sl, sl, #16
   823b4:	f01a 0f20 	tst.w	sl, #32
   823b8:	9004      	str	r0, [sp, #16]
   823ba:	46ac      	mov	ip, r5
   823bc:	f47f af73 	bne.w	822a6 <_vfiprintf_r+0x32a>
   823c0:	f01a 0f10 	tst.w	sl, #16
   823c4:	f040 82ef 	bne.w	829a6 <_vfiprintf_r+0xa2a>
   823c8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   823cc:	f000 82eb 	beq.w	829a6 <_vfiprintf_r+0xa2a>
   823d0:	f8dd b020 	ldr.w	fp, [sp, #32]
   823d4:	2500      	movs	r5, #0
   823d6:	f8bb 4000 	ldrh.w	r4, [fp]
   823da:	f10b 0b04 	add.w	fp, fp, #4
   823de:	2301      	movs	r3, #1
   823e0:	f8cd b020 	str.w	fp, [sp, #32]
   823e4:	e6db      	b.n	8219e <_vfiprintf_r+0x222>
   823e6:	46ac      	mov	ip, r5
   823e8:	4d51      	ldr	r5, [pc, #324]	; (82530 <_vfiprintf_r+0x5b4>)
   823ea:	f01a 0f20 	tst.w	sl, #32
   823ee:	9004      	str	r0, [sp, #16]
   823f0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   823f4:	950a      	str	r5, [sp, #40]	; 0x28
   823f6:	f000 80f0 	beq.w	825da <_vfiprintf_r+0x65e>
   823fa:	9d08      	ldr	r5, [sp, #32]
   823fc:	1dea      	adds	r2, r5, #7
   823fe:	f022 0207 	bic.w	r2, r2, #7
   82402:	f102 0b08 	add.w	fp, r2, #8
   82406:	f8cd b020 	str.w	fp, [sp, #32]
   8240a:	e9d2 4500 	ldrd	r4, r5, [r2]
   8240e:	f01a 0f01 	tst.w	sl, #1
   82412:	f000 82aa 	beq.w	8296a <_vfiprintf_r+0x9ee>
   82416:	ea54 0b05 	orrs.w	fp, r4, r5
   8241a:	f000 82a6 	beq.w	8296a <_vfiprintf_r+0x9ee>
   8241e:	2230      	movs	r2, #48	; 0x30
   82420:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   82424:	f04a 0a02 	orr.w	sl, sl, #2
   82428:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8242c:	2302      	movs	r3, #2
   8242e:	e6b6      	b.n	8219e <_vfiprintf_r+0x222>
   82430:	9b08      	ldr	r3, [sp, #32]
   82432:	f8dd b020 	ldr.w	fp, [sp, #32]
   82436:	681b      	ldr	r3, [r3, #0]
   82438:	2401      	movs	r4, #1
   8243a:	f04f 0500 	mov.w	r5, #0
   8243e:	f10b 0b04 	add.w	fp, fp, #4
   82442:	9004      	str	r0, [sp, #16]
   82444:	9403      	str	r4, [sp, #12]
   82446:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8244a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8244e:	f8cd b020 	str.w	fp, [sp, #32]
   82452:	9405      	str	r4, [sp, #20]
   82454:	af16      	add	r7, sp, #88	; 0x58
   82456:	f04f 0c00 	mov.w	ip, #0
   8245a:	e6d0      	b.n	821fe <_vfiprintf_r+0x282>
   8245c:	f01a 0f20 	tst.w	sl, #32
   82460:	9004      	str	r0, [sp, #16]
   82462:	46ac      	mov	ip, r5
   82464:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82468:	f47f af38 	bne.w	822dc <_vfiprintf_r+0x360>
   8246c:	f01a 0f10 	tst.w	sl, #16
   82470:	f040 82a7 	bne.w	829c2 <_vfiprintf_r+0xa46>
   82474:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82478:	f000 82a3 	beq.w	829c2 <_vfiprintf_r+0xa46>
   8247c:	f8dd b020 	ldr.w	fp, [sp, #32]
   82480:	f9bb 4000 	ldrsh.w	r4, [fp]
   82484:	f10b 0b04 	add.w	fp, fp, #4
   82488:	17e5      	asrs	r5, r4, #31
   8248a:	4622      	mov	r2, r4
   8248c:	462b      	mov	r3, r5
   8248e:	f8cd b020 	str.w	fp, [sp, #32]
   82492:	e72d      	b.n	822f0 <_vfiprintf_r+0x374>
   82494:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   82498:	f898 3000 	ldrb.w	r3, [r8]
   8249c:	e5db      	b.n	82056 <_vfiprintf_r+0xda>
   8249e:	f898 3000 	ldrb.w	r3, [r8]
   824a2:	4642      	mov	r2, r8
   824a4:	2b6c      	cmp	r3, #108	; 0x6c
   824a6:	bf03      	ittte	eq
   824a8:	f108 0801 	addeq.w	r8, r8, #1
   824ac:	f04a 0a20 	orreq.w	sl, sl, #32
   824b0:	7853      	ldrbeq	r3, [r2, #1]
   824b2:	f04a 0a10 	orrne.w	sl, sl, #16
   824b6:	e5ce      	b.n	82056 <_vfiprintf_r+0xda>
   824b8:	f01a 0f20 	tst.w	sl, #32
   824bc:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   824c0:	f000 82f7 	beq.w	82ab2 <_vfiprintf_r+0xb36>
   824c4:	9c08      	ldr	r4, [sp, #32]
   824c6:	6821      	ldr	r1, [r4, #0]
   824c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   824ca:	17e5      	asrs	r5, r4, #31
   824cc:	462b      	mov	r3, r5
   824ce:	9d08      	ldr	r5, [sp, #32]
   824d0:	4622      	mov	r2, r4
   824d2:	3504      	adds	r5, #4
   824d4:	9508      	str	r5, [sp, #32]
   824d6:	e9c1 2300 	strd	r2, r3, [r1]
   824da:	e582      	b.n	81fe2 <_vfiprintf_r+0x66>
   824dc:	9c08      	ldr	r4, [sp, #32]
   824de:	46ac      	mov	ip, r5
   824e0:	6827      	ldr	r7, [r4, #0]
   824e2:	f04f 0500 	mov.w	r5, #0
   824e6:	9004      	str	r0, [sp, #16]
   824e8:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   824ec:	3404      	adds	r4, #4
   824ee:	2f00      	cmp	r7, #0
   824f0:	f000 8332 	beq.w	82b58 <_vfiprintf_r+0xbdc>
   824f4:	f1bc 0f00 	cmp.w	ip, #0
   824f8:	4638      	mov	r0, r7
   824fa:	f2c0 8307 	blt.w	82b0c <_vfiprintf_r+0xb90>
   824fe:	4662      	mov	r2, ip
   82500:	2100      	movs	r1, #0
   82502:	f8cd c004 	str.w	ip, [sp, #4]
   82506:	f001 fc05 	bl	83d14 <memchr>
   8250a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8250e:	2800      	cmp	r0, #0
   82510:	f000 833a 	beq.w	82b88 <_vfiprintf_r+0xc0c>
   82514:	1bc0      	subs	r0, r0, r7
   82516:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8251a:	4560      	cmp	r0, ip
   8251c:	bfa8      	it	ge
   8251e:	4660      	movge	r0, ip
   82520:	9005      	str	r0, [sp, #20]
   82522:	9408      	str	r4, [sp, #32]
   82524:	9507      	str	r5, [sp, #28]
   82526:	f04f 0c00 	mov.w	ip, #0
   8252a:	e65b      	b.n	821e4 <_vfiprintf_r+0x268>
   8252c:	00084724 	.word	0x00084724
   82530:	000846e4 	.word	0x000846e4
   82534:	9b08      	ldr	r3, [sp, #32]
   82536:	f8dd b020 	ldr.w	fp, [sp, #32]
   8253a:	9004      	str	r0, [sp, #16]
   8253c:	48b2      	ldr	r0, [pc, #712]	; (82808 <_vfiprintf_r+0x88c>)
   8253e:	681c      	ldr	r4, [r3, #0]
   82540:	2230      	movs	r2, #48	; 0x30
   82542:	2378      	movs	r3, #120	; 0x78
   82544:	f10b 0b04 	add.w	fp, fp, #4
   82548:	46ac      	mov	ip, r5
   8254a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   8254e:	f04a 0a02 	orr.w	sl, sl, #2
   82552:	f8cd b020 	str.w	fp, [sp, #32]
   82556:	2500      	movs	r5, #0
   82558:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8255c:	900a      	str	r0, [sp, #40]	; 0x28
   8255e:	2302      	movs	r3, #2
   82560:	e61d      	b.n	8219e <_vfiprintf_r+0x222>
   82562:	f04a 0a20 	orr.w	sl, sl, #32
   82566:	f898 3000 	ldrb.w	r3, [r8]
   8256a:	e574      	b.n	82056 <_vfiprintf_r+0xda>
   8256c:	f8dd b020 	ldr.w	fp, [sp, #32]
   82570:	f8db 0000 	ldr.w	r0, [fp]
   82574:	f10b 0304 	add.w	r3, fp, #4
   82578:	2800      	cmp	r0, #0
   8257a:	f6ff adf7 	blt.w	8216c <_vfiprintf_r+0x1f0>
   8257e:	9308      	str	r3, [sp, #32]
   82580:	f898 3000 	ldrb.w	r3, [r8]
   82584:	e567      	b.n	82056 <_vfiprintf_r+0xda>
   82586:	f898 3000 	ldrb.w	r3, [r8]
   8258a:	212b      	movs	r1, #43	; 0x2b
   8258c:	e563      	b.n	82056 <_vfiprintf_r+0xda>
   8258e:	f898 3000 	ldrb.w	r3, [r8]
   82592:	f108 0401 	add.w	r4, r8, #1
   82596:	2b2a      	cmp	r3, #42	; 0x2a
   82598:	f000 8305 	beq.w	82ba6 <_vfiprintf_r+0xc2a>
   8259c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   825a0:	2a09      	cmp	r2, #9
   825a2:	bf98      	it	ls
   825a4:	2500      	movls	r5, #0
   825a6:	f200 82fa 	bhi.w	82b9e <_vfiprintf_r+0xc22>
   825aa:	f814 3b01 	ldrb.w	r3, [r4], #1
   825ae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   825b2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   825b6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   825ba:	2a09      	cmp	r2, #9
   825bc:	d9f5      	bls.n	825aa <_vfiprintf_r+0x62e>
   825be:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   825c2:	46a0      	mov	r8, r4
   825c4:	e549      	b.n	8205a <_vfiprintf_r+0xde>
   825c6:	4c90      	ldr	r4, [pc, #576]	; (82808 <_vfiprintf_r+0x88c>)
   825c8:	f01a 0f20 	tst.w	sl, #32
   825cc:	9004      	str	r0, [sp, #16]
   825ce:	46ac      	mov	ip, r5
   825d0:	940a      	str	r4, [sp, #40]	; 0x28
   825d2:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   825d6:	f47f af10 	bne.w	823fa <_vfiprintf_r+0x47e>
   825da:	f01a 0f10 	tst.w	sl, #16
   825de:	f040 81ea 	bne.w	829b6 <_vfiprintf_r+0xa3a>
   825e2:	f01a 0f40 	tst.w	sl, #64	; 0x40
   825e6:	f000 81e6 	beq.w	829b6 <_vfiprintf_r+0xa3a>
   825ea:	f8dd b020 	ldr.w	fp, [sp, #32]
   825ee:	2500      	movs	r5, #0
   825f0:	f8bb 4000 	ldrh.w	r4, [fp]
   825f4:	f10b 0b04 	add.w	fp, fp, #4
   825f8:	f8cd b020 	str.w	fp, [sp, #32]
   825fc:	e707      	b.n	8240e <_vfiprintf_r+0x492>
   825fe:	f898 3000 	ldrb.w	r3, [r8]
   82602:	2900      	cmp	r1, #0
   82604:	f47f ad27 	bne.w	82056 <_vfiprintf_r+0xda>
   82608:	2120      	movs	r1, #32
   8260a:	e524      	b.n	82056 <_vfiprintf_r+0xda>
   8260c:	f04a 0a01 	orr.w	sl, sl, #1
   82610:	f898 3000 	ldrb.w	r3, [r8]
   82614:	e51f      	b.n	82056 <_vfiprintf_r+0xda>
   82616:	9004      	str	r0, [sp, #16]
   82618:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8261c:	2b00      	cmp	r3, #0
   8261e:	f000 80f9 	beq.w	82814 <_vfiprintf_r+0x898>
   82622:	2501      	movs	r5, #1
   82624:	f04f 0b00 	mov.w	fp, #0
   82628:	9503      	str	r5, [sp, #12]
   8262a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8262e:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   82632:	9505      	str	r5, [sp, #20]
   82634:	af16      	add	r7, sp, #88	; 0x58
   82636:	e70e      	b.n	82456 <_vfiprintf_r+0x4da>
   82638:	9806      	ldr	r0, [sp, #24]
   8263a:	9902      	ldr	r1, [sp, #8]
   8263c:	aa13      	add	r2, sp, #76	; 0x4c
   8263e:	f7ff fc61 	bl	81f04 <__sprint_r.part.0>
   82642:	2800      	cmp	r0, #0
   82644:	f040 80ed 	bne.w	82822 <_vfiprintf_r+0x8a6>
   82648:	9814      	ldr	r0, [sp, #80]	; 0x50
   8264a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8264c:	1c43      	adds	r3, r0, #1
   8264e:	46cc      	mov	ip, r9
   82650:	e5fe      	b.n	82250 <_vfiprintf_r+0x2d4>
   82652:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82654:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82656:	1c59      	adds	r1, r3, #1
   82658:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   8265c:	b168      	cbz	r0, 8267a <_vfiprintf_r+0x6fe>
   8265e:	3201      	adds	r2, #1
   82660:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   82664:	2301      	movs	r3, #1
   82666:	2907      	cmp	r1, #7
   82668:	9215      	str	r2, [sp, #84]	; 0x54
   8266a:	9114      	str	r1, [sp, #80]	; 0x50
   8266c:	e886 0009 	stmia.w	r6, {r0, r3}
   82670:	f300 8160 	bgt.w	82934 <_vfiprintf_r+0x9b8>
   82674:	460b      	mov	r3, r1
   82676:	3608      	adds	r6, #8
   82678:	3101      	adds	r1, #1
   8267a:	9c07      	ldr	r4, [sp, #28]
   8267c:	b164      	cbz	r4, 82698 <_vfiprintf_r+0x71c>
   8267e:	3202      	adds	r2, #2
   82680:	a812      	add	r0, sp, #72	; 0x48
   82682:	2302      	movs	r3, #2
   82684:	2907      	cmp	r1, #7
   82686:	9215      	str	r2, [sp, #84]	; 0x54
   82688:	9114      	str	r1, [sp, #80]	; 0x50
   8268a:	e886 0009 	stmia.w	r6, {r0, r3}
   8268e:	f300 8157 	bgt.w	82940 <_vfiprintf_r+0x9c4>
   82692:	460b      	mov	r3, r1
   82694:	3608      	adds	r6, #8
   82696:	3101      	adds	r1, #1
   82698:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8269a:	2d80      	cmp	r5, #128	; 0x80
   8269c:	f000 8101 	beq.w	828a2 <_vfiprintf_r+0x926>
   826a0:	9d05      	ldr	r5, [sp, #20]
   826a2:	ebc5 040c 	rsb	r4, r5, ip
   826a6:	2c00      	cmp	r4, #0
   826a8:	dd2f      	ble.n	8270a <_vfiprintf_r+0x78e>
   826aa:	2c10      	cmp	r4, #16
   826ac:	4d57      	ldr	r5, [pc, #348]	; (8280c <_vfiprintf_r+0x890>)
   826ae:	dd22      	ble.n	826f6 <_vfiprintf_r+0x77a>
   826b0:	4630      	mov	r0, r6
   826b2:	f04f 0b10 	mov.w	fp, #16
   826b6:	462e      	mov	r6, r5
   826b8:	4625      	mov	r5, r4
   826ba:	9c06      	ldr	r4, [sp, #24]
   826bc:	e006      	b.n	826cc <_vfiprintf_r+0x750>
   826be:	f103 0c02 	add.w	ip, r3, #2
   826c2:	3008      	adds	r0, #8
   826c4:	460b      	mov	r3, r1
   826c6:	3d10      	subs	r5, #16
   826c8:	2d10      	cmp	r5, #16
   826ca:	dd10      	ble.n	826ee <_vfiprintf_r+0x772>
   826cc:	1c59      	adds	r1, r3, #1
   826ce:	3210      	adds	r2, #16
   826d0:	2907      	cmp	r1, #7
   826d2:	9215      	str	r2, [sp, #84]	; 0x54
   826d4:	e880 0840 	stmia.w	r0, {r6, fp}
   826d8:	9114      	str	r1, [sp, #80]	; 0x50
   826da:	ddf0      	ble.n	826be <_vfiprintf_r+0x742>
   826dc:	2a00      	cmp	r2, #0
   826de:	d163      	bne.n	827a8 <_vfiprintf_r+0x82c>
   826e0:	3d10      	subs	r5, #16
   826e2:	2d10      	cmp	r5, #16
   826e4:	f04f 0c01 	mov.w	ip, #1
   826e8:	4613      	mov	r3, r2
   826ea:	4648      	mov	r0, r9
   826ec:	dcee      	bgt.n	826cc <_vfiprintf_r+0x750>
   826ee:	462c      	mov	r4, r5
   826f0:	4661      	mov	r1, ip
   826f2:	4635      	mov	r5, r6
   826f4:	4606      	mov	r6, r0
   826f6:	4422      	add	r2, r4
   826f8:	2907      	cmp	r1, #7
   826fa:	9215      	str	r2, [sp, #84]	; 0x54
   826fc:	6035      	str	r5, [r6, #0]
   826fe:	6074      	str	r4, [r6, #4]
   82700:	9114      	str	r1, [sp, #80]	; 0x50
   82702:	f300 80c1 	bgt.w	82888 <_vfiprintf_r+0x90c>
   82706:	3608      	adds	r6, #8
   82708:	3101      	adds	r1, #1
   8270a:	9d05      	ldr	r5, [sp, #20]
   8270c:	2907      	cmp	r1, #7
   8270e:	442a      	add	r2, r5
   82710:	9215      	str	r2, [sp, #84]	; 0x54
   82712:	6037      	str	r7, [r6, #0]
   82714:	6075      	str	r5, [r6, #4]
   82716:	9114      	str	r1, [sp, #80]	; 0x50
   82718:	f340 80c1 	ble.w	8289e <_vfiprintf_r+0x922>
   8271c:	2a00      	cmp	r2, #0
   8271e:	f040 8130 	bne.w	82982 <_vfiprintf_r+0xa06>
   82722:	9214      	str	r2, [sp, #80]	; 0x50
   82724:	464e      	mov	r6, r9
   82726:	f01a 0f04 	tst.w	sl, #4
   8272a:	f000 808b 	beq.w	82844 <_vfiprintf_r+0x8c8>
   8272e:	9d04      	ldr	r5, [sp, #16]
   82730:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82734:	ebcb 0405 	rsb	r4, fp, r5
   82738:	2c00      	cmp	r4, #0
   8273a:	f340 8083 	ble.w	82844 <_vfiprintf_r+0x8c8>
   8273e:	2c10      	cmp	r4, #16
   82740:	f340 821e 	ble.w	82b80 <_vfiprintf_r+0xc04>
   82744:	9914      	ldr	r1, [sp, #80]	; 0x50
   82746:	4d32      	ldr	r5, [pc, #200]	; (82810 <_vfiprintf_r+0x894>)
   82748:	2710      	movs	r7, #16
   8274a:	f8dd a018 	ldr.w	sl, [sp, #24]
   8274e:	f8dd b008 	ldr.w	fp, [sp, #8]
   82752:	e005      	b.n	82760 <_vfiprintf_r+0x7e4>
   82754:	1c88      	adds	r0, r1, #2
   82756:	3608      	adds	r6, #8
   82758:	4619      	mov	r1, r3
   8275a:	3c10      	subs	r4, #16
   8275c:	2c10      	cmp	r4, #16
   8275e:	dd10      	ble.n	82782 <_vfiprintf_r+0x806>
   82760:	1c4b      	adds	r3, r1, #1
   82762:	3210      	adds	r2, #16
   82764:	2b07      	cmp	r3, #7
   82766:	9215      	str	r2, [sp, #84]	; 0x54
   82768:	e886 00a0 	stmia.w	r6, {r5, r7}
   8276c:	9314      	str	r3, [sp, #80]	; 0x50
   8276e:	ddf1      	ble.n	82754 <_vfiprintf_r+0x7d8>
   82770:	2a00      	cmp	r2, #0
   82772:	d17d      	bne.n	82870 <_vfiprintf_r+0x8f4>
   82774:	3c10      	subs	r4, #16
   82776:	2c10      	cmp	r4, #16
   82778:	f04f 0001 	mov.w	r0, #1
   8277c:	4611      	mov	r1, r2
   8277e:	464e      	mov	r6, r9
   82780:	dcee      	bgt.n	82760 <_vfiprintf_r+0x7e4>
   82782:	4422      	add	r2, r4
   82784:	2807      	cmp	r0, #7
   82786:	9215      	str	r2, [sp, #84]	; 0x54
   82788:	6035      	str	r5, [r6, #0]
   8278a:	6074      	str	r4, [r6, #4]
   8278c:	9014      	str	r0, [sp, #80]	; 0x50
   8278e:	dd59      	ble.n	82844 <_vfiprintf_r+0x8c8>
   82790:	2a00      	cmp	r2, #0
   82792:	d14f      	bne.n	82834 <_vfiprintf_r+0x8b8>
   82794:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82796:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8279a:	9d04      	ldr	r5, [sp, #16]
   8279c:	45ab      	cmp	fp, r5
   8279e:	bfac      	ite	ge
   827a0:	445c      	addge	r4, fp
   827a2:	1964      	addlt	r4, r4, r5
   827a4:	9409      	str	r4, [sp, #36]	; 0x24
   827a6:	e05e      	b.n	82866 <_vfiprintf_r+0x8ea>
   827a8:	4620      	mov	r0, r4
   827aa:	9902      	ldr	r1, [sp, #8]
   827ac:	aa13      	add	r2, sp, #76	; 0x4c
   827ae:	f7ff fba9 	bl	81f04 <__sprint_r.part.0>
   827b2:	2800      	cmp	r0, #0
   827b4:	d135      	bne.n	82822 <_vfiprintf_r+0x8a6>
   827b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   827b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   827ba:	f103 0c01 	add.w	ip, r3, #1
   827be:	4648      	mov	r0, r9
   827c0:	e781      	b.n	826c6 <_vfiprintf_r+0x74a>
   827c2:	08e0      	lsrs	r0, r4, #3
   827c4:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   827c8:	f004 0207 	and.w	r2, r4, #7
   827cc:	08e9      	lsrs	r1, r5, #3
   827ce:	3230      	adds	r2, #48	; 0x30
   827d0:	ea50 0b01 	orrs.w	fp, r0, r1
   827d4:	461f      	mov	r7, r3
   827d6:	701a      	strb	r2, [r3, #0]
   827d8:	4604      	mov	r4, r0
   827da:	460d      	mov	r5, r1
   827dc:	f103 33ff 	add.w	r3, r3, #4294967295
   827e0:	d1ef      	bne.n	827c2 <_vfiprintf_r+0x846>
   827e2:	f01a 0f01 	tst.w	sl, #1
   827e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   827ea:	4639      	mov	r1, r7
   827ec:	f000 80b9 	beq.w	82962 <_vfiprintf_r+0x9e6>
   827f0:	2a30      	cmp	r2, #48	; 0x30
   827f2:	f43f acf4 	beq.w	821de <_vfiprintf_r+0x262>
   827f6:	461f      	mov	r7, r3
   827f8:	ebc7 0509 	rsb	r5, r7, r9
   827fc:	2330      	movs	r3, #48	; 0x30
   827fe:	9505      	str	r5, [sp, #20]
   82800:	f801 3c01 	strb.w	r3, [r1, #-1]
   82804:	e4ee      	b.n	821e4 <_vfiprintf_r+0x268>
   82806:	bf00      	nop
   82808:	000846f8 	.word	0x000846f8
   8280c:	00084714 	.word	0x00084714
   82810:	00084724 	.word	0x00084724
   82814:	9b15      	ldr	r3, [sp, #84]	; 0x54
   82816:	b123      	cbz	r3, 82822 <_vfiprintf_r+0x8a6>
   82818:	9806      	ldr	r0, [sp, #24]
   8281a:	9902      	ldr	r1, [sp, #8]
   8281c:	aa13      	add	r2, sp, #76	; 0x4c
   8281e:	f7ff fb71 	bl	81f04 <__sprint_r.part.0>
   82822:	9c02      	ldr	r4, [sp, #8]
   82824:	89a3      	ldrh	r3, [r4, #12]
   82826:	065b      	lsls	r3, r3, #25
   82828:	f53f ac98 	bmi.w	8215c <_vfiprintf_r+0x1e0>
   8282c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8282e:	b031      	add	sp, #196	; 0xc4
   82830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82834:	9806      	ldr	r0, [sp, #24]
   82836:	9902      	ldr	r1, [sp, #8]
   82838:	aa13      	add	r2, sp, #76	; 0x4c
   8283a:	f7ff fb63 	bl	81f04 <__sprint_r.part.0>
   8283e:	2800      	cmp	r0, #0
   82840:	d1ef      	bne.n	82822 <_vfiprintf_r+0x8a6>
   82842:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82844:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82846:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8284a:	9d04      	ldr	r5, [sp, #16]
   8284c:	45ab      	cmp	fp, r5
   8284e:	bfac      	ite	ge
   82850:	445c      	addge	r4, fp
   82852:	1964      	addlt	r4, r4, r5
   82854:	9409      	str	r4, [sp, #36]	; 0x24
   82856:	b132      	cbz	r2, 82866 <_vfiprintf_r+0x8ea>
   82858:	9806      	ldr	r0, [sp, #24]
   8285a:	9902      	ldr	r1, [sp, #8]
   8285c:	aa13      	add	r2, sp, #76	; 0x4c
   8285e:	f7ff fb51 	bl	81f04 <__sprint_r.part.0>
   82862:	2800      	cmp	r0, #0
   82864:	d1dd      	bne.n	82822 <_vfiprintf_r+0x8a6>
   82866:	2000      	movs	r0, #0
   82868:	9014      	str	r0, [sp, #80]	; 0x50
   8286a:	464e      	mov	r6, r9
   8286c:	f7ff bbb9 	b.w	81fe2 <_vfiprintf_r+0x66>
   82870:	4650      	mov	r0, sl
   82872:	4659      	mov	r1, fp
   82874:	aa13      	add	r2, sp, #76	; 0x4c
   82876:	f7ff fb45 	bl	81f04 <__sprint_r.part.0>
   8287a:	2800      	cmp	r0, #0
   8287c:	d1d1      	bne.n	82822 <_vfiprintf_r+0x8a6>
   8287e:	9914      	ldr	r1, [sp, #80]	; 0x50
   82880:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82882:	1c48      	adds	r0, r1, #1
   82884:	464e      	mov	r6, r9
   82886:	e768      	b.n	8275a <_vfiprintf_r+0x7de>
   82888:	2a00      	cmp	r2, #0
   8288a:	f040 80f7 	bne.w	82a7c <_vfiprintf_r+0xb00>
   8288e:	9c05      	ldr	r4, [sp, #20]
   82890:	2301      	movs	r3, #1
   82892:	9720      	str	r7, [sp, #128]	; 0x80
   82894:	9421      	str	r4, [sp, #132]	; 0x84
   82896:	9415      	str	r4, [sp, #84]	; 0x54
   82898:	4622      	mov	r2, r4
   8289a:	9314      	str	r3, [sp, #80]	; 0x50
   8289c:	464e      	mov	r6, r9
   8289e:	3608      	adds	r6, #8
   828a0:	e741      	b.n	82726 <_vfiprintf_r+0x7aa>
   828a2:	9d04      	ldr	r5, [sp, #16]
   828a4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   828a8:	ebcb 0405 	rsb	r4, fp, r5
   828ac:	2c00      	cmp	r4, #0
   828ae:	f77f aef7 	ble.w	826a0 <_vfiprintf_r+0x724>
   828b2:	2c10      	cmp	r4, #16
   828b4:	4da6      	ldr	r5, [pc, #664]	; (82b50 <_vfiprintf_r+0xbd4>)
   828b6:	f340 8170 	ble.w	82b9a <_vfiprintf_r+0xc1e>
   828ba:	4629      	mov	r1, r5
   828bc:	f04f 0b10 	mov.w	fp, #16
   828c0:	4625      	mov	r5, r4
   828c2:	4664      	mov	r4, ip
   828c4:	46b4      	mov	ip, r6
   828c6:	460e      	mov	r6, r1
   828c8:	e006      	b.n	828d8 <_vfiprintf_r+0x95c>
   828ca:	1c98      	adds	r0, r3, #2
   828cc:	f10c 0c08 	add.w	ip, ip, #8
   828d0:	460b      	mov	r3, r1
   828d2:	3d10      	subs	r5, #16
   828d4:	2d10      	cmp	r5, #16
   828d6:	dd0f      	ble.n	828f8 <_vfiprintf_r+0x97c>
   828d8:	1c59      	adds	r1, r3, #1
   828da:	3210      	adds	r2, #16
   828dc:	2907      	cmp	r1, #7
   828de:	9215      	str	r2, [sp, #84]	; 0x54
   828e0:	e88c 0840 	stmia.w	ip, {r6, fp}
   828e4:	9114      	str	r1, [sp, #80]	; 0x50
   828e6:	ddf0      	ble.n	828ca <_vfiprintf_r+0x94e>
   828e8:	b9ba      	cbnz	r2, 8291a <_vfiprintf_r+0x99e>
   828ea:	3d10      	subs	r5, #16
   828ec:	2d10      	cmp	r5, #16
   828ee:	f04f 0001 	mov.w	r0, #1
   828f2:	4613      	mov	r3, r2
   828f4:	46cc      	mov	ip, r9
   828f6:	dcef      	bgt.n	828d8 <_vfiprintf_r+0x95c>
   828f8:	4633      	mov	r3, r6
   828fa:	4666      	mov	r6, ip
   828fc:	46a4      	mov	ip, r4
   828fe:	462c      	mov	r4, r5
   82900:	461d      	mov	r5, r3
   82902:	4422      	add	r2, r4
   82904:	2807      	cmp	r0, #7
   82906:	9215      	str	r2, [sp, #84]	; 0x54
   82908:	6035      	str	r5, [r6, #0]
   8290a:	6074      	str	r4, [r6, #4]
   8290c:	9014      	str	r0, [sp, #80]	; 0x50
   8290e:	f300 80af 	bgt.w	82a70 <_vfiprintf_r+0xaf4>
   82912:	3608      	adds	r6, #8
   82914:	1c41      	adds	r1, r0, #1
   82916:	4603      	mov	r3, r0
   82918:	e6c2      	b.n	826a0 <_vfiprintf_r+0x724>
   8291a:	9806      	ldr	r0, [sp, #24]
   8291c:	9902      	ldr	r1, [sp, #8]
   8291e:	aa13      	add	r2, sp, #76	; 0x4c
   82920:	f7ff faf0 	bl	81f04 <__sprint_r.part.0>
   82924:	2800      	cmp	r0, #0
   82926:	f47f af7c 	bne.w	82822 <_vfiprintf_r+0x8a6>
   8292a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8292c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8292e:	1c58      	adds	r0, r3, #1
   82930:	46cc      	mov	ip, r9
   82932:	e7ce      	b.n	828d2 <_vfiprintf_r+0x956>
   82934:	2a00      	cmp	r2, #0
   82936:	d179      	bne.n	82a2c <_vfiprintf_r+0xab0>
   82938:	4619      	mov	r1, r3
   8293a:	464e      	mov	r6, r9
   8293c:	4613      	mov	r3, r2
   8293e:	e69c      	b.n	8267a <_vfiprintf_r+0x6fe>
   82940:	2a00      	cmp	r2, #0
   82942:	f040 8084 	bne.w	82a4e <_vfiprintf_r+0xad2>
   82946:	2101      	movs	r1, #1
   82948:	4613      	mov	r3, r2
   8294a:	464e      	mov	r6, r9
   8294c:	e6a4      	b.n	82698 <_vfiprintf_r+0x71c>
   8294e:	464f      	mov	r7, r9
   82950:	e448      	b.n	821e4 <_vfiprintf_r+0x268>
   82952:	2d00      	cmp	r5, #0
   82954:	bf08      	it	eq
   82956:	2c0a      	cmpeq	r4, #10
   82958:	d246      	bcs.n	829e8 <_vfiprintf_r+0xa6c>
   8295a:	3430      	adds	r4, #48	; 0x30
   8295c:	af30      	add	r7, sp, #192	; 0xc0
   8295e:	f807 4d41 	strb.w	r4, [r7, #-65]!
   82962:	ebc7 0309 	rsb	r3, r7, r9
   82966:	9305      	str	r3, [sp, #20]
   82968:	e43c      	b.n	821e4 <_vfiprintf_r+0x268>
   8296a:	2302      	movs	r3, #2
   8296c:	e417      	b.n	8219e <_vfiprintf_r+0x222>
   8296e:	2a00      	cmp	r2, #0
   82970:	f040 80af 	bne.w	82ad2 <_vfiprintf_r+0xb56>
   82974:	4613      	mov	r3, r2
   82976:	2101      	movs	r1, #1
   82978:	464e      	mov	r6, r9
   8297a:	e66d      	b.n	82658 <_vfiprintf_r+0x6dc>
   8297c:	4644      	mov	r4, r8
   8297e:	f7ff bb58 	b.w	82032 <_vfiprintf_r+0xb6>
   82982:	9806      	ldr	r0, [sp, #24]
   82984:	9902      	ldr	r1, [sp, #8]
   82986:	aa13      	add	r2, sp, #76	; 0x4c
   82988:	f7ff fabc 	bl	81f04 <__sprint_r.part.0>
   8298c:	2800      	cmp	r0, #0
   8298e:	f47f af48 	bne.w	82822 <_vfiprintf_r+0x8a6>
   82992:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82994:	464e      	mov	r6, r9
   82996:	e6c6      	b.n	82726 <_vfiprintf_r+0x7aa>
   82998:	9d08      	ldr	r5, [sp, #32]
   8299a:	682c      	ldr	r4, [r5, #0]
   8299c:	3504      	adds	r5, #4
   8299e:	9508      	str	r5, [sp, #32]
   829a0:	2500      	movs	r5, #0
   829a2:	f7ff bbfc 	b.w	8219e <_vfiprintf_r+0x222>
   829a6:	9d08      	ldr	r5, [sp, #32]
   829a8:	2301      	movs	r3, #1
   829aa:	682c      	ldr	r4, [r5, #0]
   829ac:	3504      	adds	r5, #4
   829ae:	9508      	str	r5, [sp, #32]
   829b0:	2500      	movs	r5, #0
   829b2:	f7ff bbf4 	b.w	8219e <_vfiprintf_r+0x222>
   829b6:	9d08      	ldr	r5, [sp, #32]
   829b8:	682c      	ldr	r4, [r5, #0]
   829ba:	3504      	adds	r5, #4
   829bc:	9508      	str	r5, [sp, #32]
   829be:	2500      	movs	r5, #0
   829c0:	e525      	b.n	8240e <_vfiprintf_r+0x492>
   829c2:	9d08      	ldr	r5, [sp, #32]
   829c4:	682c      	ldr	r4, [r5, #0]
   829c6:	3504      	adds	r5, #4
   829c8:	9508      	str	r5, [sp, #32]
   829ca:	17e5      	asrs	r5, r4, #31
   829cc:	4622      	mov	r2, r4
   829ce:	462b      	mov	r3, r5
   829d0:	e48e      	b.n	822f0 <_vfiprintf_r+0x374>
   829d2:	9806      	ldr	r0, [sp, #24]
   829d4:	9902      	ldr	r1, [sp, #8]
   829d6:	aa13      	add	r2, sp, #76	; 0x4c
   829d8:	f7ff fa94 	bl	81f04 <__sprint_r.part.0>
   829dc:	2800      	cmp	r0, #0
   829de:	f47f af20 	bne.w	82822 <_vfiprintf_r+0x8a6>
   829e2:	464e      	mov	r6, r9
   829e4:	f7ff bb9a 	b.w	8211c <_vfiprintf_r+0x1a0>
   829e8:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   829ec:	9603      	str	r6, [sp, #12]
   829ee:	465e      	mov	r6, fp
   829f0:	46e3      	mov	fp, ip
   829f2:	4620      	mov	r0, r4
   829f4:	4629      	mov	r1, r5
   829f6:	220a      	movs	r2, #10
   829f8:	2300      	movs	r3, #0
   829fa:	f7fe fe95 	bl	81728 <__aeabi_uldivmod>
   829fe:	3230      	adds	r2, #48	; 0x30
   82a00:	7032      	strb	r2, [r6, #0]
   82a02:	4620      	mov	r0, r4
   82a04:	4629      	mov	r1, r5
   82a06:	220a      	movs	r2, #10
   82a08:	2300      	movs	r3, #0
   82a0a:	f7fe fe8d 	bl	81728 <__aeabi_uldivmod>
   82a0e:	4604      	mov	r4, r0
   82a10:	460d      	mov	r5, r1
   82a12:	ea54 0005 	orrs.w	r0, r4, r5
   82a16:	4637      	mov	r7, r6
   82a18:	f106 36ff 	add.w	r6, r6, #4294967295
   82a1c:	d1e9      	bne.n	829f2 <_vfiprintf_r+0xa76>
   82a1e:	ebc7 0309 	rsb	r3, r7, r9
   82a22:	46dc      	mov	ip, fp
   82a24:	9e03      	ldr	r6, [sp, #12]
   82a26:	9305      	str	r3, [sp, #20]
   82a28:	f7ff bbdc 	b.w	821e4 <_vfiprintf_r+0x268>
   82a2c:	9806      	ldr	r0, [sp, #24]
   82a2e:	9902      	ldr	r1, [sp, #8]
   82a30:	aa13      	add	r2, sp, #76	; 0x4c
   82a32:	f8cd c004 	str.w	ip, [sp, #4]
   82a36:	f7ff fa65 	bl	81f04 <__sprint_r.part.0>
   82a3a:	f8dd c004 	ldr.w	ip, [sp, #4]
   82a3e:	2800      	cmp	r0, #0
   82a40:	f47f aeef 	bne.w	82822 <_vfiprintf_r+0x8a6>
   82a44:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82a46:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82a48:	1c59      	adds	r1, r3, #1
   82a4a:	464e      	mov	r6, r9
   82a4c:	e615      	b.n	8267a <_vfiprintf_r+0x6fe>
   82a4e:	9806      	ldr	r0, [sp, #24]
   82a50:	9902      	ldr	r1, [sp, #8]
   82a52:	aa13      	add	r2, sp, #76	; 0x4c
   82a54:	f8cd c004 	str.w	ip, [sp, #4]
   82a58:	f7ff fa54 	bl	81f04 <__sprint_r.part.0>
   82a5c:	f8dd c004 	ldr.w	ip, [sp, #4]
   82a60:	2800      	cmp	r0, #0
   82a62:	f47f aede 	bne.w	82822 <_vfiprintf_r+0x8a6>
   82a66:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82a68:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82a6a:	1c59      	adds	r1, r3, #1
   82a6c:	464e      	mov	r6, r9
   82a6e:	e613      	b.n	82698 <_vfiprintf_r+0x71c>
   82a70:	2a00      	cmp	r2, #0
   82a72:	d156      	bne.n	82b22 <_vfiprintf_r+0xba6>
   82a74:	2101      	movs	r1, #1
   82a76:	4613      	mov	r3, r2
   82a78:	464e      	mov	r6, r9
   82a7a:	e611      	b.n	826a0 <_vfiprintf_r+0x724>
   82a7c:	9806      	ldr	r0, [sp, #24]
   82a7e:	9902      	ldr	r1, [sp, #8]
   82a80:	aa13      	add	r2, sp, #76	; 0x4c
   82a82:	f7ff fa3f 	bl	81f04 <__sprint_r.part.0>
   82a86:	2800      	cmp	r0, #0
   82a88:	f47f aecb 	bne.w	82822 <_vfiprintf_r+0x8a6>
   82a8c:	9914      	ldr	r1, [sp, #80]	; 0x50
   82a8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82a90:	3101      	adds	r1, #1
   82a92:	464e      	mov	r6, r9
   82a94:	e639      	b.n	8270a <_vfiprintf_r+0x78e>
   82a96:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   82a9a:	4264      	negs	r4, r4
   82a9c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   82aa0:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   82aa4:	f8cd b01c 	str.w	fp, [sp, #28]
   82aa8:	f8cd c014 	str.w	ip, [sp, #20]
   82aac:	2301      	movs	r3, #1
   82aae:	f7ff bb7e 	b.w	821ae <_vfiprintf_r+0x232>
   82ab2:	f01a 0f10 	tst.w	sl, #16
   82ab6:	d11d      	bne.n	82af4 <_vfiprintf_r+0xb78>
   82ab8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82abc:	d058      	beq.n	82b70 <_vfiprintf_r+0xbf4>
   82abe:	9d08      	ldr	r5, [sp, #32]
   82ac0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   82ac4:	682b      	ldr	r3, [r5, #0]
   82ac6:	3504      	adds	r5, #4
   82ac8:	9508      	str	r5, [sp, #32]
   82aca:	f8a3 b000 	strh.w	fp, [r3]
   82ace:	f7ff ba88 	b.w	81fe2 <_vfiprintf_r+0x66>
   82ad2:	9806      	ldr	r0, [sp, #24]
   82ad4:	9902      	ldr	r1, [sp, #8]
   82ad6:	aa13      	add	r2, sp, #76	; 0x4c
   82ad8:	f8cd c004 	str.w	ip, [sp, #4]
   82adc:	f7ff fa12 	bl	81f04 <__sprint_r.part.0>
   82ae0:	f8dd c004 	ldr.w	ip, [sp, #4]
   82ae4:	2800      	cmp	r0, #0
   82ae6:	f47f ae9c 	bne.w	82822 <_vfiprintf_r+0x8a6>
   82aea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82aec:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82aee:	1c59      	adds	r1, r3, #1
   82af0:	464e      	mov	r6, r9
   82af2:	e5b1      	b.n	82658 <_vfiprintf_r+0x6dc>
   82af4:	f8dd b020 	ldr.w	fp, [sp, #32]
   82af8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82afa:	f8db 3000 	ldr.w	r3, [fp]
   82afe:	f10b 0b04 	add.w	fp, fp, #4
   82b02:	f8cd b020 	str.w	fp, [sp, #32]
   82b06:	601c      	str	r4, [r3, #0]
   82b08:	f7ff ba6b 	b.w	81fe2 <_vfiprintf_r+0x66>
   82b0c:	9408      	str	r4, [sp, #32]
   82b0e:	f001 fc5f 	bl	843d0 <strlen>
   82b12:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   82b16:	9005      	str	r0, [sp, #20]
   82b18:	9407      	str	r4, [sp, #28]
   82b1a:	f04f 0c00 	mov.w	ip, #0
   82b1e:	f7ff bb61 	b.w	821e4 <_vfiprintf_r+0x268>
   82b22:	9806      	ldr	r0, [sp, #24]
   82b24:	9902      	ldr	r1, [sp, #8]
   82b26:	aa13      	add	r2, sp, #76	; 0x4c
   82b28:	f8cd c004 	str.w	ip, [sp, #4]
   82b2c:	f7ff f9ea 	bl	81f04 <__sprint_r.part.0>
   82b30:	f8dd c004 	ldr.w	ip, [sp, #4]
   82b34:	2800      	cmp	r0, #0
   82b36:	f47f ae74 	bne.w	82822 <_vfiprintf_r+0x8a6>
   82b3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82b3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82b3e:	1c59      	adds	r1, r3, #1
   82b40:	464e      	mov	r6, r9
   82b42:	e5ad      	b.n	826a0 <_vfiprintf_r+0x724>
   82b44:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82b46:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82b48:	3301      	adds	r3, #1
   82b4a:	4d02      	ldr	r5, [pc, #8]	; (82b54 <_vfiprintf_r+0xbd8>)
   82b4c:	f7ff bb9a 	b.w	82284 <_vfiprintf_r+0x308>
   82b50:	00084714 	.word	0x00084714
   82b54:	00084724 	.word	0x00084724
   82b58:	f1bc 0f06 	cmp.w	ip, #6
   82b5c:	bf34      	ite	cc
   82b5e:	4663      	movcc	r3, ip
   82b60:	2306      	movcs	r3, #6
   82b62:	9408      	str	r4, [sp, #32]
   82b64:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   82b68:	9305      	str	r3, [sp, #20]
   82b6a:	9403      	str	r4, [sp, #12]
   82b6c:	4f16      	ldr	r7, [pc, #88]	; (82bc8 <_vfiprintf_r+0xc4c>)
   82b6e:	e472      	b.n	82456 <_vfiprintf_r+0x4da>
   82b70:	9c08      	ldr	r4, [sp, #32]
   82b72:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82b74:	6823      	ldr	r3, [r4, #0]
   82b76:	3404      	adds	r4, #4
   82b78:	9408      	str	r4, [sp, #32]
   82b7a:	601d      	str	r5, [r3, #0]
   82b7c:	f7ff ba31 	b.w	81fe2 <_vfiprintf_r+0x66>
   82b80:	9814      	ldr	r0, [sp, #80]	; 0x50
   82b82:	4d12      	ldr	r5, [pc, #72]	; (82bcc <_vfiprintf_r+0xc50>)
   82b84:	3001      	adds	r0, #1
   82b86:	e5fc      	b.n	82782 <_vfiprintf_r+0x806>
   82b88:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   82b8c:	f8cd c014 	str.w	ip, [sp, #20]
   82b90:	9507      	str	r5, [sp, #28]
   82b92:	9408      	str	r4, [sp, #32]
   82b94:	4684      	mov	ip, r0
   82b96:	f7ff bb25 	b.w	821e4 <_vfiprintf_r+0x268>
   82b9a:	4608      	mov	r0, r1
   82b9c:	e6b1      	b.n	82902 <_vfiprintf_r+0x986>
   82b9e:	46a0      	mov	r8, r4
   82ba0:	2500      	movs	r5, #0
   82ba2:	f7ff ba5a 	b.w	8205a <_vfiprintf_r+0xde>
   82ba6:	f8dd b020 	ldr.w	fp, [sp, #32]
   82baa:	f898 3001 	ldrb.w	r3, [r8, #1]
   82bae:	f8db 5000 	ldr.w	r5, [fp]
   82bb2:	f10b 0204 	add.w	r2, fp, #4
   82bb6:	2d00      	cmp	r5, #0
   82bb8:	9208      	str	r2, [sp, #32]
   82bba:	46a0      	mov	r8, r4
   82bbc:	f6bf aa4b 	bge.w	82056 <_vfiprintf_r+0xda>
   82bc0:	f04f 35ff 	mov.w	r5, #4294967295
   82bc4:	f7ff ba47 	b.w	82056 <_vfiprintf_r+0xda>
   82bc8:	0008470c 	.word	0x0008470c
   82bcc:	00084724 	.word	0x00084724

00082bd0 <__sbprintf>:
   82bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82bd4:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   82bd6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   82bda:	4688      	mov	r8, r1
   82bdc:	9719      	str	r7, [sp, #100]	; 0x64
   82bde:	f8d8 701c 	ldr.w	r7, [r8, #28]
   82be2:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   82be6:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   82bea:	9707      	str	r7, [sp, #28]
   82bec:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   82bf0:	ac1a      	add	r4, sp, #104	; 0x68
   82bf2:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82bf6:	f02a 0a02 	bic.w	sl, sl, #2
   82bfa:	2600      	movs	r6, #0
   82bfc:	4669      	mov	r1, sp
   82bfe:	9400      	str	r4, [sp, #0]
   82c00:	9404      	str	r4, [sp, #16]
   82c02:	9502      	str	r5, [sp, #8]
   82c04:	9505      	str	r5, [sp, #20]
   82c06:	f8ad a00c 	strh.w	sl, [sp, #12]
   82c0a:	f8ad 900e 	strh.w	r9, [sp, #14]
   82c0e:	9709      	str	r7, [sp, #36]	; 0x24
   82c10:	9606      	str	r6, [sp, #24]
   82c12:	4605      	mov	r5, r0
   82c14:	f7ff f9b2 	bl	81f7c <_vfiprintf_r>
   82c18:	1e04      	subs	r4, r0, #0
   82c1a:	db07      	blt.n	82c2c <__sbprintf+0x5c>
   82c1c:	4628      	mov	r0, r5
   82c1e:	4669      	mov	r1, sp
   82c20:	f000 f97e 	bl	82f20 <_fflush_r>
   82c24:	42b0      	cmp	r0, r6
   82c26:	bf18      	it	ne
   82c28:	f04f 34ff 	movne.w	r4, #4294967295
   82c2c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82c30:	065b      	lsls	r3, r3, #25
   82c32:	d505      	bpl.n	82c40 <__sbprintf+0x70>
   82c34:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   82c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82c3c:	f8a8 300c 	strh.w	r3, [r8, #12]
   82c40:	4620      	mov	r0, r4
   82c42:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82c4a:	bf00      	nop

00082c4c <__swbuf_r>:
   82c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82c4e:	460d      	mov	r5, r1
   82c50:	4614      	mov	r4, r2
   82c52:	4607      	mov	r7, r0
   82c54:	b110      	cbz	r0, 82c5c <__swbuf_r+0x10>
   82c56:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82c58:	2b00      	cmp	r3, #0
   82c5a:	d048      	beq.n	82cee <__swbuf_r+0xa2>
   82c5c:	89a2      	ldrh	r2, [r4, #12]
   82c5e:	69a0      	ldr	r0, [r4, #24]
   82c60:	b293      	uxth	r3, r2
   82c62:	60a0      	str	r0, [r4, #8]
   82c64:	0718      	lsls	r0, r3, #28
   82c66:	d538      	bpl.n	82cda <__swbuf_r+0x8e>
   82c68:	6926      	ldr	r6, [r4, #16]
   82c6a:	2e00      	cmp	r6, #0
   82c6c:	d035      	beq.n	82cda <__swbuf_r+0x8e>
   82c6e:	0499      	lsls	r1, r3, #18
   82c70:	b2ed      	uxtb	r5, r5
   82c72:	d515      	bpl.n	82ca0 <__swbuf_r+0x54>
   82c74:	6823      	ldr	r3, [r4, #0]
   82c76:	6962      	ldr	r2, [r4, #20]
   82c78:	1b9e      	subs	r6, r3, r6
   82c7a:	4296      	cmp	r6, r2
   82c7c:	da1c      	bge.n	82cb8 <__swbuf_r+0x6c>
   82c7e:	3601      	adds	r6, #1
   82c80:	68a2      	ldr	r2, [r4, #8]
   82c82:	1c59      	adds	r1, r3, #1
   82c84:	3a01      	subs	r2, #1
   82c86:	60a2      	str	r2, [r4, #8]
   82c88:	6021      	str	r1, [r4, #0]
   82c8a:	701d      	strb	r5, [r3, #0]
   82c8c:	6963      	ldr	r3, [r4, #20]
   82c8e:	42b3      	cmp	r3, r6
   82c90:	d01a      	beq.n	82cc8 <__swbuf_r+0x7c>
   82c92:	89a3      	ldrh	r3, [r4, #12]
   82c94:	07db      	lsls	r3, r3, #31
   82c96:	d501      	bpl.n	82c9c <__swbuf_r+0x50>
   82c98:	2d0a      	cmp	r5, #10
   82c9a:	d015      	beq.n	82cc8 <__swbuf_r+0x7c>
   82c9c:	4628      	mov	r0, r5
   82c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82ca0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82ca2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   82caa:	6663      	str	r3, [r4, #100]	; 0x64
   82cac:	6823      	ldr	r3, [r4, #0]
   82cae:	81a2      	strh	r2, [r4, #12]
   82cb0:	6962      	ldr	r2, [r4, #20]
   82cb2:	1b9e      	subs	r6, r3, r6
   82cb4:	4296      	cmp	r6, r2
   82cb6:	dbe2      	blt.n	82c7e <__swbuf_r+0x32>
   82cb8:	4638      	mov	r0, r7
   82cba:	4621      	mov	r1, r4
   82cbc:	f000 f930 	bl	82f20 <_fflush_r>
   82cc0:	b940      	cbnz	r0, 82cd4 <__swbuf_r+0x88>
   82cc2:	6823      	ldr	r3, [r4, #0]
   82cc4:	2601      	movs	r6, #1
   82cc6:	e7db      	b.n	82c80 <__swbuf_r+0x34>
   82cc8:	4638      	mov	r0, r7
   82cca:	4621      	mov	r1, r4
   82ccc:	f000 f928 	bl	82f20 <_fflush_r>
   82cd0:	2800      	cmp	r0, #0
   82cd2:	d0e3      	beq.n	82c9c <__swbuf_r+0x50>
   82cd4:	f04f 30ff 	mov.w	r0, #4294967295
   82cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82cda:	4638      	mov	r0, r7
   82cdc:	4621      	mov	r1, r4
   82cde:	f000 f809 	bl	82cf4 <__swsetup_r>
   82ce2:	2800      	cmp	r0, #0
   82ce4:	d1f6      	bne.n	82cd4 <__swbuf_r+0x88>
   82ce6:	89a2      	ldrh	r2, [r4, #12]
   82ce8:	6926      	ldr	r6, [r4, #16]
   82cea:	b293      	uxth	r3, r2
   82cec:	e7bf      	b.n	82c6e <__swbuf_r+0x22>
   82cee:	f000 f933 	bl	82f58 <__sinit>
   82cf2:	e7b3      	b.n	82c5c <__swbuf_r+0x10>

00082cf4 <__swsetup_r>:
   82cf4:	4b2f      	ldr	r3, [pc, #188]	; (82db4 <__swsetup_r+0xc0>)
   82cf6:	b570      	push	{r4, r5, r6, lr}
   82cf8:	4606      	mov	r6, r0
   82cfa:	6818      	ldr	r0, [r3, #0]
   82cfc:	460c      	mov	r4, r1
   82cfe:	b110      	cbz	r0, 82d06 <__swsetup_r+0x12>
   82d00:	6b82      	ldr	r2, [r0, #56]	; 0x38
   82d02:	2a00      	cmp	r2, #0
   82d04:	d036      	beq.n	82d74 <__swsetup_r+0x80>
   82d06:	89a5      	ldrh	r5, [r4, #12]
   82d08:	b2ab      	uxth	r3, r5
   82d0a:	0719      	lsls	r1, r3, #28
   82d0c:	d50c      	bpl.n	82d28 <__swsetup_r+0x34>
   82d0e:	6922      	ldr	r2, [r4, #16]
   82d10:	b1aa      	cbz	r2, 82d3e <__swsetup_r+0x4a>
   82d12:	f013 0101 	ands.w	r1, r3, #1
   82d16:	d01e      	beq.n	82d56 <__swsetup_r+0x62>
   82d18:	6963      	ldr	r3, [r4, #20]
   82d1a:	2100      	movs	r1, #0
   82d1c:	425b      	negs	r3, r3
   82d1e:	61a3      	str	r3, [r4, #24]
   82d20:	60a1      	str	r1, [r4, #8]
   82d22:	b1f2      	cbz	r2, 82d62 <__swsetup_r+0x6e>
   82d24:	2000      	movs	r0, #0
   82d26:	bd70      	pop	{r4, r5, r6, pc}
   82d28:	06da      	lsls	r2, r3, #27
   82d2a:	d53a      	bpl.n	82da2 <__swsetup_r+0xae>
   82d2c:	075b      	lsls	r3, r3, #29
   82d2e:	d424      	bmi.n	82d7a <__swsetup_r+0x86>
   82d30:	6922      	ldr	r2, [r4, #16]
   82d32:	f045 0308 	orr.w	r3, r5, #8
   82d36:	81a3      	strh	r3, [r4, #12]
   82d38:	b29b      	uxth	r3, r3
   82d3a:	2a00      	cmp	r2, #0
   82d3c:	d1e9      	bne.n	82d12 <__swsetup_r+0x1e>
   82d3e:	f403 7120 	and.w	r1, r3, #640	; 0x280
   82d42:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82d46:	d0e4      	beq.n	82d12 <__swsetup_r+0x1e>
   82d48:	4630      	mov	r0, r6
   82d4a:	4621      	mov	r1, r4
   82d4c:	f000 fcce 	bl	836ec <__smakebuf_r>
   82d50:	89a3      	ldrh	r3, [r4, #12]
   82d52:	6922      	ldr	r2, [r4, #16]
   82d54:	e7dd      	b.n	82d12 <__swsetup_r+0x1e>
   82d56:	0798      	lsls	r0, r3, #30
   82d58:	bf58      	it	pl
   82d5a:	6961      	ldrpl	r1, [r4, #20]
   82d5c:	60a1      	str	r1, [r4, #8]
   82d5e:	2a00      	cmp	r2, #0
   82d60:	d1e0      	bne.n	82d24 <__swsetup_r+0x30>
   82d62:	89a3      	ldrh	r3, [r4, #12]
   82d64:	061a      	lsls	r2, r3, #24
   82d66:	d5dd      	bpl.n	82d24 <__swsetup_r+0x30>
   82d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82d6c:	81a3      	strh	r3, [r4, #12]
   82d6e:	f04f 30ff 	mov.w	r0, #4294967295
   82d72:	bd70      	pop	{r4, r5, r6, pc}
   82d74:	f000 f8f0 	bl	82f58 <__sinit>
   82d78:	e7c5      	b.n	82d06 <__swsetup_r+0x12>
   82d7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82d7c:	b149      	cbz	r1, 82d92 <__swsetup_r+0x9e>
   82d7e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82d82:	4299      	cmp	r1, r3
   82d84:	d003      	beq.n	82d8e <__swsetup_r+0x9a>
   82d86:	4630      	mov	r0, r6
   82d88:	f000 fa2a 	bl	831e0 <_free_r>
   82d8c:	89a5      	ldrh	r5, [r4, #12]
   82d8e:	2300      	movs	r3, #0
   82d90:	6323      	str	r3, [r4, #48]	; 0x30
   82d92:	6922      	ldr	r2, [r4, #16]
   82d94:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   82d98:	2100      	movs	r1, #0
   82d9a:	b2ad      	uxth	r5, r5
   82d9c:	6022      	str	r2, [r4, #0]
   82d9e:	6061      	str	r1, [r4, #4]
   82da0:	e7c7      	b.n	82d32 <__swsetup_r+0x3e>
   82da2:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   82da6:	2309      	movs	r3, #9
   82da8:	6033      	str	r3, [r6, #0]
   82daa:	f04f 30ff 	mov.w	r0, #4294967295
   82dae:	81a5      	strh	r5, [r4, #12]
   82db0:	bd70      	pop	{r4, r5, r6, pc}
   82db2:	bf00      	nop
   82db4:	20070568 	.word	0x20070568

00082db8 <register_fini>:
   82db8:	4b02      	ldr	r3, [pc, #8]	; (82dc4 <register_fini+0xc>)
   82dba:	b113      	cbz	r3, 82dc2 <register_fini+0xa>
   82dbc:	4802      	ldr	r0, [pc, #8]	; (82dc8 <register_fini+0x10>)
   82dbe:	f000 b805 	b.w	82dcc <atexit>
   82dc2:	4770      	bx	lr
   82dc4:	00000000 	.word	0x00000000
   82dc8:	00083055 	.word	0x00083055

00082dcc <atexit>:
   82dcc:	4601      	mov	r1, r0
   82dce:	2000      	movs	r0, #0
   82dd0:	4602      	mov	r2, r0
   82dd2:	4603      	mov	r3, r0
   82dd4:	f001 bb76 	b.w	844c4 <__register_exitproc>

00082dd8 <__sflush_r>:
   82dd8:	898b      	ldrh	r3, [r1, #12]
   82dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82dde:	b29a      	uxth	r2, r3
   82de0:	460d      	mov	r5, r1
   82de2:	0711      	lsls	r1, r2, #28
   82de4:	4680      	mov	r8, r0
   82de6:	d43c      	bmi.n	82e62 <__sflush_r+0x8a>
   82de8:	686a      	ldr	r2, [r5, #4]
   82dea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82dee:	2a00      	cmp	r2, #0
   82df0:	81ab      	strh	r3, [r5, #12]
   82df2:	dd59      	ble.n	82ea8 <__sflush_r+0xd0>
   82df4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82df6:	2c00      	cmp	r4, #0
   82df8:	d04b      	beq.n	82e92 <__sflush_r+0xba>
   82dfa:	b29b      	uxth	r3, r3
   82dfc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   82e00:	2100      	movs	r1, #0
   82e02:	b292      	uxth	r2, r2
   82e04:	f8d8 6000 	ldr.w	r6, [r8]
   82e08:	f8c8 1000 	str.w	r1, [r8]
   82e0c:	2a00      	cmp	r2, #0
   82e0e:	d04f      	beq.n	82eb0 <__sflush_r+0xd8>
   82e10:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82e12:	075f      	lsls	r7, r3, #29
   82e14:	d505      	bpl.n	82e22 <__sflush_r+0x4a>
   82e16:	6869      	ldr	r1, [r5, #4]
   82e18:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82e1a:	1a52      	subs	r2, r2, r1
   82e1c:	b10b      	cbz	r3, 82e22 <__sflush_r+0x4a>
   82e1e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82e20:	1ad2      	subs	r2, r2, r3
   82e22:	4640      	mov	r0, r8
   82e24:	69e9      	ldr	r1, [r5, #28]
   82e26:	2300      	movs	r3, #0
   82e28:	47a0      	blx	r4
   82e2a:	1c44      	adds	r4, r0, #1
   82e2c:	d04a      	beq.n	82ec4 <__sflush_r+0xec>
   82e2e:	89ab      	ldrh	r3, [r5, #12]
   82e30:	692a      	ldr	r2, [r5, #16]
   82e32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82e36:	b29b      	uxth	r3, r3
   82e38:	2100      	movs	r1, #0
   82e3a:	602a      	str	r2, [r5, #0]
   82e3c:	04da      	lsls	r2, r3, #19
   82e3e:	81ab      	strh	r3, [r5, #12]
   82e40:	6069      	str	r1, [r5, #4]
   82e42:	d44c      	bmi.n	82ede <__sflush_r+0x106>
   82e44:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82e46:	f8c8 6000 	str.w	r6, [r8]
   82e4a:	b311      	cbz	r1, 82e92 <__sflush_r+0xba>
   82e4c:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82e50:	4299      	cmp	r1, r3
   82e52:	d002      	beq.n	82e5a <__sflush_r+0x82>
   82e54:	4640      	mov	r0, r8
   82e56:	f000 f9c3 	bl	831e0 <_free_r>
   82e5a:	2000      	movs	r0, #0
   82e5c:	6328      	str	r0, [r5, #48]	; 0x30
   82e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82e62:	692e      	ldr	r6, [r5, #16]
   82e64:	b1ae      	cbz	r6, 82e92 <__sflush_r+0xba>
   82e66:	0791      	lsls	r1, r2, #30
   82e68:	682c      	ldr	r4, [r5, #0]
   82e6a:	bf0c      	ite	eq
   82e6c:	696b      	ldreq	r3, [r5, #20]
   82e6e:	2300      	movne	r3, #0
   82e70:	602e      	str	r6, [r5, #0]
   82e72:	1ba4      	subs	r4, r4, r6
   82e74:	60ab      	str	r3, [r5, #8]
   82e76:	e00a      	b.n	82e8e <__sflush_r+0xb6>
   82e78:	4632      	mov	r2, r6
   82e7a:	4623      	mov	r3, r4
   82e7c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82e7e:	4640      	mov	r0, r8
   82e80:	69e9      	ldr	r1, [r5, #28]
   82e82:	47b8      	blx	r7
   82e84:	2800      	cmp	r0, #0
   82e86:	ebc0 0404 	rsb	r4, r0, r4
   82e8a:	4406      	add	r6, r0
   82e8c:	dd04      	ble.n	82e98 <__sflush_r+0xc0>
   82e8e:	2c00      	cmp	r4, #0
   82e90:	dcf2      	bgt.n	82e78 <__sflush_r+0xa0>
   82e92:	2000      	movs	r0, #0
   82e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82e98:	89ab      	ldrh	r3, [r5, #12]
   82e9a:	f04f 30ff 	mov.w	r0, #4294967295
   82e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82ea2:	81ab      	strh	r3, [r5, #12]
   82ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ea8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82eaa:	2a00      	cmp	r2, #0
   82eac:	dca2      	bgt.n	82df4 <__sflush_r+0x1c>
   82eae:	e7f0      	b.n	82e92 <__sflush_r+0xba>
   82eb0:	2301      	movs	r3, #1
   82eb2:	4640      	mov	r0, r8
   82eb4:	69e9      	ldr	r1, [r5, #28]
   82eb6:	47a0      	blx	r4
   82eb8:	1c43      	adds	r3, r0, #1
   82eba:	4602      	mov	r2, r0
   82ebc:	d01e      	beq.n	82efc <__sflush_r+0x124>
   82ebe:	89ab      	ldrh	r3, [r5, #12]
   82ec0:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82ec2:	e7a6      	b.n	82e12 <__sflush_r+0x3a>
   82ec4:	f8d8 3000 	ldr.w	r3, [r8]
   82ec8:	b95b      	cbnz	r3, 82ee2 <__sflush_r+0x10a>
   82eca:	89aa      	ldrh	r2, [r5, #12]
   82ecc:	6929      	ldr	r1, [r5, #16]
   82ece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82ed2:	b292      	uxth	r2, r2
   82ed4:	606b      	str	r3, [r5, #4]
   82ed6:	04d3      	lsls	r3, r2, #19
   82ed8:	81aa      	strh	r2, [r5, #12]
   82eda:	6029      	str	r1, [r5, #0]
   82edc:	d5b2      	bpl.n	82e44 <__sflush_r+0x6c>
   82ede:	6528      	str	r0, [r5, #80]	; 0x50
   82ee0:	e7b0      	b.n	82e44 <__sflush_r+0x6c>
   82ee2:	2b1d      	cmp	r3, #29
   82ee4:	d001      	beq.n	82eea <__sflush_r+0x112>
   82ee6:	2b16      	cmp	r3, #22
   82ee8:	d113      	bne.n	82f12 <__sflush_r+0x13a>
   82eea:	89a9      	ldrh	r1, [r5, #12]
   82eec:	692b      	ldr	r3, [r5, #16]
   82eee:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   82ef2:	2200      	movs	r2, #0
   82ef4:	81a9      	strh	r1, [r5, #12]
   82ef6:	602b      	str	r3, [r5, #0]
   82ef8:	606a      	str	r2, [r5, #4]
   82efa:	e7a3      	b.n	82e44 <__sflush_r+0x6c>
   82efc:	f8d8 3000 	ldr.w	r3, [r8]
   82f00:	2b00      	cmp	r3, #0
   82f02:	d0dc      	beq.n	82ebe <__sflush_r+0xe6>
   82f04:	2b1d      	cmp	r3, #29
   82f06:	d001      	beq.n	82f0c <__sflush_r+0x134>
   82f08:	2b16      	cmp	r3, #22
   82f0a:	d1c5      	bne.n	82e98 <__sflush_r+0xc0>
   82f0c:	f8c8 6000 	str.w	r6, [r8]
   82f10:	e7bf      	b.n	82e92 <__sflush_r+0xba>
   82f12:	89ab      	ldrh	r3, [r5, #12]
   82f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82f18:	81ab      	strh	r3, [r5, #12]
   82f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82f1e:	bf00      	nop

00082f20 <_fflush_r>:
   82f20:	b510      	push	{r4, lr}
   82f22:	4604      	mov	r4, r0
   82f24:	b082      	sub	sp, #8
   82f26:	b108      	cbz	r0, 82f2c <_fflush_r+0xc>
   82f28:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82f2a:	b153      	cbz	r3, 82f42 <_fflush_r+0x22>
   82f2c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82f30:	b908      	cbnz	r0, 82f36 <_fflush_r+0x16>
   82f32:	b002      	add	sp, #8
   82f34:	bd10      	pop	{r4, pc}
   82f36:	4620      	mov	r0, r4
   82f38:	b002      	add	sp, #8
   82f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82f3e:	f7ff bf4b 	b.w	82dd8 <__sflush_r>
   82f42:	9101      	str	r1, [sp, #4]
   82f44:	f000 f808 	bl	82f58 <__sinit>
   82f48:	9901      	ldr	r1, [sp, #4]
   82f4a:	e7ef      	b.n	82f2c <_fflush_r+0xc>

00082f4c <_cleanup_r>:
   82f4c:	4901      	ldr	r1, [pc, #4]	; (82f54 <_cleanup_r+0x8>)
   82f4e:	f000 bb9f 	b.w	83690 <_fwalk>
   82f52:	bf00      	nop
   82f54:	00084611 	.word	0x00084611

00082f58 <__sinit>:
   82f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82f5c:	6b84      	ldr	r4, [r0, #56]	; 0x38
   82f5e:	b083      	sub	sp, #12
   82f60:	4607      	mov	r7, r0
   82f62:	2c00      	cmp	r4, #0
   82f64:	d165      	bne.n	83032 <__sinit+0xda>
   82f66:	687d      	ldr	r5, [r7, #4]
   82f68:	4833      	ldr	r0, [pc, #204]	; (83038 <__sinit+0xe0>)
   82f6a:	2304      	movs	r3, #4
   82f6c:	2103      	movs	r1, #3
   82f6e:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82f72:	63f8      	str	r0, [r7, #60]	; 0x3c
   82f74:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82f78:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82f7c:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82f80:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82f84:	81ab      	strh	r3, [r5, #12]
   82f86:	602c      	str	r4, [r5, #0]
   82f88:	606c      	str	r4, [r5, #4]
   82f8a:	60ac      	str	r4, [r5, #8]
   82f8c:	666c      	str	r4, [r5, #100]	; 0x64
   82f8e:	81ec      	strh	r4, [r5, #14]
   82f90:	612c      	str	r4, [r5, #16]
   82f92:	616c      	str	r4, [r5, #20]
   82f94:	61ac      	str	r4, [r5, #24]
   82f96:	4621      	mov	r1, r4
   82f98:	2208      	movs	r2, #8
   82f9a:	f7fe fee1 	bl	81d60 <memset>
   82f9e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8303c <__sinit+0xe4>
   82fa2:	68be      	ldr	r6, [r7, #8]
   82fa4:	f8df a098 	ldr.w	sl, [pc, #152]	; 83040 <__sinit+0xe8>
   82fa8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 83044 <__sinit+0xec>
   82fac:	f8df 8098 	ldr.w	r8, [pc, #152]	; 83048 <__sinit+0xf0>
   82fb0:	2301      	movs	r3, #1
   82fb2:	2209      	movs	r2, #9
   82fb4:	61ed      	str	r5, [r5, #28]
   82fb6:	f8c5 b020 	str.w	fp, [r5, #32]
   82fba:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82fbe:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82fc2:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82fc6:	4621      	mov	r1, r4
   82fc8:	81f3      	strh	r3, [r6, #14]
   82fca:	81b2      	strh	r2, [r6, #12]
   82fcc:	6034      	str	r4, [r6, #0]
   82fce:	6074      	str	r4, [r6, #4]
   82fd0:	60b4      	str	r4, [r6, #8]
   82fd2:	6674      	str	r4, [r6, #100]	; 0x64
   82fd4:	6134      	str	r4, [r6, #16]
   82fd6:	6174      	str	r4, [r6, #20]
   82fd8:	61b4      	str	r4, [r6, #24]
   82fda:	2208      	movs	r2, #8
   82fdc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82fe0:	9301      	str	r3, [sp, #4]
   82fe2:	f7fe febd 	bl	81d60 <memset>
   82fe6:	68fd      	ldr	r5, [r7, #12]
   82fe8:	2012      	movs	r0, #18
   82fea:	2202      	movs	r2, #2
   82fec:	61f6      	str	r6, [r6, #28]
   82fee:	f8c6 b020 	str.w	fp, [r6, #32]
   82ff2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   82ff6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82ffa:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82ffe:	4621      	mov	r1, r4
   83000:	81a8      	strh	r0, [r5, #12]
   83002:	81ea      	strh	r2, [r5, #14]
   83004:	602c      	str	r4, [r5, #0]
   83006:	606c      	str	r4, [r5, #4]
   83008:	60ac      	str	r4, [r5, #8]
   8300a:	666c      	str	r4, [r5, #100]	; 0x64
   8300c:	612c      	str	r4, [r5, #16]
   8300e:	616c      	str	r4, [r5, #20]
   83010:	61ac      	str	r4, [r5, #24]
   83012:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83016:	2208      	movs	r2, #8
   83018:	f7fe fea2 	bl	81d60 <memset>
   8301c:	9b01      	ldr	r3, [sp, #4]
   8301e:	61ed      	str	r5, [r5, #28]
   83020:	f8c5 b020 	str.w	fp, [r5, #32]
   83024:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83028:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8302c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83030:	63bb      	str	r3, [r7, #56]	; 0x38
   83032:	b003      	add	sp, #12
   83034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83038:	00082f4d 	.word	0x00082f4d
   8303c:	0008434d 	.word	0x0008434d
   83040:	00084371 	.word	0x00084371
   83044:	000843a9 	.word	0x000843a9
   83048:	000843c9 	.word	0x000843c9

0008304c <__sfp_lock_acquire>:
   8304c:	4770      	bx	lr
   8304e:	bf00      	nop

00083050 <__sfp_lock_release>:
   83050:	4770      	bx	lr
   83052:	bf00      	nop

00083054 <__libc_fini_array>:
   83054:	b538      	push	{r3, r4, r5, lr}
   83056:	4d09      	ldr	r5, [pc, #36]	; (8307c <__libc_fini_array+0x28>)
   83058:	4c09      	ldr	r4, [pc, #36]	; (83080 <__libc_fini_array+0x2c>)
   8305a:	1b64      	subs	r4, r4, r5
   8305c:	10a4      	asrs	r4, r4, #2
   8305e:	bf18      	it	ne
   83060:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   83064:	d005      	beq.n	83072 <__libc_fini_array+0x1e>
   83066:	3c01      	subs	r4, #1
   83068:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8306c:	4798      	blx	r3
   8306e:	2c00      	cmp	r4, #0
   83070:	d1f9      	bne.n	83066 <__libc_fini_array+0x12>
   83072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83076:	f001 bb67 	b.w	84748 <_fini>
   8307a:	bf00      	nop
   8307c:	00084754 	.word	0x00084754
   83080:	00084758 	.word	0x00084758

00083084 <_fputwc_r>:
   83084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83088:	8993      	ldrh	r3, [r2, #12]
   8308a:	460f      	mov	r7, r1
   8308c:	0499      	lsls	r1, r3, #18
   8308e:	b082      	sub	sp, #8
   83090:	4614      	mov	r4, r2
   83092:	4680      	mov	r8, r0
   83094:	d406      	bmi.n	830a4 <_fputwc_r+0x20>
   83096:	6e52      	ldr	r2, [r2, #100]	; 0x64
   83098:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8309c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   830a0:	81a3      	strh	r3, [r4, #12]
   830a2:	6662      	str	r2, [r4, #100]	; 0x64
   830a4:	f000 fb1c 	bl	836e0 <__locale_mb_cur_max>
   830a8:	2801      	cmp	r0, #1
   830aa:	d03e      	beq.n	8312a <_fputwc_r+0xa6>
   830ac:	463a      	mov	r2, r7
   830ae:	4640      	mov	r0, r8
   830b0:	a901      	add	r1, sp, #4
   830b2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   830b6:	f001 f9bb 	bl	84430 <_wcrtomb_r>
   830ba:	1c42      	adds	r2, r0, #1
   830bc:	4606      	mov	r6, r0
   830be:	d02d      	beq.n	8311c <_fputwc_r+0x98>
   830c0:	2800      	cmp	r0, #0
   830c2:	d03a      	beq.n	8313a <_fputwc_r+0xb6>
   830c4:	f89d 1004 	ldrb.w	r1, [sp, #4]
   830c8:	2500      	movs	r5, #0
   830ca:	e009      	b.n	830e0 <_fputwc_r+0x5c>
   830cc:	6823      	ldr	r3, [r4, #0]
   830ce:	7019      	strb	r1, [r3, #0]
   830d0:	6823      	ldr	r3, [r4, #0]
   830d2:	3301      	adds	r3, #1
   830d4:	6023      	str	r3, [r4, #0]
   830d6:	3501      	adds	r5, #1
   830d8:	42b5      	cmp	r5, r6
   830da:	d22e      	bcs.n	8313a <_fputwc_r+0xb6>
   830dc:	ab01      	add	r3, sp, #4
   830de:	5ce9      	ldrb	r1, [r5, r3]
   830e0:	68a3      	ldr	r3, [r4, #8]
   830e2:	3b01      	subs	r3, #1
   830e4:	2b00      	cmp	r3, #0
   830e6:	60a3      	str	r3, [r4, #8]
   830e8:	daf0      	bge.n	830cc <_fputwc_r+0x48>
   830ea:	69a2      	ldr	r2, [r4, #24]
   830ec:	4293      	cmp	r3, r2
   830ee:	db06      	blt.n	830fe <_fputwc_r+0x7a>
   830f0:	6823      	ldr	r3, [r4, #0]
   830f2:	7019      	strb	r1, [r3, #0]
   830f4:	6823      	ldr	r3, [r4, #0]
   830f6:	7819      	ldrb	r1, [r3, #0]
   830f8:	3301      	adds	r3, #1
   830fa:	290a      	cmp	r1, #10
   830fc:	d1ea      	bne.n	830d4 <_fputwc_r+0x50>
   830fe:	4640      	mov	r0, r8
   83100:	4622      	mov	r2, r4
   83102:	f7ff fda3 	bl	82c4c <__swbuf_r>
   83106:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   8310a:	4258      	negs	r0, r3
   8310c:	4158      	adcs	r0, r3
   8310e:	2800      	cmp	r0, #0
   83110:	d0e1      	beq.n	830d6 <_fputwc_r+0x52>
   83112:	f04f 30ff 	mov.w	r0, #4294967295
   83116:	b002      	add	sp, #8
   83118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8311c:	89a3      	ldrh	r3, [r4, #12]
   8311e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83122:	81a3      	strh	r3, [r4, #12]
   83124:	b002      	add	sp, #8
   83126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8312a:	1e7b      	subs	r3, r7, #1
   8312c:	2bfe      	cmp	r3, #254	; 0xfe
   8312e:	d8bd      	bhi.n	830ac <_fputwc_r+0x28>
   83130:	b2f9      	uxtb	r1, r7
   83132:	4606      	mov	r6, r0
   83134:	f88d 1004 	strb.w	r1, [sp, #4]
   83138:	e7c6      	b.n	830c8 <_fputwc_r+0x44>
   8313a:	4638      	mov	r0, r7
   8313c:	b002      	add	sp, #8
   8313e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83142:	bf00      	nop

00083144 <_malloc_trim_r>:
   83144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83146:	4d23      	ldr	r5, [pc, #140]	; (831d4 <_malloc_trim_r+0x90>)
   83148:	460f      	mov	r7, r1
   8314a:	4604      	mov	r4, r0
   8314c:	f000 ff08 	bl	83f60 <__malloc_lock>
   83150:	68ab      	ldr	r3, [r5, #8]
   83152:	685e      	ldr	r6, [r3, #4]
   83154:	f026 0603 	bic.w	r6, r6, #3
   83158:	1bf1      	subs	r1, r6, r7
   8315a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   8315e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83162:	f021 010f 	bic.w	r1, r1, #15
   83166:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   8316a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   8316e:	db07      	blt.n	83180 <_malloc_trim_r+0x3c>
   83170:	4620      	mov	r0, r4
   83172:	2100      	movs	r1, #0
   83174:	f001 f8d8 	bl	84328 <_sbrk_r>
   83178:	68ab      	ldr	r3, [r5, #8]
   8317a:	4433      	add	r3, r6
   8317c:	4298      	cmp	r0, r3
   8317e:	d004      	beq.n	8318a <_malloc_trim_r+0x46>
   83180:	4620      	mov	r0, r4
   83182:	f000 feef 	bl	83f64 <__malloc_unlock>
   83186:	2000      	movs	r0, #0
   83188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8318a:	4620      	mov	r0, r4
   8318c:	4279      	negs	r1, r7
   8318e:	f001 f8cb 	bl	84328 <_sbrk_r>
   83192:	3001      	adds	r0, #1
   83194:	d00d      	beq.n	831b2 <_malloc_trim_r+0x6e>
   83196:	4b10      	ldr	r3, [pc, #64]	; (831d8 <_malloc_trim_r+0x94>)
   83198:	68aa      	ldr	r2, [r5, #8]
   8319a:	6819      	ldr	r1, [r3, #0]
   8319c:	1bf6      	subs	r6, r6, r7
   8319e:	f046 0601 	orr.w	r6, r6, #1
   831a2:	4620      	mov	r0, r4
   831a4:	1bc9      	subs	r1, r1, r7
   831a6:	6056      	str	r6, [r2, #4]
   831a8:	6019      	str	r1, [r3, #0]
   831aa:	f000 fedb 	bl	83f64 <__malloc_unlock>
   831ae:	2001      	movs	r0, #1
   831b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   831b2:	4620      	mov	r0, r4
   831b4:	2100      	movs	r1, #0
   831b6:	f001 f8b7 	bl	84328 <_sbrk_r>
   831ba:	68ab      	ldr	r3, [r5, #8]
   831bc:	1ac2      	subs	r2, r0, r3
   831be:	2a0f      	cmp	r2, #15
   831c0:	ddde      	ble.n	83180 <_malloc_trim_r+0x3c>
   831c2:	4d06      	ldr	r5, [pc, #24]	; (831dc <_malloc_trim_r+0x98>)
   831c4:	4904      	ldr	r1, [pc, #16]	; (831d8 <_malloc_trim_r+0x94>)
   831c6:	682d      	ldr	r5, [r5, #0]
   831c8:	f042 0201 	orr.w	r2, r2, #1
   831cc:	1b40      	subs	r0, r0, r5
   831ce:	605a      	str	r2, [r3, #4]
   831d0:	6008      	str	r0, [r1, #0]
   831d2:	e7d5      	b.n	83180 <_malloc_trim_r+0x3c>
   831d4:	20070590 	.word	0x20070590
   831d8:	20070a50 	.word	0x20070a50
   831dc:	2007099c 	.word	0x2007099c

000831e0 <_free_r>:
   831e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   831e4:	460d      	mov	r5, r1
   831e6:	4606      	mov	r6, r0
   831e8:	2900      	cmp	r1, #0
   831ea:	d055      	beq.n	83298 <_free_r+0xb8>
   831ec:	f000 feb8 	bl	83f60 <__malloc_lock>
   831f0:	f855 1c04 	ldr.w	r1, [r5, #-4]
   831f4:	f8df c170 	ldr.w	ip, [pc, #368]	; 83368 <_free_r+0x188>
   831f8:	f1a5 0408 	sub.w	r4, r5, #8
   831fc:	f021 0301 	bic.w	r3, r1, #1
   83200:	18e2      	adds	r2, r4, r3
   83202:	f8dc 0008 	ldr.w	r0, [ip, #8]
   83206:	6857      	ldr	r7, [r2, #4]
   83208:	4290      	cmp	r0, r2
   8320a:	f027 0703 	bic.w	r7, r7, #3
   8320e:	d068      	beq.n	832e2 <_free_r+0x102>
   83210:	f011 0101 	ands.w	r1, r1, #1
   83214:	6057      	str	r7, [r2, #4]
   83216:	d032      	beq.n	8327e <_free_r+0x9e>
   83218:	2100      	movs	r1, #0
   8321a:	19d0      	adds	r0, r2, r7
   8321c:	6840      	ldr	r0, [r0, #4]
   8321e:	07c0      	lsls	r0, r0, #31
   83220:	d406      	bmi.n	83230 <_free_r+0x50>
   83222:	443b      	add	r3, r7
   83224:	6890      	ldr	r0, [r2, #8]
   83226:	2900      	cmp	r1, #0
   83228:	d04d      	beq.n	832c6 <_free_r+0xe6>
   8322a:	68d2      	ldr	r2, [r2, #12]
   8322c:	60c2      	str	r2, [r0, #12]
   8322e:	6090      	str	r0, [r2, #8]
   83230:	f043 0201 	orr.w	r2, r3, #1
   83234:	6062      	str	r2, [r4, #4]
   83236:	50e3      	str	r3, [r4, r3]
   83238:	b9e1      	cbnz	r1, 83274 <_free_r+0x94>
   8323a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8323e:	d32d      	bcc.n	8329c <_free_r+0xbc>
   83240:	0a5a      	lsrs	r2, r3, #9
   83242:	2a04      	cmp	r2, #4
   83244:	d869      	bhi.n	8331a <_free_r+0x13a>
   83246:	0998      	lsrs	r0, r3, #6
   83248:	3038      	adds	r0, #56	; 0x38
   8324a:	0041      	lsls	r1, r0, #1
   8324c:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   83250:	f8dc 2008 	ldr.w	r2, [ip, #8]
   83254:	4944      	ldr	r1, [pc, #272]	; (83368 <_free_r+0x188>)
   83256:	4562      	cmp	r2, ip
   83258:	d065      	beq.n	83326 <_free_r+0x146>
   8325a:	6851      	ldr	r1, [r2, #4]
   8325c:	f021 0103 	bic.w	r1, r1, #3
   83260:	428b      	cmp	r3, r1
   83262:	d202      	bcs.n	8326a <_free_r+0x8a>
   83264:	6892      	ldr	r2, [r2, #8]
   83266:	4594      	cmp	ip, r2
   83268:	d1f7      	bne.n	8325a <_free_r+0x7a>
   8326a:	68d3      	ldr	r3, [r2, #12]
   8326c:	60e3      	str	r3, [r4, #12]
   8326e:	60a2      	str	r2, [r4, #8]
   83270:	609c      	str	r4, [r3, #8]
   83272:	60d4      	str	r4, [r2, #12]
   83274:	4630      	mov	r0, r6
   83276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8327a:	f000 be73 	b.w	83f64 <__malloc_unlock>
   8327e:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83282:	f10c 0808 	add.w	r8, ip, #8
   83286:	1b64      	subs	r4, r4, r5
   83288:	68a0      	ldr	r0, [r4, #8]
   8328a:	442b      	add	r3, r5
   8328c:	4540      	cmp	r0, r8
   8328e:	d042      	beq.n	83316 <_free_r+0x136>
   83290:	68e5      	ldr	r5, [r4, #12]
   83292:	60c5      	str	r5, [r0, #12]
   83294:	60a8      	str	r0, [r5, #8]
   83296:	e7c0      	b.n	8321a <_free_r+0x3a>
   83298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8329c:	08db      	lsrs	r3, r3, #3
   8329e:	109a      	asrs	r2, r3, #2
   832a0:	2001      	movs	r0, #1
   832a2:	4090      	lsls	r0, r2
   832a4:	f8dc 1004 	ldr.w	r1, [ip, #4]
   832a8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   832ac:	689a      	ldr	r2, [r3, #8]
   832ae:	4301      	orrs	r1, r0
   832b0:	60a2      	str	r2, [r4, #8]
   832b2:	60e3      	str	r3, [r4, #12]
   832b4:	f8cc 1004 	str.w	r1, [ip, #4]
   832b8:	4630      	mov	r0, r6
   832ba:	609c      	str	r4, [r3, #8]
   832bc:	60d4      	str	r4, [r2, #12]
   832be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   832c2:	f000 be4f 	b.w	83f64 <__malloc_unlock>
   832c6:	4d29      	ldr	r5, [pc, #164]	; (8336c <_free_r+0x18c>)
   832c8:	42a8      	cmp	r0, r5
   832ca:	d1ae      	bne.n	8322a <_free_r+0x4a>
   832cc:	f043 0201 	orr.w	r2, r3, #1
   832d0:	f8cc 4014 	str.w	r4, [ip, #20]
   832d4:	f8cc 4010 	str.w	r4, [ip, #16]
   832d8:	60e0      	str	r0, [r4, #12]
   832da:	60a0      	str	r0, [r4, #8]
   832dc:	6062      	str	r2, [r4, #4]
   832de:	50e3      	str	r3, [r4, r3]
   832e0:	e7c8      	b.n	83274 <_free_r+0x94>
   832e2:	441f      	add	r7, r3
   832e4:	07cb      	lsls	r3, r1, #31
   832e6:	d407      	bmi.n	832f8 <_free_r+0x118>
   832e8:	f855 1c08 	ldr.w	r1, [r5, #-8]
   832ec:	1a64      	subs	r4, r4, r1
   832ee:	68e3      	ldr	r3, [r4, #12]
   832f0:	68a2      	ldr	r2, [r4, #8]
   832f2:	440f      	add	r7, r1
   832f4:	60d3      	str	r3, [r2, #12]
   832f6:	609a      	str	r2, [r3, #8]
   832f8:	4b1d      	ldr	r3, [pc, #116]	; (83370 <_free_r+0x190>)
   832fa:	f047 0201 	orr.w	r2, r7, #1
   832fe:	681b      	ldr	r3, [r3, #0]
   83300:	6062      	str	r2, [r4, #4]
   83302:	429f      	cmp	r7, r3
   83304:	f8cc 4008 	str.w	r4, [ip, #8]
   83308:	d3b4      	bcc.n	83274 <_free_r+0x94>
   8330a:	4b1a      	ldr	r3, [pc, #104]	; (83374 <_free_r+0x194>)
   8330c:	4630      	mov	r0, r6
   8330e:	6819      	ldr	r1, [r3, #0]
   83310:	f7ff ff18 	bl	83144 <_malloc_trim_r>
   83314:	e7ae      	b.n	83274 <_free_r+0x94>
   83316:	2101      	movs	r1, #1
   83318:	e77f      	b.n	8321a <_free_r+0x3a>
   8331a:	2a14      	cmp	r2, #20
   8331c:	d80b      	bhi.n	83336 <_free_r+0x156>
   8331e:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   83322:	0041      	lsls	r1, r0, #1
   83324:	e792      	b.n	8324c <_free_r+0x6c>
   83326:	1080      	asrs	r0, r0, #2
   83328:	2501      	movs	r5, #1
   8332a:	4085      	lsls	r5, r0
   8332c:	6848      	ldr	r0, [r1, #4]
   8332e:	4613      	mov	r3, r2
   83330:	4328      	orrs	r0, r5
   83332:	6048      	str	r0, [r1, #4]
   83334:	e79a      	b.n	8326c <_free_r+0x8c>
   83336:	2a54      	cmp	r2, #84	; 0x54
   83338:	d803      	bhi.n	83342 <_free_r+0x162>
   8333a:	0b18      	lsrs	r0, r3, #12
   8333c:	306e      	adds	r0, #110	; 0x6e
   8333e:	0041      	lsls	r1, r0, #1
   83340:	e784      	b.n	8324c <_free_r+0x6c>
   83342:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83346:	d803      	bhi.n	83350 <_free_r+0x170>
   83348:	0bd8      	lsrs	r0, r3, #15
   8334a:	3077      	adds	r0, #119	; 0x77
   8334c:	0041      	lsls	r1, r0, #1
   8334e:	e77d      	b.n	8324c <_free_r+0x6c>
   83350:	f240 5154 	movw	r1, #1364	; 0x554
   83354:	428a      	cmp	r2, r1
   83356:	d803      	bhi.n	83360 <_free_r+0x180>
   83358:	0c98      	lsrs	r0, r3, #18
   8335a:	307c      	adds	r0, #124	; 0x7c
   8335c:	0041      	lsls	r1, r0, #1
   8335e:	e775      	b.n	8324c <_free_r+0x6c>
   83360:	21fc      	movs	r1, #252	; 0xfc
   83362:	207e      	movs	r0, #126	; 0x7e
   83364:	e772      	b.n	8324c <_free_r+0x6c>
   83366:	bf00      	nop
   83368:	20070590 	.word	0x20070590
   8336c:	20070598 	.word	0x20070598
   83370:	20070998 	.word	0x20070998
   83374:	20070a4c 	.word	0x20070a4c

00083378 <__sfvwrite_r>:
   83378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8337c:	6893      	ldr	r3, [r2, #8]
   8337e:	b083      	sub	sp, #12
   83380:	4616      	mov	r6, r2
   83382:	4681      	mov	r9, r0
   83384:	460c      	mov	r4, r1
   83386:	b32b      	cbz	r3, 833d4 <__sfvwrite_r+0x5c>
   83388:	898b      	ldrh	r3, [r1, #12]
   8338a:	0719      	lsls	r1, r3, #28
   8338c:	d526      	bpl.n	833dc <__sfvwrite_r+0x64>
   8338e:	6922      	ldr	r2, [r4, #16]
   83390:	b322      	cbz	r2, 833dc <__sfvwrite_r+0x64>
   83392:	f003 0202 	and.w	r2, r3, #2
   83396:	b292      	uxth	r2, r2
   83398:	6835      	ldr	r5, [r6, #0]
   8339a:	2a00      	cmp	r2, #0
   8339c:	d02c      	beq.n	833f8 <__sfvwrite_r+0x80>
   8339e:	f04f 0a00 	mov.w	sl, #0
   833a2:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8368c <__sfvwrite_r+0x314>
   833a6:	46d0      	mov	r8, sl
   833a8:	45d8      	cmp	r8, fp
   833aa:	bf34      	ite	cc
   833ac:	4643      	movcc	r3, r8
   833ae:	465b      	movcs	r3, fp
   833b0:	4652      	mov	r2, sl
   833b2:	4648      	mov	r0, r9
   833b4:	f1b8 0f00 	cmp.w	r8, #0
   833b8:	d04f      	beq.n	8345a <__sfvwrite_r+0xe2>
   833ba:	69e1      	ldr	r1, [r4, #28]
   833bc:	6a67      	ldr	r7, [r4, #36]	; 0x24
   833be:	47b8      	blx	r7
   833c0:	2800      	cmp	r0, #0
   833c2:	dd56      	ble.n	83472 <__sfvwrite_r+0xfa>
   833c4:	68b3      	ldr	r3, [r6, #8]
   833c6:	4482      	add	sl, r0
   833c8:	1a1b      	subs	r3, r3, r0
   833ca:	ebc0 0808 	rsb	r8, r0, r8
   833ce:	60b3      	str	r3, [r6, #8]
   833d0:	2b00      	cmp	r3, #0
   833d2:	d1e9      	bne.n	833a8 <__sfvwrite_r+0x30>
   833d4:	2000      	movs	r0, #0
   833d6:	b003      	add	sp, #12
   833d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   833dc:	4648      	mov	r0, r9
   833de:	4621      	mov	r1, r4
   833e0:	f7ff fc88 	bl	82cf4 <__swsetup_r>
   833e4:	2800      	cmp	r0, #0
   833e6:	f040 8148 	bne.w	8367a <__sfvwrite_r+0x302>
   833ea:	89a3      	ldrh	r3, [r4, #12]
   833ec:	6835      	ldr	r5, [r6, #0]
   833ee:	f003 0202 	and.w	r2, r3, #2
   833f2:	b292      	uxth	r2, r2
   833f4:	2a00      	cmp	r2, #0
   833f6:	d1d2      	bne.n	8339e <__sfvwrite_r+0x26>
   833f8:	f013 0a01 	ands.w	sl, r3, #1
   833fc:	d142      	bne.n	83484 <__sfvwrite_r+0x10c>
   833fe:	46d0      	mov	r8, sl
   83400:	f1b8 0f00 	cmp.w	r8, #0
   83404:	d023      	beq.n	8344e <__sfvwrite_r+0xd6>
   83406:	059a      	lsls	r2, r3, #22
   83408:	68a7      	ldr	r7, [r4, #8]
   8340a:	d576      	bpl.n	834fa <__sfvwrite_r+0x182>
   8340c:	45b8      	cmp	r8, r7
   8340e:	f0c0 80a4 	bcc.w	8355a <__sfvwrite_r+0x1e2>
   83412:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83416:	f040 80b2 	bne.w	8357e <__sfvwrite_r+0x206>
   8341a:	6820      	ldr	r0, [r4, #0]
   8341c:	46bb      	mov	fp, r7
   8341e:	4651      	mov	r1, sl
   83420:	465a      	mov	r2, fp
   83422:	f000 fd37 	bl	83e94 <memmove>
   83426:	68a2      	ldr	r2, [r4, #8]
   83428:	6821      	ldr	r1, [r4, #0]
   8342a:	1bd2      	subs	r2, r2, r7
   8342c:	eb01 030b 	add.w	r3, r1, fp
   83430:	60a2      	str	r2, [r4, #8]
   83432:	6023      	str	r3, [r4, #0]
   83434:	4642      	mov	r2, r8
   83436:	68b3      	ldr	r3, [r6, #8]
   83438:	4492      	add	sl, r2
   8343a:	1a9b      	subs	r3, r3, r2
   8343c:	ebc2 0808 	rsb	r8, r2, r8
   83440:	60b3      	str	r3, [r6, #8]
   83442:	2b00      	cmp	r3, #0
   83444:	d0c6      	beq.n	833d4 <__sfvwrite_r+0x5c>
   83446:	89a3      	ldrh	r3, [r4, #12]
   83448:	f1b8 0f00 	cmp.w	r8, #0
   8344c:	d1db      	bne.n	83406 <__sfvwrite_r+0x8e>
   8344e:	f8d5 a000 	ldr.w	sl, [r5]
   83452:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83456:	3508      	adds	r5, #8
   83458:	e7d2      	b.n	83400 <__sfvwrite_r+0x88>
   8345a:	f8d5 a000 	ldr.w	sl, [r5]
   8345e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83462:	3508      	adds	r5, #8
   83464:	e7a0      	b.n	833a8 <__sfvwrite_r+0x30>
   83466:	4648      	mov	r0, r9
   83468:	4621      	mov	r1, r4
   8346a:	f7ff fd59 	bl	82f20 <_fflush_r>
   8346e:	2800      	cmp	r0, #0
   83470:	d059      	beq.n	83526 <__sfvwrite_r+0x1ae>
   83472:	89a3      	ldrh	r3, [r4, #12]
   83474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83478:	f04f 30ff 	mov.w	r0, #4294967295
   8347c:	81a3      	strh	r3, [r4, #12]
   8347e:	b003      	add	sp, #12
   83480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83484:	4692      	mov	sl, r2
   83486:	9201      	str	r2, [sp, #4]
   83488:	4693      	mov	fp, r2
   8348a:	4690      	mov	r8, r2
   8348c:	f1b8 0f00 	cmp.w	r8, #0
   83490:	d02b      	beq.n	834ea <__sfvwrite_r+0x172>
   83492:	9f01      	ldr	r7, [sp, #4]
   83494:	2f00      	cmp	r7, #0
   83496:	d064      	beq.n	83562 <__sfvwrite_r+0x1ea>
   83498:	6820      	ldr	r0, [r4, #0]
   8349a:	6921      	ldr	r1, [r4, #16]
   8349c:	45c2      	cmp	sl, r8
   8349e:	bf34      	ite	cc
   834a0:	4653      	movcc	r3, sl
   834a2:	4643      	movcs	r3, r8
   834a4:	4288      	cmp	r0, r1
   834a6:	461f      	mov	r7, r3
   834a8:	f8d4 c008 	ldr.w	ip, [r4, #8]
   834ac:	6962      	ldr	r2, [r4, #20]
   834ae:	d903      	bls.n	834b8 <__sfvwrite_r+0x140>
   834b0:	4494      	add	ip, r2
   834b2:	4563      	cmp	r3, ip
   834b4:	f300 80ae 	bgt.w	83614 <__sfvwrite_r+0x29c>
   834b8:	4293      	cmp	r3, r2
   834ba:	db36      	blt.n	8352a <__sfvwrite_r+0x1b2>
   834bc:	4613      	mov	r3, r2
   834be:	6a67      	ldr	r7, [r4, #36]	; 0x24
   834c0:	4648      	mov	r0, r9
   834c2:	69e1      	ldr	r1, [r4, #28]
   834c4:	465a      	mov	r2, fp
   834c6:	47b8      	blx	r7
   834c8:	1e07      	subs	r7, r0, #0
   834ca:	ddd2      	ble.n	83472 <__sfvwrite_r+0xfa>
   834cc:	ebba 0a07 	subs.w	sl, sl, r7
   834d0:	d03a      	beq.n	83548 <__sfvwrite_r+0x1d0>
   834d2:	68b3      	ldr	r3, [r6, #8]
   834d4:	44bb      	add	fp, r7
   834d6:	1bdb      	subs	r3, r3, r7
   834d8:	ebc7 0808 	rsb	r8, r7, r8
   834dc:	60b3      	str	r3, [r6, #8]
   834de:	2b00      	cmp	r3, #0
   834e0:	f43f af78 	beq.w	833d4 <__sfvwrite_r+0x5c>
   834e4:	f1b8 0f00 	cmp.w	r8, #0
   834e8:	d1d3      	bne.n	83492 <__sfvwrite_r+0x11a>
   834ea:	2700      	movs	r7, #0
   834ec:	f8d5 b000 	ldr.w	fp, [r5]
   834f0:	f8d5 8004 	ldr.w	r8, [r5, #4]
   834f4:	9701      	str	r7, [sp, #4]
   834f6:	3508      	adds	r5, #8
   834f8:	e7c8      	b.n	8348c <__sfvwrite_r+0x114>
   834fa:	6820      	ldr	r0, [r4, #0]
   834fc:	6923      	ldr	r3, [r4, #16]
   834fe:	4298      	cmp	r0, r3
   83500:	d802      	bhi.n	83508 <__sfvwrite_r+0x190>
   83502:	6963      	ldr	r3, [r4, #20]
   83504:	4598      	cmp	r8, r3
   83506:	d272      	bcs.n	835ee <__sfvwrite_r+0x276>
   83508:	45b8      	cmp	r8, r7
   8350a:	bf38      	it	cc
   8350c:	4647      	movcc	r7, r8
   8350e:	463a      	mov	r2, r7
   83510:	4651      	mov	r1, sl
   83512:	f000 fcbf 	bl	83e94 <memmove>
   83516:	68a3      	ldr	r3, [r4, #8]
   83518:	6822      	ldr	r2, [r4, #0]
   8351a:	1bdb      	subs	r3, r3, r7
   8351c:	443a      	add	r2, r7
   8351e:	60a3      	str	r3, [r4, #8]
   83520:	6022      	str	r2, [r4, #0]
   83522:	2b00      	cmp	r3, #0
   83524:	d09f      	beq.n	83466 <__sfvwrite_r+0xee>
   83526:	463a      	mov	r2, r7
   83528:	e785      	b.n	83436 <__sfvwrite_r+0xbe>
   8352a:	461a      	mov	r2, r3
   8352c:	4659      	mov	r1, fp
   8352e:	9300      	str	r3, [sp, #0]
   83530:	f000 fcb0 	bl	83e94 <memmove>
   83534:	9b00      	ldr	r3, [sp, #0]
   83536:	68a1      	ldr	r1, [r4, #8]
   83538:	6822      	ldr	r2, [r4, #0]
   8353a:	1ac9      	subs	r1, r1, r3
   8353c:	ebba 0a07 	subs.w	sl, sl, r7
   83540:	4413      	add	r3, r2
   83542:	60a1      	str	r1, [r4, #8]
   83544:	6023      	str	r3, [r4, #0]
   83546:	d1c4      	bne.n	834d2 <__sfvwrite_r+0x15a>
   83548:	4648      	mov	r0, r9
   8354a:	4621      	mov	r1, r4
   8354c:	f7ff fce8 	bl	82f20 <_fflush_r>
   83550:	2800      	cmp	r0, #0
   83552:	d18e      	bne.n	83472 <__sfvwrite_r+0xfa>
   83554:	f8cd a004 	str.w	sl, [sp, #4]
   83558:	e7bb      	b.n	834d2 <__sfvwrite_r+0x15a>
   8355a:	6820      	ldr	r0, [r4, #0]
   8355c:	4647      	mov	r7, r8
   8355e:	46c3      	mov	fp, r8
   83560:	e75d      	b.n	8341e <__sfvwrite_r+0xa6>
   83562:	4658      	mov	r0, fp
   83564:	210a      	movs	r1, #10
   83566:	4642      	mov	r2, r8
   83568:	f000 fbd4 	bl	83d14 <memchr>
   8356c:	2800      	cmp	r0, #0
   8356e:	d07f      	beq.n	83670 <__sfvwrite_r+0x2f8>
   83570:	f100 0a01 	add.w	sl, r0, #1
   83574:	2701      	movs	r7, #1
   83576:	ebcb 0a0a 	rsb	sl, fp, sl
   8357a:	9701      	str	r7, [sp, #4]
   8357c:	e78c      	b.n	83498 <__sfvwrite_r+0x120>
   8357e:	6822      	ldr	r2, [r4, #0]
   83580:	6921      	ldr	r1, [r4, #16]
   83582:	6967      	ldr	r7, [r4, #20]
   83584:	ebc1 0c02 	rsb	ip, r1, r2
   83588:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8358c:	f10c 0201 	add.w	r2, ip, #1
   83590:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   83594:	4442      	add	r2, r8
   83596:	107f      	asrs	r7, r7, #1
   83598:	4297      	cmp	r7, r2
   8359a:	bf34      	ite	cc
   8359c:	4617      	movcc	r7, r2
   8359e:	463a      	movcs	r2, r7
   835a0:	055b      	lsls	r3, r3, #21
   835a2:	d54f      	bpl.n	83644 <__sfvwrite_r+0x2cc>
   835a4:	4611      	mov	r1, r2
   835a6:	4648      	mov	r0, r9
   835a8:	f8cd c000 	str.w	ip, [sp]
   835ac:	f000 f916 	bl	837dc <_malloc_r>
   835b0:	f8dd c000 	ldr.w	ip, [sp]
   835b4:	4683      	mov	fp, r0
   835b6:	2800      	cmp	r0, #0
   835b8:	d062      	beq.n	83680 <__sfvwrite_r+0x308>
   835ba:	4662      	mov	r2, ip
   835bc:	6921      	ldr	r1, [r4, #16]
   835be:	f8cd c000 	str.w	ip, [sp]
   835c2:	f000 fbf1 	bl	83da8 <memcpy>
   835c6:	89a2      	ldrh	r2, [r4, #12]
   835c8:	f8dd c000 	ldr.w	ip, [sp]
   835cc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   835d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   835d4:	81a2      	strh	r2, [r4, #12]
   835d6:	eb0b 000c 	add.w	r0, fp, ip
   835da:	ebcc 0207 	rsb	r2, ip, r7
   835de:	f8c4 b010 	str.w	fp, [r4, #16]
   835e2:	6167      	str	r7, [r4, #20]
   835e4:	6020      	str	r0, [r4, #0]
   835e6:	60a2      	str	r2, [r4, #8]
   835e8:	4647      	mov	r7, r8
   835ea:	46c3      	mov	fp, r8
   835ec:	e717      	b.n	8341e <__sfvwrite_r+0xa6>
   835ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   835f2:	4590      	cmp	r8, r2
   835f4:	bf38      	it	cc
   835f6:	4642      	movcc	r2, r8
   835f8:	fb92 f2f3 	sdiv	r2, r2, r3
   835fc:	fb02 f303 	mul.w	r3, r2, r3
   83600:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83602:	4648      	mov	r0, r9
   83604:	69e1      	ldr	r1, [r4, #28]
   83606:	4652      	mov	r2, sl
   83608:	47b8      	blx	r7
   8360a:	2800      	cmp	r0, #0
   8360c:	f77f af31 	ble.w	83472 <__sfvwrite_r+0xfa>
   83610:	4602      	mov	r2, r0
   83612:	e710      	b.n	83436 <__sfvwrite_r+0xbe>
   83614:	4662      	mov	r2, ip
   83616:	4659      	mov	r1, fp
   83618:	f8cd c000 	str.w	ip, [sp]
   8361c:	f000 fc3a 	bl	83e94 <memmove>
   83620:	f8dd c000 	ldr.w	ip, [sp]
   83624:	6823      	ldr	r3, [r4, #0]
   83626:	4648      	mov	r0, r9
   83628:	4463      	add	r3, ip
   8362a:	6023      	str	r3, [r4, #0]
   8362c:	4621      	mov	r1, r4
   8362e:	f8cd c000 	str.w	ip, [sp]
   83632:	f7ff fc75 	bl	82f20 <_fflush_r>
   83636:	f8dd c000 	ldr.w	ip, [sp]
   8363a:	2800      	cmp	r0, #0
   8363c:	f47f af19 	bne.w	83472 <__sfvwrite_r+0xfa>
   83640:	4667      	mov	r7, ip
   83642:	e743      	b.n	834cc <__sfvwrite_r+0x154>
   83644:	4648      	mov	r0, r9
   83646:	f8cd c000 	str.w	ip, [sp]
   8364a:	f000 fc8d 	bl	83f68 <_realloc_r>
   8364e:	f8dd c000 	ldr.w	ip, [sp]
   83652:	4683      	mov	fp, r0
   83654:	2800      	cmp	r0, #0
   83656:	d1be      	bne.n	835d6 <__sfvwrite_r+0x25e>
   83658:	4648      	mov	r0, r9
   8365a:	6921      	ldr	r1, [r4, #16]
   8365c:	f7ff fdc0 	bl	831e0 <_free_r>
   83660:	89a3      	ldrh	r3, [r4, #12]
   83662:	220c      	movs	r2, #12
   83664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83668:	b29b      	uxth	r3, r3
   8366a:	f8c9 2000 	str.w	r2, [r9]
   8366e:	e701      	b.n	83474 <__sfvwrite_r+0xfc>
   83670:	2701      	movs	r7, #1
   83672:	f108 0a01 	add.w	sl, r8, #1
   83676:	9701      	str	r7, [sp, #4]
   83678:	e70e      	b.n	83498 <__sfvwrite_r+0x120>
   8367a:	f04f 30ff 	mov.w	r0, #4294967295
   8367e:	e6aa      	b.n	833d6 <__sfvwrite_r+0x5e>
   83680:	230c      	movs	r3, #12
   83682:	f8c9 3000 	str.w	r3, [r9]
   83686:	89a3      	ldrh	r3, [r4, #12]
   83688:	e6f4      	b.n	83474 <__sfvwrite_r+0xfc>
   8368a:	bf00      	nop
   8368c:	7ffffc00 	.word	0x7ffffc00

00083690 <_fwalk>:
   83690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83694:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   83698:	4688      	mov	r8, r1
   8369a:	d019      	beq.n	836d0 <_fwalk+0x40>
   8369c:	2600      	movs	r6, #0
   8369e:	687d      	ldr	r5, [r7, #4]
   836a0:	68bc      	ldr	r4, [r7, #8]
   836a2:	3d01      	subs	r5, #1
   836a4:	d40e      	bmi.n	836c4 <_fwalk+0x34>
   836a6:	89a3      	ldrh	r3, [r4, #12]
   836a8:	3d01      	subs	r5, #1
   836aa:	2b01      	cmp	r3, #1
   836ac:	d906      	bls.n	836bc <_fwalk+0x2c>
   836ae:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   836b2:	4620      	mov	r0, r4
   836b4:	3301      	adds	r3, #1
   836b6:	d001      	beq.n	836bc <_fwalk+0x2c>
   836b8:	47c0      	blx	r8
   836ba:	4306      	orrs	r6, r0
   836bc:	1c6b      	adds	r3, r5, #1
   836be:	f104 0468 	add.w	r4, r4, #104	; 0x68
   836c2:	d1f0      	bne.n	836a6 <_fwalk+0x16>
   836c4:	683f      	ldr	r7, [r7, #0]
   836c6:	2f00      	cmp	r7, #0
   836c8:	d1e9      	bne.n	8369e <_fwalk+0xe>
   836ca:	4630      	mov	r0, r6
   836cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   836d0:	463e      	mov	r6, r7
   836d2:	4630      	mov	r0, r6
   836d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000836d8 <__locale_charset>:
   836d8:	4800      	ldr	r0, [pc, #0]	; (836dc <__locale_charset+0x4>)
   836da:	4770      	bx	lr
   836dc:	2007056c 	.word	0x2007056c

000836e0 <__locale_mb_cur_max>:
   836e0:	4b01      	ldr	r3, [pc, #4]	; (836e8 <__locale_mb_cur_max+0x8>)
   836e2:	6818      	ldr	r0, [r3, #0]
   836e4:	4770      	bx	lr
   836e6:	bf00      	nop
   836e8:	2007058c 	.word	0x2007058c

000836ec <__smakebuf_r>:
   836ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   836ee:	898b      	ldrh	r3, [r1, #12]
   836f0:	b091      	sub	sp, #68	; 0x44
   836f2:	b29a      	uxth	r2, r3
   836f4:	0796      	lsls	r6, r2, #30
   836f6:	460c      	mov	r4, r1
   836f8:	4605      	mov	r5, r0
   836fa:	d437      	bmi.n	8376c <__smakebuf_r+0x80>
   836fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83700:	2900      	cmp	r1, #0
   83702:	db17      	blt.n	83734 <__smakebuf_r+0x48>
   83704:	aa01      	add	r2, sp, #4
   83706:	f000 ff8b 	bl	84620 <_fstat_r>
   8370a:	2800      	cmp	r0, #0
   8370c:	db10      	blt.n	83730 <__smakebuf_r+0x44>
   8370e:	9b02      	ldr	r3, [sp, #8]
   83710:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   83714:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   83718:	424f      	negs	r7, r1
   8371a:	414f      	adcs	r7, r1
   8371c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   83720:	d02c      	beq.n	8377c <__smakebuf_r+0x90>
   83722:	89a3      	ldrh	r3, [r4, #12]
   83724:	f44f 6680 	mov.w	r6, #1024	; 0x400
   83728:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8372c:	81a3      	strh	r3, [r4, #12]
   8372e:	e00b      	b.n	83748 <__smakebuf_r+0x5c>
   83730:	89a3      	ldrh	r3, [r4, #12]
   83732:	b29a      	uxth	r2, r3
   83734:	f012 0f80 	tst.w	r2, #128	; 0x80
   83738:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8373c:	81a3      	strh	r3, [r4, #12]
   8373e:	bf14      	ite	ne
   83740:	2640      	movne	r6, #64	; 0x40
   83742:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   83746:	2700      	movs	r7, #0
   83748:	4628      	mov	r0, r5
   8374a:	4631      	mov	r1, r6
   8374c:	f000 f846 	bl	837dc <_malloc_r>
   83750:	89a3      	ldrh	r3, [r4, #12]
   83752:	2800      	cmp	r0, #0
   83754:	d029      	beq.n	837aa <__smakebuf_r+0xbe>
   83756:	4a1b      	ldr	r2, [pc, #108]	; (837c4 <__smakebuf_r+0xd8>)
   83758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8375c:	63ea      	str	r2, [r5, #60]	; 0x3c
   8375e:	81a3      	strh	r3, [r4, #12]
   83760:	6020      	str	r0, [r4, #0]
   83762:	6120      	str	r0, [r4, #16]
   83764:	6166      	str	r6, [r4, #20]
   83766:	b9a7      	cbnz	r7, 83792 <__smakebuf_r+0xa6>
   83768:	b011      	add	sp, #68	; 0x44
   8376a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8376c:	f101 0343 	add.w	r3, r1, #67	; 0x43
   83770:	2201      	movs	r2, #1
   83772:	600b      	str	r3, [r1, #0]
   83774:	610b      	str	r3, [r1, #16]
   83776:	614a      	str	r2, [r1, #20]
   83778:	b011      	add	sp, #68	; 0x44
   8377a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8377c:	4a12      	ldr	r2, [pc, #72]	; (837c8 <__smakebuf_r+0xdc>)
   8377e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   83780:	4293      	cmp	r3, r2
   83782:	d1ce      	bne.n	83722 <__smakebuf_r+0x36>
   83784:	89a3      	ldrh	r3, [r4, #12]
   83786:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8378a:	4333      	orrs	r3, r6
   8378c:	81a3      	strh	r3, [r4, #12]
   8378e:	64e6      	str	r6, [r4, #76]	; 0x4c
   83790:	e7da      	b.n	83748 <__smakebuf_r+0x5c>
   83792:	4628      	mov	r0, r5
   83794:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83798:	f000 ff56 	bl	84648 <_isatty_r>
   8379c:	2800      	cmp	r0, #0
   8379e:	d0e3      	beq.n	83768 <__smakebuf_r+0x7c>
   837a0:	89a3      	ldrh	r3, [r4, #12]
   837a2:	f043 0301 	orr.w	r3, r3, #1
   837a6:	81a3      	strh	r3, [r4, #12]
   837a8:	e7de      	b.n	83768 <__smakebuf_r+0x7c>
   837aa:	059a      	lsls	r2, r3, #22
   837ac:	d4dc      	bmi.n	83768 <__smakebuf_r+0x7c>
   837ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
   837b2:	f043 0302 	orr.w	r3, r3, #2
   837b6:	2101      	movs	r1, #1
   837b8:	81a3      	strh	r3, [r4, #12]
   837ba:	6022      	str	r2, [r4, #0]
   837bc:	6122      	str	r2, [r4, #16]
   837be:	6161      	str	r1, [r4, #20]
   837c0:	e7d2      	b.n	83768 <__smakebuf_r+0x7c>
   837c2:	bf00      	nop
   837c4:	00082f4d 	.word	0x00082f4d
   837c8:	000843a9 	.word	0x000843a9

000837cc <malloc>:
   837cc:	4b02      	ldr	r3, [pc, #8]	; (837d8 <malloc+0xc>)
   837ce:	4601      	mov	r1, r0
   837d0:	6818      	ldr	r0, [r3, #0]
   837d2:	f000 b803 	b.w	837dc <_malloc_r>
   837d6:	bf00      	nop
   837d8:	20070568 	.word	0x20070568

000837dc <_malloc_r>:
   837dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   837e0:	f101 050b 	add.w	r5, r1, #11
   837e4:	2d16      	cmp	r5, #22
   837e6:	b083      	sub	sp, #12
   837e8:	4606      	mov	r6, r0
   837ea:	d927      	bls.n	8383c <_malloc_r+0x60>
   837ec:	f035 0507 	bics.w	r5, r5, #7
   837f0:	d427      	bmi.n	83842 <_malloc_r+0x66>
   837f2:	42a9      	cmp	r1, r5
   837f4:	d825      	bhi.n	83842 <_malloc_r+0x66>
   837f6:	4630      	mov	r0, r6
   837f8:	f000 fbb2 	bl	83f60 <__malloc_lock>
   837fc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   83800:	d226      	bcs.n	83850 <_malloc_r+0x74>
   83802:	4fc1      	ldr	r7, [pc, #772]	; (83b08 <_malloc_r+0x32c>)
   83804:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   83808:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   8380c:	68dc      	ldr	r4, [r3, #12]
   8380e:	429c      	cmp	r4, r3
   83810:	f000 81d2 	beq.w	83bb8 <_malloc_r+0x3dc>
   83814:	6863      	ldr	r3, [r4, #4]
   83816:	68e2      	ldr	r2, [r4, #12]
   83818:	f023 0303 	bic.w	r3, r3, #3
   8381c:	4423      	add	r3, r4
   8381e:	6858      	ldr	r0, [r3, #4]
   83820:	68a1      	ldr	r1, [r4, #8]
   83822:	f040 0501 	orr.w	r5, r0, #1
   83826:	60ca      	str	r2, [r1, #12]
   83828:	4630      	mov	r0, r6
   8382a:	6091      	str	r1, [r2, #8]
   8382c:	605d      	str	r5, [r3, #4]
   8382e:	f000 fb99 	bl	83f64 <__malloc_unlock>
   83832:	3408      	adds	r4, #8
   83834:	4620      	mov	r0, r4
   83836:	b003      	add	sp, #12
   83838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8383c:	2510      	movs	r5, #16
   8383e:	42a9      	cmp	r1, r5
   83840:	d9d9      	bls.n	837f6 <_malloc_r+0x1a>
   83842:	2400      	movs	r4, #0
   83844:	230c      	movs	r3, #12
   83846:	4620      	mov	r0, r4
   83848:	6033      	str	r3, [r6, #0]
   8384a:	b003      	add	sp, #12
   8384c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83850:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   83854:	f000 8089 	beq.w	8396a <_malloc_r+0x18e>
   83858:	f1bc 0f04 	cmp.w	ip, #4
   8385c:	f200 8160 	bhi.w	83b20 <_malloc_r+0x344>
   83860:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   83864:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   83868:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8386c:	4fa6      	ldr	r7, [pc, #664]	; (83b08 <_malloc_r+0x32c>)
   8386e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   83872:	68cc      	ldr	r4, [r1, #12]
   83874:	42a1      	cmp	r1, r4
   83876:	d105      	bne.n	83884 <_malloc_r+0xa8>
   83878:	e00c      	b.n	83894 <_malloc_r+0xb8>
   8387a:	2b00      	cmp	r3, #0
   8387c:	da79      	bge.n	83972 <_malloc_r+0x196>
   8387e:	68e4      	ldr	r4, [r4, #12]
   83880:	42a1      	cmp	r1, r4
   83882:	d007      	beq.n	83894 <_malloc_r+0xb8>
   83884:	6862      	ldr	r2, [r4, #4]
   83886:	f022 0203 	bic.w	r2, r2, #3
   8388a:	1b53      	subs	r3, r2, r5
   8388c:	2b0f      	cmp	r3, #15
   8388e:	ddf4      	ble.n	8387a <_malloc_r+0x9e>
   83890:	f10c 3cff 	add.w	ip, ip, #4294967295
   83894:	f10c 0c01 	add.w	ip, ip, #1
   83898:	4b9b      	ldr	r3, [pc, #620]	; (83b08 <_malloc_r+0x32c>)
   8389a:	693c      	ldr	r4, [r7, #16]
   8389c:	f103 0e08 	add.w	lr, r3, #8
   838a0:	4574      	cmp	r4, lr
   838a2:	f000 817e 	beq.w	83ba2 <_malloc_r+0x3c6>
   838a6:	6861      	ldr	r1, [r4, #4]
   838a8:	f021 0103 	bic.w	r1, r1, #3
   838ac:	1b4a      	subs	r2, r1, r5
   838ae:	2a0f      	cmp	r2, #15
   838b0:	f300 8164 	bgt.w	83b7c <_malloc_r+0x3a0>
   838b4:	2a00      	cmp	r2, #0
   838b6:	f8c3 e014 	str.w	lr, [r3, #20]
   838ba:	f8c3 e010 	str.w	lr, [r3, #16]
   838be:	da69      	bge.n	83994 <_malloc_r+0x1b8>
   838c0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   838c4:	f080 813a 	bcs.w	83b3c <_malloc_r+0x360>
   838c8:	08c9      	lsrs	r1, r1, #3
   838ca:	108a      	asrs	r2, r1, #2
   838cc:	f04f 0801 	mov.w	r8, #1
   838d0:	fa08 f802 	lsl.w	r8, r8, r2
   838d4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   838d8:	685a      	ldr	r2, [r3, #4]
   838da:	6888      	ldr	r0, [r1, #8]
   838dc:	ea48 0202 	orr.w	r2, r8, r2
   838e0:	60a0      	str	r0, [r4, #8]
   838e2:	60e1      	str	r1, [r4, #12]
   838e4:	605a      	str	r2, [r3, #4]
   838e6:	608c      	str	r4, [r1, #8]
   838e8:	60c4      	str	r4, [r0, #12]
   838ea:	ea4f 03ac 	mov.w	r3, ip, asr #2
   838ee:	2001      	movs	r0, #1
   838f0:	4098      	lsls	r0, r3
   838f2:	4290      	cmp	r0, r2
   838f4:	d85b      	bhi.n	839ae <_malloc_r+0x1d2>
   838f6:	4202      	tst	r2, r0
   838f8:	d106      	bne.n	83908 <_malloc_r+0x12c>
   838fa:	f02c 0c03 	bic.w	ip, ip, #3
   838fe:	0040      	lsls	r0, r0, #1
   83900:	4202      	tst	r2, r0
   83902:	f10c 0c04 	add.w	ip, ip, #4
   83906:	d0fa      	beq.n	838fe <_malloc_r+0x122>
   83908:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   8390c:	4644      	mov	r4, r8
   8390e:	46e1      	mov	r9, ip
   83910:	68e3      	ldr	r3, [r4, #12]
   83912:	429c      	cmp	r4, r3
   83914:	d107      	bne.n	83926 <_malloc_r+0x14a>
   83916:	e146      	b.n	83ba6 <_malloc_r+0x3ca>
   83918:	2a00      	cmp	r2, #0
   8391a:	f280 8157 	bge.w	83bcc <_malloc_r+0x3f0>
   8391e:	68db      	ldr	r3, [r3, #12]
   83920:	429c      	cmp	r4, r3
   83922:	f000 8140 	beq.w	83ba6 <_malloc_r+0x3ca>
   83926:	6859      	ldr	r1, [r3, #4]
   83928:	f021 0103 	bic.w	r1, r1, #3
   8392c:	1b4a      	subs	r2, r1, r5
   8392e:	2a0f      	cmp	r2, #15
   83930:	ddf2      	ble.n	83918 <_malloc_r+0x13c>
   83932:	461c      	mov	r4, r3
   83934:	f854 cf08 	ldr.w	ip, [r4, #8]!
   83938:	68d9      	ldr	r1, [r3, #12]
   8393a:	f045 0901 	orr.w	r9, r5, #1
   8393e:	f042 0801 	orr.w	r8, r2, #1
   83942:	441d      	add	r5, r3
   83944:	f8c3 9004 	str.w	r9, [r3, #4]
   83948:	4630      	mov	r0, r6
   8394a:	f8cc 100c 	str.w	r1, [ip, #12]
   8394e:	f8c1 c008 	str.w	ip, [r1, #8]
   83952:	617d      	str	r5, [r7, #20]
   83954:	613d      	str	r5, [r7, #16]
   83956:	f8c5 e00c 	str.w	lr, [r5, #12]
   8395a:	f8c5 e008 	str.w	lr, [r5, #8]
   8395e:	f8c5 8004 	str.w	r8, [r5, #4]
   83962:	50aa      	str	r2, [r5, r2]
   83964:	f000 fafe 	bl	83f64 <__malloc_unlock>
   83968:	e764      	b.n	83834 <_malloc_r+0x58>
   8396a:	217e      	movs	r1, #126	; 0x7e
   8396c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   83970:	e77c      	b.n	8386c <_malloc_r+0x90>
   83972:	4422      	add	r2, r4
   83974:	6850      	ldr	r0, [r2, #4]
   83976:	68e3      	ldr	r3, [r4, #12]
   83978:	68a1      	ldr	r1, [r4, #8]
   8397a:	f040 0501 	orr.w	r5, r0, #1
   8397e:	60cb      	str	r3, [r1, #12]
   83980:	4630      	mov	r0, r6
   83982:	6099      	str	r1, [r3, #8]
   83984:	6055      	str	r5, [r2, #4]
   83986:	f000 faed 	bl	83f64 <__malloc_unlock>
   8398a:	3408      	adds	r4, #8
   8398c:	4620      	mov	r0, r4
   8398e:	b003      	add	sp, #12
   83990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83994:	4421      	add	r1, r4
   83996:	684b      	ldr	r3, [r1, #4]
   83998:	4630      	mov	r0, r6
   8399a:	f043 0301 	orr.w	r3, r3, #1
   8399e:	604b      	str	r3, [r1, #4]
   839a0:	f000 fae0 	bl	83f64 <__malloc_unlock>
   839a4:	3408      	adds	r4, #8
   839a6:	4620      	mov	r0, r4
   839a8:	b003      	add	sp, #12
   839aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   839ae:	68bc      	ldr	r4, [r7, #8]
   839b0:	6863      	ldr	r3, [r4, #4]
   839b2:	f023 0903 	bic.w	r9, r3, #3
   839b6:	45a9      	cmp	r9, r5
   839b8:	d304      	bcc.n	839c4 <_malloc_r+0x1e8>
   839ba:	ebc5 0309 	rsb	r3, r5, r9
   839be:	2b0f      	cmp	r3, #15
   839c0:	f300 8091 	bgt.w	83ae6 <_malloc_r+0x30a>
   839c4:	4b51      	ldr	r3, [pc, #324]	; (83b0c <_malloc_r+0x330>)
   839c6:	4a52      	ldr	r2, [pc, #328]	; (83b10 <_malloc_r+0x334>)
   839c8:	6819      	ldr	r1, [r3, #0]
   839ca:	6813      	ldr	r3, [r2, #0]
   839cc:	eb05 0a01 	add.w	sl, r5, r1
   839d0:	3301      	adds	r3, #1
   839d2:	eb04 0b09 	add.w	fp, r4, r9
   839d6:	f000 8161 	beq.w	83c9c <_malloc_r+0x4c0>
   839da:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   839de:	f10a 0a0f 	add.w	sl, sl, #15
   839e2:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   839e6:	f02a 0a0f 	bic.w	sl, sl, #15
   839ea:	4630      	mov	r0, r6
   839ec:	4651      	mov	r1, sl
   839ee:	9201      	str	r2, [sp, #4]
   839f0:	f000 fc9a 	bl	84328 <_sbrk_r>
   839f4:	f1b0 3fff 	cmp.w	r0, #4294967295
   839f8:	4680      	mov	r8, r0
   839fa:	9a01      	ldr	r2, [sp, #4]
   839fc:	f000 8101 	beq.w	83c02 <_malloc_r+0x426>
   83a00:	4583      	cmp	fp, r0
   83a02:	f200 80fb 	bhi.w	83bfc <_malloc_r+0x420>
   83a06:	f8df c114 	ldr.w	ip, [pc, #276]	; 83b1c <_malloc_r+0x340>
   83a0a:	45c3      	cmp	fp, r8
   83a0c:	f8dc 3000 	ldr.w	r3, [ip]
   83a10:	4453      	add	r3, sl
   83a12:	f8cc 3000 	str.w	r3, [ip]
   83a16:	f000 814a 	beq.w	83cae <_malloc_r+0x4d2>
   83a1a:	6812      	ldr	r2, [r2, #0]
   83a1c:	493c      	ldr	r1, [pc, #240]	; (83b10 <_malloc_r+0x334>)
   83a1e:	3201      	adds	r2, #1
   83a20:	bf1b      	ittet	ne
   83a22:	ebcb 0b08 	rsbne	fp, fp, r8
   83a26:	445b      	addne	r3, fp
   83a28:	f8c1 8000 	streq.w	r8, [r1]
   83a2c:	f8cc 3000 	strne.w	r3, [ip]
   83a30:	f018 0307 	ands.w	r3, r8, #7
   83a34:	f000 8114 	beq.w	83c60 <_malloc_r+0x484>
   83a38:	f1c3 0208 	rsb	r2, r3, #8
   83a3c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   83a40:	4490      	add	r8, r2
   83a42:	3308      	adds	r3, #8
   83a44:	44c2      	add	sl, r8
   83a46:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   83a4a:	ebca 0a03 	rsb	sl, sl, r3
   83a4e:	4651      	mov	r1, sl
   83a50:	4630      	mov	r0, r6
   83a52:	f8cd c004 	str.w	ip, [sp, #4]
   83a56:	f000 fc67 	bl	84328 <_sbrk_r>
   83a5a:	1c43      	adds	r3, r0, #1
   83a5c:	f8dd c004 	ldr.w	ip, [sp, #4]
   83a60:	f000 8135 	beq.w	83cce <_malloc_r+0x4f2>
   83a64:	ebc8 0200 	rsb	r2, r8, r0
   83a68:	4452      	add	r2, sl
   83a6a:	f042 0201 	orr.w	r2, r2, #1
   83a6e:	f8dc 3000 	ldr.w	r3, [ip]
   83a72:	42bc      	cmp	r4, r7
   83a74:	4453      	add	r3, sl
   83a76:	f8c7 8008 	str.w	r8, [r7, #8]
   83a7a:	f8cc 3000 	str.w	r3, [ip]
   83a7e:	f8c8 2004 	str.w	r2, [r8, #4]
   83a82:	f8df a098 	ldr.w	sl, [pc, #152]	; 83b1c <_malloc_r+0x340>
   83a86:	d015      	beq.n	83ab4 <_malloc_r+0x2d8>
   83a88:	f1b9 0f0f 	cmp.w	r9, #15
   83a8c:	f240 80eb 	bls.w	83c66 <_malloc_r+0x48a>
   83a90:	6861      	ldr	r1, [r4, #4]
   83a92:	f1a9 020c 	sub.w	r2, r9, #12
   83a96:	f022 0207 	bic.w	r2, r2, #7
   83a9a:	f001 0101 	and.w	r1, r1, #1
   83a9e:	ea42 0e01 	orr.w	lr, r2, r1
   83aa2:	2005      	movs	r0, #5
   83aa4:	18a1      	adds	r1, r4, r2
   83aa6:	2a0f      	cmp	r2, #15
   83aa8:	f8c4 e004 	str.w	lr, [r4, #4]
   83aac:	6048      	str	r0, [r1, #4]
   83aae:	6088      	str	r0, [r1, #8]
   83ab0:	f200 8111 	bhi.w	83cd6 <_malloc_r+0x4fa>
   83ab4:	4a17      	ldr	r2, [pc, #92]	; (83b14 <_malloc_r+0x338>)
   83ab6:	68bc      	ldr	r4, [r7, #8]
   83ab8:	6811      	ldr	r1, [r2, #0]
   83aba:	428b      	cmp	r3, r1
   83abc:	bf88      	it	hi
   83abe:	6013      	strhi	r3, [r2, #0]
   83ac0:	4a15      	ldr	r2, [pc, #84]	; (83b18 <_malloc_r+0x33c>)
   83ac2:	6811      	ldr	r1, [r2, #0]
   83ac4:	428b      	cmp	r3, r1
   83ac6:	bf88      	it	hi
   83ac8:	6013      	strhi	r3, [r2, #0]
   83aca:	6862      	ldr	r2, [r4, #4]
   83acc:	f022 0203 	bic.w	r2, r2, #3
   83ad0:	4295      	cmp	r5, r2
   83ad2:	ebc5 0302 	rsb	r3, r5, r2
   83ad6:	d801      	bhi.n	83adc <_malloc_r+0x300>
   83ad8:	2b0f      	cmp	r3, #15
   83ada:	dc04      	bgt.n	83ae6 <_malloc_r+0x30a>
   83adc:	4630      	mov	r0, r6
   83ade:	f000 fa41 	bl	83f64 <__malloc_unlock>
   83ae2:	2400      	movs	r4, #0
   83ae4:	e6a6      	b.n	83834 <_malloc_r+0x58>
   83ae6:	f045 0201 	orr.w	r2, r5, #1
   83aea:	f043 0301 	orr.w	r3, r3, #1
   83aee:	4425      	add	r5, r4
   83af0:	6062      	str	r2, [r4, #4]
   83af2:	4630      	mov	r0, r6
   83af4:	60bd      	str	r5, [r7, #8]
   83af6:	606b      	str	r3, [r5, #4]
   83af8:	f000 fa34 	bl	83f64 <__malloc_unlock>
   83afc:	3408      	adds	r4, #8
   83afe:	4620      	mov	r0, r4
   83b00:	b003      	add	sp, #12
   83b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83b06:	bf00      	nop
   83b08:	20070590 	.word	0x20070590
   83b0c:	20070a4c 	.word	0x20070a4c
   83b10:	2007099c 	.word	0x2007099c
   83b14:	20070a48 	.word	0x20070a48
   83b18:	20070a44 	.word	0x20070a44
   83b1c:	20070a50 	.word	0x20070a50
   83b20:	f1bc 0f14 	cmp.w	ip, #20
   83b24:	d961      	bls.n	83bea <_malloc_r+0x40e>
   83b26:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   83b2a:	f200 808f 	bhi.w	83c4c <_malloc_r+0x470>
   83b2e:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   83b32:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   83b36:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83b3a:	e697      	b.n	8386c <_malloc_r+0x90>
   83b3c:	0a4b      	lsrs	r3, r1, #9
   83b3e:	2b04      	cmp	r3, #4
   83b40:	d958      	bls.n	83bf4 <_malloc_r+0x418>
   83b42:	2b14      	cmp	r3, #20
   83b44:	f200 80ad 	bhi.w	83ca2 <_malloc_r+0x4c6>
   83b48:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   83b4c:	0050      	lsls	r0, r2, #1
   83b4e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   83b52:	6883      	ldr	r3, [r0, #8]
   83b54:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 83d10 <_malloc_r+0x534>
   83b58:	4283      	cmp	r3, r0
   83b5a:	f000 808a 	beq.w	83c72 <_malloc_r+0x496>
   83b5e:	685a      	ldr	r2, [r3, #4]
   83b60:	f022 0203 	bic.w	r2, r2, #3
   83b64:	4291      	cmp	r1, r2
   83b66:	d202      	bcs.n	83b6e <_malloc_r+0x392>
   83b68:	689b      	ldr	r3, [r3, #8]
   83b6a:	4298      	cmp	r0, r3
   83b6c:	d1f7      	bne.n	83b5e <_malloc_r+0x382>
   83b6e:	68d9      	ldr	r1, [r3, #12]
   83b70:	687a      	ldr	r2, [r7, #4]
   83b72:	60e1      	str	r1, [r4, #12]
   83b74:	60a3      	str	r3, [r4, #8]
   83b76:	608c      	str	r4, [r1, #8]
   83b78:	60dc      	str	r4, [r3, #12]
   83b7a:	e6b6      	b.n	838ea <_malloc_r+0x10e>
   83b7c:	f045 0701 	orr.w	r7, r5, #1
   83b80:	f042 0101 	orr.w	r1, r2, #1
   83b84:	4425      	add	r5, r4
   83b86:	6067      	str	r7, [r4, #4]
   83b88:	4630      	mov	r0, r6
   83b8a:	615d      	str	r5, [r3, #20]
   83b8c:	611d      	str	r5, [r3, #16]
   83b8e:	f8c5 e00c 	str.w	lr, [r5, #12]
   83b92:	f8c5 e008 	str.w	lr, [r5, #8]
   83b96:	6069      	str	r1, [r5, #4]
   83b98:	50aa      	str	r2, [r5, r2]
   83b9a:	3408      	adds	r4, #8
   83b9c:	f000 f9e2 	bl	83f64 <__malloc_unlock>
   83ba0:	e648      	b.n	83834 <_malloc_r+0x58>
   83ba2:	685a      	ldr	r2, [r3, #4]
   83ba4:	e6a1      	b.n	838ea <_malloc_r+0x10e>
   83ba6:	f109 0901 	add.w	r9, r9, #1
   83baa:	f019 0f03 	tst.w	r9, #3
   83bae:	f104 0408 	add.w	r4, r4, #8
   83bb2:	f47f aead 	bne.w	83910 <_malloc_r+0x134>
   83bb6:	e02d      	b.n	83c14 <_malloc_r+0x438>
   83bb8:	f104 0308 	add.w	r3, r4, #8
   83bbc:	6964      	ldr	r4, [r4, #20]
   83bbe:	42a3      	cmp	r3, r4
   83bc0:	bf08      	it	eq
   83bc2:	f10c 0c02 	addeq.w	ip, ip, #2
   83bc6:	f43f ae67 	beq.w	83898 <_malloc_r+0xbc>
   83bca:	e623      	b.n	83814 <_malloc_r+0x38>
   83bcc:	4419      	add	r1, r3
   83bce:	6848      	ldr	r0, [r1, #4]
   83bd0:	461c      	mov	r4, r3
   83bd2:	f854 2f08 	ldr.w	r2, [r4, #8]!
   83bd6:	68db      	ldr	r3, [r3, #12]
   83bd8:	f040 0501 	orr.w	r5, r0, #1
   83bdc:	604d      	str	r5, [r1, #4]
   83bde:	4630      	mov	r0, r6
   83be0:	60d3      	str	r3, [r2, #12]
   83be2:	609a      	str	r2, [r3, #8]
   83be4:	f000 f9be 	bl	83f64 <__malloc_unlock>
   83be8:	e624      	b.n	83834 <_malloc_r+0x58>
   83bea:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   83bee:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83bf2:	e63b      	b.n	8386c <_malloc_r+0x90>
   83bf4:	098a      	lsrs	r2, r1, #6
   83bf6:	3238      	adds	r2, #56	; 0x38
   83bf8:	0050      	lsls	r0, r2, #1
   83bfa:	e7a8      	b.n	83b4e <_malloc_r+0x372>
   83bfc:	42bc      	cmp	r4, r7
   83bfe:	f43f af02 	beq.w	83a06 <_malloc_r+0x22a>
   83c02:	68bc      	ldr	r4, [r7, #8]
   83c04:	6862      	ldr	r2, [r4, #4]
   83c06:	f022 0203 	bic.w	r2, r2, #3
   83c0a:	e761      	b.n	83ad0 <_malloc_r+0x2f4>
   83c0c:	f8d8 8000 	ldr.w	r8, [r8]
   83c10:	4598      	cmp	r8, r3
   83c12:	d17a      	bne.n	83d0a <_malloc_r+0x52e>
   83c14:	f01c 0f03 	tst.w	ip, #3
   83c18:	f1a8 0308 	sub.w	r3, r8, #8
   83c1c:	f10c 3cff 	add.w	ip, ip, #4294967295
   83c20:	d1f4      	bne.n	83c0c <_malloc_r+0x430>
   83c22:	687b      	ldr	r3, [r7, #4]
   83c24:	ea23 0300 	bic.w	r3, r3, r0
   83c28:	607b      	str	r3, [r7, #4]
   83c2a:	0040      	lsls	r0, r0, #1
   83c2c:	4298      	cmp	r0, r3
   83c2e:	f63f aebe 	bhi.w	839ae <_malloc_r+0x1d2>
   83c32:	2800      	cmp	r0, #0
   83c34:	f43f aebb 	beq.w	839ae <_malloc_r+0x1d2>
   83c38:	4203      	tst	r3, r0
   83c3a:	46cc      	mov	ip, r9
   83c3c:	f47f ae64 	bne.w	83908 <_malloc_r+0x12c>
   83c40:	0040      	lsls	r0, r0, #1
   83c42:	4203      	tst	r3, r0
   83c44:	f10c 0c04 	add.w	ip, ip, #4
   83c48:	d0fa      	beq.n	83c40 <_malloc_r+0x464>
   83c4a:	e65d      	b.n	83908 <_malloc_r+0x12c>
   83c4c:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   83c50:	d819      	bhi.n	83c86 <_malloc_r+0x4aa>
   83c52:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   83c56:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   83c5a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83c5e:	e605      	b.n	8386c <_malloc_r+0x90>
   83c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   83c64:	e6ee      	b.n	83a44 <_malloc_r+0x268>
   83c66:	2301      	movs	r3, #1
   83c68:	f8c8 3004 	str.w	r3, [r8, #4]
   83c6c:	4644      	mov	r4, r8
   83c6e:	2200      	movs	r2, #0
   83c70:	e72e      	b.n	83ad0 <_malloc_r+0x2f4>
   83c72:	1092      	asrs	r2, r2, #2
   83c74:	2001      	movs	r0, #1
   83c76:	4090      	lsls	r0, r2
   83c78:	f8d8 2004 	ldr.w	r2, [r8, #4]
   83c7c:	4619      	mov	r1, r3
   83c7e:	4302      	orrs	r2, r0
   83c80:	f8c8 2004 	str.w	r2, [r8, #4]
   83c84:	e775      	b.n	83b72 <_malloc_r+0x396>
   83c86:	f240 5354 	movw	r3, #1364	; 0x554
   83c8a:	459c      	cmp	ip, r3
   83c8c:	d81b      	bhi.n	83cc6 <_malloc_r+0x4ea>
   83c8e:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   83c92:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   83c96:	ea4f 014c 	mov.w	r1, ip, lsl #1
   83c9a:	e5e7      	b.n	8386c <_malloc_r+0x90>
   83c9c:	f10a 0a10 	add.w	sl, sl, #16
   83ca0:	e6a3      	b.n	839ea <_malloc_r+0x20e>
   83ca2:	2b54      	cmp	r3, #84	; 0x54
   83ca4:	d81f      	bhi.n	83ce6 <_malloc_r+0x50a>
   83ca6:	0b0a      	lsrs	r2, r1, #12
   83ca8:	326e      	adds	r2, #110	; 0x6e
   83caa:	0050      	lsls	r0, r2, #1
   83cac:	e74f      	b.n	83b4e <_malloc_r+0x372>
   83cae:	f3cb 010b 	ubfx	r1, fp, #0, #12
   83cb2:	2900      	cmp	r1, #0
   83cb4:	f47f aeb1 	bne.w	83a1a <_malloc_r+0x23e>
   83cb8:	eb0a 0109 	add.w	r1, sl, r9
   83cbc:	68ba      	ldr	r2, [r7, #8]
   83cbe:	f041 0101 	orr.w	r1, r1, #1
   83cc2:	6051      	str	r1, [r2, #4]
   83cc4:	e6f6      	b.n	83ab4 <_malloc_r+0x2d8>
   83cc6:	21fc      	movs	r1, #252	; 0xfc
   83cc8:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   83ccc:	e5ce      	b.n	8386c <_malloc_r+0x90>
   83cce:	2201      	movs	r2, #1
   83cd0:	f04f 0a00 	mov.w	sl, #0
   83cd4:	e6cb      	b.n	83a6e <_malloc_r+0x292>
   83cd6:	f104 0108 	add.w	r1, r4, #8
   83cda:	4630      	mov	r0, r6
   83cdc:	f7ff fa80 	bl	831e0 <_free_r>
   83ce0:	f8da 3000 	ldr.w	r3, [sl]
   83ce4:	e6e6      	b.n	83ab4 <_malloc_r+0x2d8>
   83ce6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   83cea:	d803      	bhi.n	83cf4 <_malloc_r+0x518>
   83cec:	0bca      	lsrs	r2, r1, #15
   83cee:	3277      	adds	r2, #119	; 0x77
   83cf0:	0050      	lsls	r0, r2, #1
   83cf2:	e72c      	b.n	83b4e <_malloc_r+0x372>
   83cf4:	f240 5254 	movw	r2, #1364	; 0x554
   83cf8:	4293      	cmp	r3, r2
   83cfa:	d803      	bhi.n	83d04 <_malloc_r+0x528>
   83cfc:	0c8a      	lsrs	r2, r1, #18
   83cfe:	327c      	adds	r2, #124	; 0x7c
   83d00:	0050      	lsls	r0, r2, #1
   83d02:	e724      	b.n	83b4e <_malloc_r+0x372>
   83d04:	20fc      	movs	r0, #252	; 0xfc
   83d06:	227e      	movs	r2, #126	; 0x7e
   83d08:	e721      	b.n	83b4e <_malloc_r+0x372>
   83d0a:	687b      	ldr	r3, [r7, #4]
   83d0c:	e78d      	b.n	83c2a <_malloc_r+0x44e>
   83d0e:	bf00      	nop
   83d10:	20070590 	.word	0x20070590

00083d14 <memchr>:
   83d14:	0783      	lsls	r3, r0, #30
   83d16:	b470      	push	{r4, r5, r6}
   83d18:	b2c9      	uxtb	r1, r1
   83d1a:	d040      	beq.n	83d9e <memchr+0x8a>
   83d1c:	1e54      	subs	r4, r2, #1
   83d1e:	b32a      	cbz	r2, 83d6c <memchr+0x58>
   83d20:	7803      	ldrb	r3, [r0, #0]
   83d22:	428b      	cmp	r3, r1
   83d24:	d023      	beq.n	83d6e <memchr+0x5a>
   83d26:	1c43      	adds	r3, r0, #1
   83d28:	e004      	b.n	83d34 <memchr+0x20>
   83d2a:	b1fc      	cbz	r4, 83d6c <memchr+0x58>
   83d2c:	7805      	ldrb	r5, [r0, #0]
   83d2e:	4614      	mov	r4, r2
   83d30:	428d      	cmp	r5, r1
   83d32:	d01c      	beq.n	83d6e <memchr+0x5a>
   83d34:	f013 0f03 	tst.w	r3, #3
   83d38:	4618      	mov	r0, r3
   83d3a:	f104 32ff 	add.w	r2, r4, #4294967295
   83d3e:	f103 0301 	add.w	r3, r3, #1
   83d42:	d1f2      	bne.n	83d2a <memchr+0x16>
   83d44:	2c03      	cmp	r4, #3
   83d46:	d814      	bhi.n	83d72 <memchr+0x5e>
   83d48:	1e65      	subs	r5, r4, #1
   83d4a:	b354      	cbz	r4, 83da2 <memchr+0x8e>
   83d4c:	7803      	ldrb	r3, [r0, #0]
   83d4e:	428b      	cmp	r3, r1
   83d50:	d00d      	beq.n	83d6e <memchr+0x5a>
   83d52:	1c42      	adds	r2, r0, #1
   83d54:	2300      	movs	r3, #0
   83d56:	e002      	b.n	83d5e <memchr+0x4a>
   83d58:	7804      	ldrb	r4, [r0, #0]
   83d5a:	428c      	cmp	r4, r1
   83d5c:	d007      	beq.n	83d6e <memchr+0x5a>
   83d5e:	42ab      	cmp	r3, r5
   83d60:	4610      	mov	r0, r2
   83d62:	f103 0301 	add.w	r3, r3, #1
   83d66:	f102 0201 	add.w	r2, r2, #1
   83d6a:	d1f5      	bne.n	83d58 <memchr+0x44>
   83d6c:	2000      	movs	r0, #0
   83d6e:	bc70      	pop	{r4, r5, r6}
   83d70:	4770      	bx	lr
   83d72:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   83d76:	4603      	mov	r3, r0
   83d78:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   83d7c:	681a      	ldr	r2, [r3, #0]
   83d7e:	4618      	mov	r0, r3
   83d80:	4072      	eors	r2, r6
   83d82:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   83d86:	ea25 0202 	bic.w	r2, r5, r2
   83d8a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   83d8e:	f103 0304 	add.w	r3, r3, #4
   83d92:	d1d9      	bne.n	83d48 <memchr+0x34>
   83d94:	3c04      	subs	r4, #4
   83d96:	2c03      	cmp	r4, #3
   83d98:	4618      	mov	r0, r3
   83d9a:	d8ef      	bhi.n	83d7c <memchr+0x68>
   83d9c:	e7d4      	b.n	83d48 <memchr+0x34>
   83d9e:	4614      	mov	r4, r2
   83da0:	e7d0      	b.n	83d44 <memchr+0x30>
   83da2:	4620      	mov	r0, r4
   83da4:	e7e3      	b.n	83d6e <memchr+0x5a>
   83da6:	bf00      	nop

00083da8 <memcpy>:
   83da8:	4684      	mov	ip, r0
   83daa:	ea41 0300 	orr.w	r3, r1, r0
   83dae:	f013 0303 	ands.w	r3, r3, #3
   83db2:	d149      	bne.n	83e48 <memcpy+0xa0>
   83db4:	3a40      	subs	r2, #64	; 0x40
   83db6:	d323      	bcc.n	83e00 <memcpy+0x58>
   83db8:	680b      	ldr	r3, [r1, #0]
   83dba:	6003      	str	r3, [r0, #0]
   83dbc:	684b      	ldr	r3, [r1, #4]
   83dbe:	6043      	str	r3, [r0, #4]
   83dc0:	688b      	ldr	r3, [r1, #8]
   83dc2:	6083      	str	r3, [r0, #8]
   83dc4:	68cb      	ldr	r3, [r1, #12]
   83dc6:	60c3      	str	r3, [r0, #12]
   83dc8:	690b      	ldr	r3, [r1, #16]
   83dca:	6103      	str	r3, [r0, #16]
   83dcc:	694b      	ldr	r3, [r1, #20]
   83dce:	6143      	str	r3, [r0, #20]
   83dd0:	698b      	ldr	r3, [r1, #24]
   83dd2:	6183      	str	r3, [r0, #24]
   83dd4:	69cb      	ldr	r3, [r1, #28]
   83dd6:	61c3      	str	r3, [r0, #28]
   83dd8:	6a0b      	ldr	r3, [r1, #32]
   83dda:	6203      	str	r3, [r0, #32]
   83ddc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83dde:	6243      	str	r3, [r0, #36]	; 0x24
   83de0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83de2:	6283      	str	r3, [r0, #40]	; 0x28
   83de4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83de6:	62c3      	str	r3, [r0, #44]	; 0x2c
   83de8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83dea:	6303      	str	r3, [r0, #48]	; 0x30
   83dec:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83dee:	6343      	str	r3, [r0, #52]	; 0x34
   83df0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83df2:	6383      	str	r3, [r0, #56]	; 0x38
   83df4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83df6:	63c3      	str	r3, [r0, #60]	; 0x3c
   83df8:	3040      	adds	r0, #64	; 0x40
   83dfa:	3140      	adds	r1, #64	; 0x40
   83dfc:	3a40      	subs	r2, #64	; 0x40
   83dfe:	d2db      	bcs.n	83db8 <memcpy+0x10>
   83e00:	3230      	adds	r2, #48	; 0x30
   83e02:	d30b      	bcc.n	83e1c <memcpy+0x74>
   83e04:	680b      	ldr	r3, [r1, #0]
   83e06:	6003      	str	r3, [r0, #0]
   83e08:	684b      	ldr	r3, [r1, #4]
   83e0a:	6043      	str	r3, [r0, #4]
   83e0c:	688b      	ldr	r3, [r1, #8]
   83e0e:	6083      	str	r3, [r0, #8]
   83e10:	68cb      	ldr	r3, [r1, #12]
   83e12:	60c3      	str	r3, [r0, #12]
   83e14:	3010      	adds	r0, #16
   83e16:	3110      	adds	r1, #16
   83e18:	3a10      	subs	r2, #16
   83e1a:	d2f3      	bcs.n	83e04 <memcpy+0x5c>
   83e1c:	320c      	adds	r2, #12
   83e1e:	d305      	bcc.n	83e2c <memcpy+0x84>
   83e20:	f851 3b04 	ldr.w	r3, [r1], #4
   83e24:	f840 3b04 	str.w	r3, [r0], #4
   83e28:	3a04      	subs	r2, #4
   83e2a:	d2f9      	bcs.n	83e20 <memcpy+0x78>
   83e2c:	3204      	adds	r2, #4
   83e2e:	d008      	beq.n	83e42 <memcpy+0x9a>
   83e30:	07d2      	lsls	r2, r2, #31
   83e32:	bf1c      	itt	ne
   83e34:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83e38:	f800 3b01 	strbne.w	r3, [r0], #1
   83e3c:	d301      	bcc.n	83e42 <memcpy+0x9a>
   83e3e:	880b      	ldrh	r3, [r1, #0]
   83e40:	8003      	strh	r3, [r0, #0]
   83e42:	4660      	mov	r0, ip
   83e44:	4770      	bx	lr
   83e46:	bf00      	nop
   83e48:	2a08      	cmp	r2, #8
   83e4a:	d313      	bcc.n	83e74 <memcpy+0xcc>
   83e4c:	078b      	lsls	r3, r1, #30
   83e4e:	d0b1      	beq.n	83db4 <memcpy+0xc>
   83e50:	f010 0303 	ands.w	r3, r0, #3
   83e54:	d0ae      	beq.n	83db4 <memcpy+0xc>
   83e56:	f1c3 0304 	rsb	r3, r3, #4
   83e5a:	1ad2      	subs	r2, r2, r3
   83e5c:	07db      	lsls	r3, r3, #31
   83e5e:	bf1c      	itt	ne
   83e60:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83e64:	f800 3b01 	strbne.w	r3, [r0], #1
   83e68:	d3a4      	bcc.n	83db4 <memcpy+0xc>
   83e6a:	f831 3b02 	ldrh.w	r3, [r1], #2
   83e6e:	f820 3b02 	strh.w	r3, [r0], #2
   83e72:	e79f      	b.n	83db4 <memcpy+0xc>
   83e74:	3a04      	subs	r2, #4
   83e76:	d3d9      	bcc.n	83e2c <memcpy+0x84>
   83e78:	3a01      	subs	r2, #1
   83e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
   83e7e:	f800 3b01 	strb.w	r3, [r0], #1
   83e82:	d2f9      	bcs.n	83e78 <memcpy+0xd0>
   83e84:	780b      	ldrb	r3, [r1, #0]
   83e86:	7003      	strb	r3, [r0, #0]
   83e88:	784b      	ldrb	r3, [r1, #1]
   83e8a:	7043      	strb	r3, [r0, #1]
   83e8c:	788b      	ldrb	r3, [r1, #2]
   83e8e:	7083      	strb	r3, [r0, #2]
   83e90:	4660      	mov	r0, ip
   83e92:	4770      	bx	lr

00083e94 <memmove>:
   83e94:	4288      	cmp	r0, r1
   83e96:	b4f0      	push	{r4, r5, r6, r7}
   83e98:	d910      	bls.n	83ebc <memmove+0x28>
   83e9a:	188c      	adds	r4, r1, r2
   83e9c:	42a0      	cmp	r0, r4
   83e9e:	d20d      	bcs.n	83ebc <memmove+0x28>
   83ea0:	1885      	adds	r5, r0, r2
   83ea2:	1e53      	subs	r3, r2, #1
   83ea4:	b142      	cbz	r2, 83eb8 <memmove+0x24>
   83ea6:	4621      	mov	r1, r4
   83ea8:	462a      	mov	r2, r5
   83eaa:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   83eae:	3b01      	subs	r3, #1
   83eb0:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83eb4:	1c5c      	adds	r4, r3, #1
   83eb6:	d1f8      	bne.n	83eaa <memmove+0x16>
   83eb8:	bcf0      	pop	{r4, r5, r6, r7}
   83eba:	4770      	bx	lr
   83ebc:	2a0f      	cmp	r2, #15
   83ebe:	d944      	bls.n	83f4a <memmove+0xb6>
   83ec0:	ea40 0301 	orr.w	r3, r0, r1
   83ec4:	079b      	lsls	r3, r3, #30
   83ec6:	d144      	bne.n	83f52 <memmove+0xbe>
   83ec8:	f1a2 0710 	sub.w	r7, r2, #16
   83ecc:	093f      	lsrs	r7, r7, #4
   83ece:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   83ed2:	3610      	adds	r6, #16
   83ed4:	460c      	mov	r4, r1
   83ed6:	4603      	mov	r3, r0
   83ed8:	6825      	ldr	r5, [r4, #0]
   83eda:	3310      	adds	r3, #16
   83edc:	f843 5c10 	str.w	r5, [r3, #-16]
   83ee0:	6865      	ldr	r5, [r4, #4]
   83ee2:	3410      	adds	r4, #16
   83ee4:	f843 5c0c 	str.w	r5, [r3, #-12]
   83ee8:	f854 5c08 	ldr.w	r5, [r4, #-8]
   83eec:	f843 5c08 	str.w	r5, [r3, #-8]
   83ef0:	f854 5c04 	ldr.w	r5, [r4, #-4]
   83ef4:	f843 5c04 	str.w	r5, [r3, #-4]
   83ef8:	42b3      	cmp	r3, r6
   83efa:	d1ed      	bne.n	83ed8 <memmove+0x44>
   83efc:	1c7b      	adds	r3, r7, #1
   83efe:	f002 0c0f 	and.w	ip, r2, #15
   83f02:	011b      	lsls	r3, r3, #4
   83f04:	f1bc 0f03 	cmp.w	ip, #3
   83f08:	4419      	add	r1, r3
   83f0a:	4403      	add	r3, r0
   83f0c:	d923      	bls.n	83f56 <memmove+0xc2>
   83f0e:	460e      	mov	r6, r1
   83f10:	461d      	mov	r5, r3
   83f12:	4664      	mov	r4, ip
   83f14:	f856 7b04 	ldr.w	r7, [r6], #4
   83f18:	3c04      	subs	r4, #4
   83f1a:	2c03      	cmp	r4, #3
   83f1c:	f845 7b04 	str.w	r7, [r5], #4
   83f20:	d8f8      	bhi.n	83f14 <memmove+0x80>
   83f22:	f1ac 0404 	sub.w	r4, ip, #4
   83f26:	f024 0403 	bic.w	r4, r4, #3
   83f2a:	3404      	adds	r4, #4
   83f2c:	f002 0203 	and.w	r2, r2, #3
   83f30:	4423      	add	r3, r4
   83f32:	4421      	add	r1, r4
   83f34:	2a00      	cmp	r2, #0
   83f36:	d0bf      	beq.n	83eb8 <memmove+0x24>
   83f38:	441a      	add	r2, r3
   83f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
   83f3e:	f803 4b01 	strb.w	r4, [r3], #1
   83f42:	4293      	cmp	r3, r2
   83f44:	d1f9      	bne.n	83f3a <memmove+0xa6>
   83f46:	bcf0      	pop	{r4, r5, r6, r7}
   83f48:	4770      	bx	lr
   83f4a:	4603      	mov	r3, r0
   83f4c:	2a00      	cmp	r2, #0
   83f4e:	d1f3      	bne.n	83f38 <memmove+0xa4>
   83f50:	e7b2      	b.n	83eb8 <memmove+0x24>
   83f52:	4603      	mov	r3, r0
   83f54:	e7f0      	b.n	83f38 <memmove+0xa4>
   83f56:	4662      	mov	r2, ip
   83f58:	2a00      	cmp	r2, #0
   83f5a:	d1ed      	bne.n	83f38 <memmove+0xa4>
   83f5c:	e7ac      	b.n	83eb8 <memmove+0x24>
   83f5e:	bf00      	nop

00083f60 <__malloc_lock>:
   83f60:	4770      	bx	lr
   83f62:	bf00      	nop

00083f64 <__malloc_unlock>:
   83f64:	4770      	bx	lr
   83f66:	bf00      	nop

00083f68 <_realloc_r>:
   83f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83f6c:	460c      	mov	r4, r1
   83f6e:	b083      	sub	sp, #12
   83f70:	4690      	mov	r8, r2
   83f72:	4681      	mov	r9, r0
   83f74:	2900      	cmp	r1, #0
   83f76:	f000 80ba 	beq.w	840ee <_realloc_r+0x186>
   83f7a:	f7ff fff1 	bl	83f60 <__malloc_lock>
   83f7e:	f108 060b 	add.w	r6, r8, #11
   83f82:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83f86:	2e16      	cmp	r6, #22
   83f88:	f023 0503 	bic.w	r5, r3, #3
   83f8c:	f1a4 0708 	sub.w	r7, r4, #8
   83f90:	d84b      	bhi.n	8402a <_realloc_r+0xc2>
   83f92:	2110      	movs	r1, #16
   83f94:	460e      	mov	r6, r1
   83f96:	45b0      	cmp	r8, r6
   83f98:	d84c      	bhi.n	84034 <_realloc_r+0xcc>
   83f9a:	428d      	cmp	r5, r1
   83f9c:	da51      	bge.n	84042 <_realloc_r+0xda>
   83f9e:	f8df b384 	ldr.w	fp, [pc, #900]	; 84324 <_realloc_r+0x3bc>
   83fa2:	1978      	adds	r0, r7, r5
   83fa4:	f8db e008 	ldr.w	lr, [fp, #8]
   83fa8:	4586      	cmp	lr, r0
   83faa:	f000 80a6 	beq.w	840fa <_realloc_r+0x192>
   83fae:	6842      	ldr	r2, [r0, #4]
   83fb0:	f022 0c01 	bic.w	ip, r2, #1
   83fb4:	4484      	add	ip, r0
   83fb6:	f8dc c004 	ldr.w	ip, [ip, #4]
   83fba:	f01c 0f01 	tst.w	ip, #1
   83fbe:	d054      	beq.n	8406a <_realloc_r+0x102>
   83fc0:	2200      	movs	r2, #0
   83fc2:	4610      	mov	r0, r2
   83fc4:	07db      	lsls	r3, r3, #31
   83fc6:	d46f      	bmi.n	840a8 <_realloc_r+0x140>
   83fc8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83fcc:	ebc3 0a07 	rsb	sl, r3, r7
   83fd0:	f8da 3004 	ldr.w	r3, [sl, #4]
   83fd4:	f023 0303 	bic.w	r3, r3, #3
   83fd8:	442b      	add	r3, r5
   83fda:	2800      	cmp	r0, #0
   83fdc:	d062      	beq.n	840a4 <_realloc_r+0x13c>
   83fde:	4570      	cmp	r0, lr
   83fe0:	f000 80e9 	beq.w	841b6 <_realloc_r+0x24e>
   83fe4:	eb02 0e03 	add.w	lr, r2, r3
   83fe8:	458e      	cmp	lr, r1
   83fea:	db5b      	blt.n	840a4 <_realloc_r+0x13c>
   83fec:	68c3      	ldr	r3, [r0, #12]
   83fee:	6882      	ldr	r2, [r0, #8]
   83ff0:	46d0      	mov	r8, sl
   83ff2:	60d3      	str	r3, [r2, #12]
   83ff4:	609a      	str	r2, [r3, #8]
   83ff6:	f858 1f08 	ldr.w	r1, [r8, #8]!
   83ffa:	f8da 300c 	ldr.w	r3, [sl, #12]
   83ffe:	1f2a      	subs	r2, r5, #4
   84000:	2a24      	cmp	r2, #36	; 0x24
   84002:	60cb      	str	r3, [r1, #12]
   84004:	6099      	str	r1, [r3, #8]
   84006:	f200 8123 	bhi.w	84250 <_realloc_r+0x2e8>
   8400a:	2a13      	cmp	r2, #19
   8400c:	f240 80b0 	bls.w	84170 <_realloc_r+0x208>
   84010:	6823      	ldr	r3, [r4, #0]
   84012:	2a1b      	cmp	r2, #27
   84014:	f8ca 3008 	str.w	r3, [sl, #8]
   84018:	6863      	ldr	r3, [r4, #4]
   8401a:	f8ca 300c 	str.w	r3, [sl, #12]
   8401e:	f200 812b 	bhi.w	84278 <_realloc_r+0x310>
   84022:	3408      	adds	r4, #8
   84024:	f10a 0310 	add.w	r3, sl, #16
   84028:	e0a3      	b.n	84172 <_realloc_r+0x20a>
   8402a:	f026 0607 	bic.w	r6, r6, #7
   8402e:	2e00      	cmp	r6, #0
   84030:	4631      	mov	r1, r6
   84032:	dab0      	bge.n	83f96 <_realloc_r+0x2e>
   84034:	230c      	movs	r3, #12
   84036:	2000      	movs	r0, #0
   84038:	f8c9 3000 	str.w	r3, [r9]
   8403c:	b003      	add	sp, #12
   8403e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84042:	46a0      	mov	r8, r4
   84044:	1baa      	subs	r2, r5, r6
   84046:	2a0f      	cmp	r2, #15
   84048:	f003 0301 	and.w	r3, r3, #1
   8404c:	d81a      	bhi.n	84084 <_realloc_r+0x11c>
   8404e:	432b      	orrs	r3, r5
   84050:	607b      	str	r3, [r7, #4]
   84052:	443d      	add	r5, r7
   84054:	686b      	ldr	r3, [r5, #4]
   84056:	f043 0301 	orr.w	r3, r3, #1
   8405a:	606b      	str	r3, [r5, #4]
   8405c:	4648      	mov	r0, r9
   8405e:	f7ff ff81 	bl	83f64 <__malloc_unlock>
   84062:	4640      	mov	r0, r8
   84064:	b003      	add	sp, #12
   84066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8406a:	f022 0203 	bic.w	r2, r2, #3
   8406e:	eb02 0c05 	add.w	ip, r2, r5
   84072:	458c      	cmp	ip, r1
   84074:	dba6      	blt.n	83fc4 <_realloc_r+0x5c>
   84076:	68c2      	ldr	r2, [r0, #12]
   84078:	6881      	ldr	r1, [r0, #8]
   8407a:	46a0      	mov	r8, r4
   8407c:	60ca      	str	r2, [r1, #12]
   8407e:	4665      	mov	r5, ip
   84080:	6091      	str	r1, [r2, #8]
   84082:	e7df      	b.n	84044 <_realloc_r+0xdc>
   84084:	19b9      	adds	r1, r7, r6
   84086:	4333      	orrs	r3, r6
   84088:	f042 0001 	orr.w	r0, r2, #1
   8408c:	607b      	str	r3, [r7, #4]
   8408e:	440a      	add	r2, r1
   84090:	6048      	str	r0, [r1, #4]
   84092:	6853      	ldr	r3, [r2, #4]
   84094:	3108      	adds	r1, #8
   84096:	f043 0301 	orr.w	r3, r3, #1
   8409a:	6053      	str	r3, [r2, #4]
   8409c:	4648      	mov	r0, r9
   8409e:	f7ff f89f 	bl	831e0 <_free_r>
   840a2:	e7db      	b.n	8405c <_realloc_r+0xf4>
   840a4:	428b      	cmp	r3, r1
   840a6:	da33      	bge.n	84110 <_realloc_r+0x1a8>
   840a8:	4641      	mov	r1, r8
   840aa:	4648      	mov	r0, r9
   840ac:	f7ff fb96 	bl	837dc <_malloc_r>
   840b0:	4680      	mov	r8, r0
   840b2:	2800      	cmp	r0, #0
   840b4:	d0d2      	beq.n	8405c <_realloc_r+0xf4>
   840b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   840ba:	f1a0 0108 	sub.w	r1, r0, #8
   840be:	f023 0201 	bic.w	r2, r3, #1
   840c2:	443a      	add	r2, r7
   840c4:	4291      	cmp	r1, r2
   840c6:	f000 80bc 	beq.w	84242 <_realloc_r+0x2da>
   840ca:	1f2a      	subs	r2, r5, #4
   840cc:	2a24      	cmp	r2, #36	; 0x24
   840ce:	d86e      	bhi.n	841ae <_realloc_r+0x246>
   840d0:	2a13      	cmp	r2, #19
   840d2:	d842      	bhi.n	8415a <_realloc_r+0x1f2>
   840d4:	4603      	mov	r3, r0
   840d6:	4622      	mov	r2, r4
   840d8:	6811      	ldr	r1, [r2, #0]
   840da:	6019      	str	r1, [r3, #0]
   840dc:	6851      	ldr	r1, [r2, #4]
   840de:	6059      	str	r1, [r3, #4]
   840e0:	6892      	ldr	r2, [r2, #8]
   840e2:	609a      	str	r2, [r3, #8]
   840e4:	4621      	mov	r1, r4
   840e6:	4648      	mov	r0, r9
   840e8:	f7ff f87a 	bl	831e0 <_free_r>
   840ec:	e7b6      	b.n	8405c <_realloc_r+0xf4>
   840ee:	4611      	mov	r1, r2
   840f0:	b003      	add	sp, #12
   840f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   840f6:	f7ff bb71 	b.w	837dc <_malloc_r>
   840fa:	f8de 2004 	ldr.w	r2, [lr, #4]
   840fe:	f106 0c10 	add.w	ip, r6, #16
   84102:	f022 0203 	bic.w	r2, r2, #3
   84106:	1950      	adds	r0, r2, r5
   84108:	4560      	cmp	r0, ip
   8410a:	da3d      	bge.n	84188 <_realloc_r+0x220>
   8410c:	4670      	mov	r0, lr
   8410e:	e759      	b.n	83fc4 <_realloc_r+0x5c>
   84110:	46d0      	mov	r8, sl
   84112:	f858 0f08 	ldr.w	r0, [r8, #8]!
   84116:	f8da 100c 	ldr.w	r1, [sl, #12]
   8411a:	1f2a      	subs	r2, r5, #4
   8411c:	2a24      	cmp	r2, #36	; 0x24
   8411e:	60c1      	str	r1, [r0, #12]
   84120:	6088      	str	r0, [r1, #8]
   84122:	f200 80a0 	bhi.w	84266 <_realloc_r+0x2fe>
   84126:	2a13      	cmp	r2, #19
   84128:	f240 809b 	bls.w	84262 <_realloc_r+0x2fa>
   8412c:	6821      	ldr	r1, [r4, #0]
   8412e:	2a1b      	cmp	r2, #27
   84130:	f8ca 1008 	str.w	r1, [sl, #8]
   84134:	6861      	ldr	r1, [r4, #4]
   84136:	f8ca 100c 	str.w	r1, [sl, #12]
   8413a:	f200 80b2 	bhi.w	842a2 <_realloc_r+0x33a>
   8413e:	3408      	adds	r4, #8
   84140:	f10a 0210 	add.w	r2, sl, #16
   84144:	6821      	ldr	r1, [r4, #0]
   84146:	461d      	mov	r5, r3
   84148:	6011      	str	r1, [r2, #0]
   8414a:	6861      	ldr	r1, [r4, #4]
   8414c:	4657      	mov	r7, sl
   8414e:	6051      	str	r1, [r2, #4]
   84150:	68a3      	ldr	r3, [r4, #8]
   84152:	6093      	str	r3, [r2, #8]
   84154:	f8da 3004 	ldr.w	r3, [sl, #4]
   84158:	e774      	b.n	84044 <_realloc_r+0xdc>
   8415a:	6823      	ldr	r3, [r4, #0]
   8415c:	2a1b      	cmp	r2, #27
   8415e:	6003      	str	r3, [r0, #0]
   84160:	6863      	ldr	r3, [r4, #4]
   84162:	6043      	str	r3, [r0, #4]
   84164:	d862      	bhi.n	8422c <_realloc_r+0x2c4>
   84166:	f100 0308 	add.w	r3, r0, #8
   8416a:	f104 0208 	add.w	r2, r4, #8
   8416e:	e7b3      	b.n	840d8 <_realloc_r+0x170>
   84170:	4643      	mov	r3, r8
   84172:	6822      	ldr	r2, [r4, #0]
   84174:	4675      	mov	r5, lr
   84176:	601a      	str	r2, [r3, #0]
   84178:	6862      	ldr	r2, [r4, #4]
   8417a:	4657      	mov	r7, sl
   8417c:	605a      	str	r2, [r3, #4]
   8417e:	68a2      	ldr	r2, [r4, #8]
   84180:	609a      	str	r2, [r3, #8]
   84182:	f8da 3004 	ldr.w	r3, [sl, #4]
   84186:	e75d      	b.n	84044 <_realloc_r+0xdc>
   84188:	1b83      	subs	r3, r0, r6
   8418a:	4437      	add	r7, r6
   8418c:	f043 0301 	orr.w	r3, r3, #1
   84190:	f8cb 7008 	str.w	r7, [fp, #8]
   84194:	607b      	str	r3, [r7, #4]
   84196:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8419a:	4648      	mov	r0, r9
   8419c:	f003 0301 	and.w	r3, r3, #1
   841a0:	431e      	orrs	r6, r3
   841a2:	f844 6c04 	str.w	r6, [r4, #-4]
   841a6:	f7ff fedd 	bl	83f64 <__malloc_unlock>
   841aa:	4620      	mov	r0, r4
   841ac:	e75a      	b.n	84064 <_realloc_r+0xfc>
   841ae:	4621      	mov	r1, r4
   841b0:	f7ff fe70 	bl	83e94 <memmove>
   841b4:	e796      	b.n	840e4 <_realloc_r+0x17c>
   841b6:	eb02 0c03 	add.w	ip, r2, r3
   841ba:	f106 0210 	add.w	r2, r6, #16
   841be:	4594      	cmp	ip, r2
   841c0:	f6ff af70 	blt.w	840a4 <_realloc_r+0x13c>
   841c4:	4657      	mov	r7, sl
   841c6:	f857 1f08 	ldr.w	r1, [r7, #8]!
   841ca:	f8da 300c 	ldr.w	r3, [sl, #12]
   841ce:	1f2a      	subs	r2, r5, #4
   841d0:	2a24      	cmp	r2, #36	; 0x24
   841d2:	60cb      	str	r3, [r1, #12]
   841d4:	6099      	str	r1, [r3, #8]
   841d6:	f200 8086 	bhi.w	842e6 <_realloc_r+0x37e>
   841da:	2a13      	cmp	r2, #19
   841dc:	d977      	bls.n	842ce <_realloc_r+0x366>
   841de:	6823      	ldr	r3, [r4, #0]
   841e0:	2a1b      	cmp	r2, #27
   841e2:	f8ca 3008 	str.w	r3, [sl, #8]
   841e6:	6863      	ldr	r3, [r4, #4]
   841e8:	f8ca 300c 	str.w	r3, [sl, #12]
   841ec:	f200 8084 	bhi.w	842f8 <_realloc_r+0x390>
   841f0:	3408      	adds	r4, #8
   841f2:	f10a 0310 	add.w	r3, sl, #16
   841f6:	6822      	ldr	r2, [r4, #0]
   841f8:	601a      	str	r2, [r3, #0]
   841fa:	6862      	ldr	r2, [r4, #4]
   841fc:	605a      	str	r2, [r3, #4]
   841fe:	68a2      	ldr	r2, [r4, #8]
   84200:	609a      	str	r2, [r3, #8]
   84202:	ebc6 020c 	rsb	r2, r6, ip
   84206:	eb0a 0306 	add.w	r3, sl, r6
   8420a:	f042 0201 	orr.w	r2, r2, #1
   8420e:	f8cb 3008 	str.w	r3, [fp, #8]
   84212:	605a      	str	r2, [r3, #4]
   84214:	f8da 3004 	ldr.w	r3, [sl, #4]
   84218:	4648      	mov	r0, r9
   8421a:	f003 0301 	and.w	r3, r3, #1
   8421e:	431e      	orrs	r6, r3
   84220:	f8ca 6004 	str.w	r6, [sl, #4]
   84224:	f7ff fe9e 	bl	83f64 <__malloc_unlock>
   84228:	4638      	mov	r0, r7
   8422a:	e71b      	b.n	84064 <_realloc_r+0xfc>
   8422c:	68a3      	ldr	r3, [r4, #8]
   8422e:	2a24      	cmp	r2, #36	; 0x24
   84230:	6083      	str	r3, [r0, #8]
   84232:	68e3      	ldr	r3, [r4, #12]
   84234:	60c3      	str	r3, [r0, #12]
   84236:	d02b      	beq.n	84290 <_realloc_r+0x328>
   84238:	f100 0310 	add.w	r3, r0, #16
   8423c:	f104 0210 	add.w	r2, r4, #16
   84240:	e74a      	b.n	840d8 <_realloc_r+0x170>
   84242:	f850 2c04 	ldr.w	r2, [r0, #-4]
   84246:	46a0      	mov	r8, r4
   84248:	f022 0203 	bic.w	r2, r2, #3
   8424c:	4415      	add	r5, r2
   8424e:	e6f9      	b.n	84044 <_realloc_r+0xdc>
   84250:	4621      	mov	r1, r4
   84252:	4640      	mov	r0, r8
   84254:	4675      	mov	r5, lr
   84256:	4657      	mov	r7, sl
   84258:	f7ff fe1c 	bl	83e94 <memmove>
   8425c:	f8da 3004 	ldr.w	r3, [sl, #4]
   84260:	e6f0      	b.n	84044 <_realloc_r+0xdc>
   84262:	4642      	mov	r2, r8
   84264:	e76e      	b.n	84144 <_realloc_r+0x1dc>
   84266:	4621      	mov	r1, r4
   84268:	4640      	mov	r0, r8
   8426a:	461d      	mov	r5, r3
   8426c:	4657      	mov	r7, sl
   8426e:	f7ff fe11 	bl	83e94 <memmove>
   84272:	f8da 3004 	ldr.w	r3, [sl, #4]
   84276:	e6e5      	b.n	84044 <_realloc_r+0xdc>
   84278:	68a3      	ldr	r3, [r4, #8]
   8427a:	2a24      	cmp	r2, #36	; 0x24
   8427c:	f8ca 3010 	str.w	r3, [sl, #16]
   84280:	68e3      	ldr	r3, [r4, #12]
   84282:	f8ca 3014 	str.w	r3, [sl, #20]
   84286:	d018      	beq.n	842ba <_realloc_r+0x352>
   84288:	3410      	adds	r4, #16
   8428a:	f10a 0318 	add.w	r3, sl, #24
   8428e:	e770      	b.n	84172 <_realloc_r+0x20a>
   84290:	6922      	ldr	r2, [r4, #16]
   84292:	f100 0318 	add.w	r3, r0, #24
   84296:	6102      	str	r2, [r0, #16]
   84298:	6961      	ldr	r1, [r4, #20]
   8429a:	f104 0218 	add.w	r2, r4, #24
   8429e:	6141      	str	r1, [r0, #20]
   842a0:	e71a      	b.n	840d8 <_realloc_r+0x170>
   842a2:	68a1      	ldr	r1, [r4, #8]
   842a4:	2a24      	cmp	r2, #36	; 0x24
   842a6:	f8ca 1010 	str.w	r1, [sl, #16]
   842aa:	68e1      	ldr	r1, [r4, #12]
   842ac:	f8ca 1014 	str.w	r1, [sl, #20]
   842b0:	d00f      	beq.n	842d2 <_realloc_r+0x36a>
   842b2:	3410      	adds	r4, #16
   842b4:	f10a 0218 	add.w	r2, sl, #24
   842b8:	e744      	b.n	84144 <_realloc_r+0x1dc>
   842ba:	6922      	ldr	r2, [r4, #16]
   842bc:	f10a 0320 	add.w	r3, sl, #32
   842c0:	f8ca 2018 	str.w	r2, [sl, #24]
   842c4:	6962      	ldr	r2, [r4, #20]
   842c6:	3418      	adds	r4, #24
   842c8:	f8ca 201c 	str.w	r2, [sl, #28]
   842cc:	e751      	b.n	84172 <_realloc_r+0x20a>
   842ce:	463b      	mov	r3, r7
   842d0:	e791      	b.n	841f6 <_realloc_r+0x28e>
   842d2:	6921      	ldr	r1, [r4, #16]
   842d4:	f10a 0220 	add.w	r2, sl, #32
   842d8:	f8ca 1018 	str.w	r1, [sl, #24]
   842dc:	6961      	ldr	r1, [r4, #20]
   842de:	3418      	adds	r4, #24
   842e0:	f8ca 101c 	str.w	r1, [sl, #28]
   842e4:	e72e      	b.n	84144 <_realloc_r+0x1dc>
   842e6:	4621      	mov	r1, r4
   842e8:	4638      	mov	r0, r7
   842ea:	f8cd c004 	str.w	ip, [sp, #4]
   842ee:	f7ff fdd1 	bl	83e94 <memmove>
   842f2:	f8dd c004 	ldr.w	ip, [sp, #4]
   842f6:	e784      	b.n	84202 <_realloc_r+0x29a>
   842f8:	68a3      	ldr	r3, [r4, #8]
   842fa:	2a24      	cmp	r2, #36	; 0x24
   842fc:	f8ca 3010 	str.w	r3, [sl, #16]
   84300:	68e3      	ldr	r3, [r4, #12]
   84302:	f8ca 3014 	str.w	r3, [sl, #20]
   84306:	d003      	beq.n	84310 <_realloc_r+0x3a8>
   84308:	3410      	adds	r4, #16
   8430a:	f10a 0318 	add.w	r3, sl, #24
   8430e:	e772      	b.n	841f6 <_realloc_r+0x28e>
   84310:	6922      	ldr	r2, [r4, #16]
   84312:	f10a 0320 	add.w	r3, sl, #32
   84316:	f8ca 2018 	str.w	r2, [sl, #24]
   8431a:	6962      	ldr	r2, [r4, #20]
   8431c:	3418      	adds	r4, #24
   8431e:	f8ca 201c 	str.w	r2, [sl, #28]
   84322:	e768      	b.n	841f6 <_realloc_r+0x28e>
   84324:	20070590 	.word	0x20070590

00084328 <_sbrk_r>:
   84328:	b538      	push	{r3, r4, r5, lr}
   8432a:	4c07      	ldr	r4, [pc, #28]	; (84348 <_sbrk_r+0x20>)
   8432c:	2300      	movs	r3, #0
   8432e:	4605      	mov	r5, r0
   84330:	4608      	mov	r0, r1
   84332:	6023      	str	r3, [r4, #0]
   84334:	f7fc fca2 	bl	80c7c <_sbrk>
   84338:	1c43      	adds	r3, r0, #1
   8433a:	d000      	beq.n	8433e <_sbrk_r+0x16>
   8433c:	bd38      	pop	{r3, r4, r5, pc}
   8433e:	6823      	ldr	r3, [r4, #0]
   84340:	2b00      	cmp	r3, #0
   84342:	d0fb      	beq.n	8433c <_sbrk_r+0x14>
   84344:	602b      	str	r3, [r5, #0]
   84346:	bd38      	pop	{r3, r4, r5, pc}
   84348:	20070a90 	.word	0x20070a90

0008434c <__sread>:
   8434c:	b510      	push	{r4, lr}
   8434e:	460c      	mov	r4, r1
   84350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84354:	f000 f99e 	bl	84694 <_read_r>
   84358:	2800      	cmp	r0, #0
   8435a:	db03      	blt.n	84364 <__sread+0x18>
   8435c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8435e:	4403      	add	r3, r0
   84360:	6523      	str	r3, [r4, #80]	; 0x50
   84362:	bd10      	pop	{r4, pc}
   84364:	89a3      	ldrh	r3, [r4, #12]
   84366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8436a:	81a3      	strh	r3, [r4, #12]
   8436c:	bd10      	pop	{r4, pc}
   8436e:	bf00      	nop

00084370 <__swrite>:
   84370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84374:	460c      	mov	r4, r1
   84376:	8989      	ldrh	r1, [r1, #12]
   84378:	461d      	mov	r5, r3
   8437a:	05cb      	lsls	r3, r1, #23
   8437c:	4616      	mov	r6, r2
   8437e:	4607      	mov	r7, r0
   84380:	d506      	bpl.n	84390 <__swrite+0x20>
   84382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84386:	2200      	movs	r2, #0
   84388:	2302      	movs	r3, #2
   8438a:	f000 f96f 	bl	8466c <_lseek_r>
   8438e:	89a1      	ldrh	r1, [r4, #12]
   84390:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84394:	81a1      	strh	r1, [r4, #12]
   84396:	4638      	mov	r0, r7
   84398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8439c:	4632      	mov	r2, r6
   8439e:	462b      	mov	r3, r5
   843a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   843a4:	f000 b87a 	b.w	8449c <_write_r>

000843a8 <__sseek>:
   843a8:	b510      	push	{r4, lr}
   843aa:	460c      	mov	r4, r1
   843ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   843b0:	f000 f95c 	bl	8466c <_lseek_r>
   843b4:	89a3      	ldrh	r3, [r4, #12]
   843b6:	1c42      	adds	r2, r0, #1
   843b8:	bf0e      	itee	eq
   843ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   843be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   843c2:	6520      	strne	r0, [r4, #80]	; 0x50
   843c4:	81a3      	strh	r3, [r4, #12]
   843c6:	bd10      	pop	{r4, pc}

000843c8 <__sclose>:
   843c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   843cc:	f000 b8ce 	b.w	8456c <_close_r>

000843d0 <strlen>:
   843d0:	f020 0103 	bic.w	r1, r0, #3
   843d4:	f010 0003 	ands.w	r0, r0, #3
   843d8:	f1c0 0000 	rsb	r0, r0, #0
   843dc:	f851 3b04 	ldr.w	r3, [r1], #4
   843e0:	f100 0c04 	add.w	ip, r0, #4
   843e4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   843e8:	f06f 0200 	mvn.w	r2, #0
   843ec:	bf1c      	itt	ne
   843ee:	fa22 f20c 	lsrne.w	r2, r2, ip
   843f2:	4313      	orrne	r3, r2
   843f4:	f04f 0c01 	mov.w	ip, #1
   843f8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   843fc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   84400:	eba3 020c 	sub.w	r2, r3, ip
   84404:	ea22 0203 	bic.w	r2, r2, r3
   84408:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8440c:	bf04      	itt	eq
   8440e:	f851 3b04 	ldreq.w	r3, [r1], #4
   84412:	3004      	addeq	r0, #4
   84414:	d0f4      	beq.n	84400 <strlen+0x30>
   84416:	f013 0fff 	tst.w	r3, #255	; 0xff
   8441a:	bf1f      	itttt	ne
   8441c:	3001      	addne	r0, #1
   8441e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   84422:	3001      	addne	r0, #1
   84424:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   84428:	bf18      	it	ne
   8442a:	3001      	addne	r0, #1
   8442c:	4770      	bx	lr
   8442e:	bf00      	nop

00084430 <_wcrtomb_r>:
   84430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84434:	461e      	mov	r6, r3
   84436:	b086      	sub	sp, #24
   84438:	460c      	mov	r4, r1
   8443a:	4605      	mov	r5, r0
   8443c:	4617      	mov	r7, r2
   8443e:	4b0f      	ldr	r3, [pc, #60]	; (8447c <_wcrtomb_r+0x4c>)
   84440:	b191      	cbz	r1, 84468 <_wcrtomb_r+0x38>
   84442:	f8d3 8000 	ldr.w	r8, [r3]
   84446:	f7ff f947 	bl	836d8 <__locale_charset>
   8444a:	9600      	str	r6, [sp, #0]
   8444c:	4603      	mov	r3, r0
   8444e:	4621      	mov	r1, r4
   84450:	463a      	mov	r2, r7
   84452:	4628      	mov	r0, r5
   84454:	47c0      	blx	r8
   84456:	1c43      	adds	r3, r0, #1
   84458:	d103      	bne.n	84462 <_wcrtomb_r+0x32>
   8445a:	2200      	movs	r2, #0
   8445c:	238a      	movs	r3, #138	; 0x8a
   8445e:	6032      	str	r2, [r6, #0]
   84460:	602b      	str	r3, [r5, #0]
   84462:	b006      	add	sp, #24
   84464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84468:	681f      	ldr	r7, [r3, #0]
   8446a:	f7ff f935 	bl	836d8 <__locale_charset>
   8446e:	9600      	str	r6, [sp, #0]
   84470:	4603      	mov	r3, r0
   84472:	4622      	mov	r2, r4
   84474:	4628      	mov	r0, r5
   84476:	a903      	add	r1, sp, #12
   84478:	47b8      	blx	r7
   8447a:	e7ec      	b.n	84456 <_wcrtomb_r+0x26>
   8447c:	200709a0 	.word	0x200709a0

00084480 <__ascii_wctomb>:
   84480:	b121      	cbz	r1, 8448c <__ascii_wctomb+0xc>
   84482:	2aff      	cmp	r2, #255	; 0xff
   84484:	d804      	bhi.n	84490 <__ascii_wctomb+0x10>
   84486:	700a      	strb	r2, [r1, #0]
   84488:	2001      	movs	r0, #1
   8448a:	4770      	bx	lr
   8448c:	4608      	mov	r0, r1
   8448e:	4770      	bx	lr
   84490:	238a      	movs	r3, #138	; 0x8a
   84492:	6003      	str	r3, [r0, #0]
   84494:	f04f 30ff 	mov.w	r0, #4294967295
   84498:	4770      	bx	lr
   8449a:	bf00      	nop

0008449c <_write_r>:
   8449c:	b570      	push	{r4, r5, r6, lr}
   8449e:	4c08      	ldr	r4, [pc, #32]	; (844c0 <_write_r+0x24>)
   844a0:	4606      	mov	r6, r0
   844a2:	2500      	movs	r5, #0
   844a4:	4608      	mov	r0, r1
   844a6:	4611      	mov	r1, r2
   844a8:	461a      	mov	r2, r3
   844aa:	6025      	str	r5, [r4, #0]
   844ac:	f7fb ff5e 	bl	8036c <_write>
   844b0:	1c43      	adds	r3, r0, #1
   844b2:	d000      	beq.n	844b6 <_write_r+0x1a>
   844b4:	bd70      	pop	{r4, r5, r6, pc}
   844b6:	6823      	ldr	r3, [r4, #0]
   844b8:	2b00      	cmp	r3, #0
   844ba:	d0fb      	beq.n	844b4 <_write_r+0x18>
   844bc:	6033      	str	r3, [r6, #0]
   844be:	bd70      	pop	{r4, r5, r6, pc}
   844c0:	20070a90 	.word	0x20070a90

000844c4 <__register_exitproc>:
   844c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   844c6:	4c27      	ldr	r4, [pc, #156]	; (84564 <__register_exitproc+0xa0>)
   844c8:	b085      	sub	sp, #20
   844ca:	6826      	ldr	r6, [r4, #0]
   844cc:	4607      	mov	r7, r0
   844ce:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   844d2:	2c00      	cmp	r4, #0
   844d4:	d040      	beq.n	84558 <__register_exitproc+0x94>
   844d6:	6865      	ldr	r5, [r4, #4]
   844d8:	2d1f      	cmp	r5, #31
   844da:	dd1e      	ble.n	8451a <__register_exitproc+0x56>
   844dc:	4822      	ldr	r0, [pc, #136]	; (84568 <__register_exitproc+0xa4>)
   844de:	b918      	cbnz	r0, 844e8 <__register_exitproc+0x24>
   844e0:	f04f 30ff 	mov.w	r0, #4294967295
   844e4:	b005      	add	sp, #20
   844e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   844e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   844ec:	9103      	str	r1, [sp, #12]
   844ee:	9202      	str	r2, [sp, #8]
   844f0:	9301      	str	r3, [sp, #4]
   844f2:	f7ff f96b 	bl	837cc <malloc>
   844f6:	9903      	ldr	r1, [sp, #12]
   844f8:	4604      	mov	r4, r0
   844fa:	9a02      	ldr	r2, [sp, #8]
   844fc:	9b01      	ldr	r3, [sp, #4]
   844fe:	2800      	cmp	r0, #0
   84500:	d0ee      	beq.n	844e0 <__register_exitproc+0x1c>
   84502:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   84506:	2000      	movs	r0, #0
   84508:	6025      	str	r5, [r4, #0]
   8450a:	6060      	str	r0, [r4, #4]
   8450c:	4605      	mov	r5, r0
   8450e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84512:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   84516:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   8451a:	b93f      	cbnz	r7, 8452c <__register_exitproc+0x68>
   8451c:	1c6b      	adds	r3, r5, #1
   8451e:	2000      	movs	r0, #0
   84520:	3502      	adds	r5, #2
   84522:	6063      	str	r3, [r4, #4]
   84524:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   84528:	b005      	add	sp, #20
   8452a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8452c:	2601      	movs	r6, #1
   8452e:	40ae      	lsls	r6, r5
   84530:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   84534:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   84538:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8453c:	2f02      	cmp	r7, #2
   8453e:	ea42 0206 	orr.w	r2, r2, r6
   84542:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   84546:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   8454a:	d1e7      	bne.n	8451c <__register_exitproc+0x58>
   8454c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   84550:	431e      	orrs	r6, r3
   84552:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   84556:	e7e1      	b.n	8451c <__register_exitproc+0x58>
   84558:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   8455c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84560:	e7b9      	b.n	844d6 <__register_exitproc+0x12>
   84562:	bf00      	nop
   84564:	000846e0 	.word	0x000846e0
   84568:	000837cd 	.word	0x000837cd

0008456c <_close_r>:
   8456c:	b538      	push	{r3, r4, r5, lr}
   8456e:	4c07      	ldr	r4, [pc, #28]	; (8458c <_close_r+0x20>)
   84570:	2300      	movs	r3, #0
   84572:	4605      	mov	r5, r0
   84574:	4608      	mov	r0, r1
   84576:	6023      	str	r3, [r4, #0]
   84578:	f7fc fb9a 	bl	80cb0 <_close>
   8457c:	1c43      	adds	r3, r0, #1
   8457e:	d000      	beq.n	84582 <_close_r+0x16>
   84580:	bd38      	pop	{r3, r4, r5, pc}
   84582:	6823      	ldr	r3, [r4, #0]
   84584:	2b00      	cmp	r3, #0
   84586:	d0fb      	beq.n	84580 <_close_r+0x14>
   84588:	602b      	str	r3, [r5, #0]
   8458a:	bd38      	pop	{r3, r4, r5, pc}
   8458c:	20070a90 	.word	0x20070a90

00084590 <_fclose_r>:
   84590:	b570      	push	{r4, r5, r6, lr}
   84592:	460c      	mov	r4, r1
   84594:	4605      	mov	r5, r0
   84596:	b131      	cbz	r1, 845a6 <_fclose_r+0x16>
   84598:	b110      	cbz	r0, 845a0 <_fclose_r+0x10>
   8459a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8459c:	2b00      	cmp	r3, #0
   8459e:	d02f      	beq.n	84600 <_fclose_r+0x70>
   845a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   845a4:	b90b      	cbnz	r3, 845aa <_fclose_r+0x1a>
   845a6:	2000      	movs	r0, #0
   845a8:	bd70      	pop	{r4, r5, r6, pc}
   845aa:	4628      	mov	r0, r5
   845ac:	4621      	mov	r1, r4
   845ae:	f7fe fcb7 	bl	82f20 <_fflush_r>
   845b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   845b4:	4606      	mov	r6, r0
   845b6:	b133      	cbz	r3, 845c6 <_fclose_r+0x36>
   845b8:	4628      	mov	r0, r5
   845ba:	69e1      	ldr	r1, [r4, #28]
   845bc:	4798      	blx	r3
   845be:	2800      	cmp	r0, #0
   845c0:	bfb8      	it	lt
   845c2:	f04f 36ff 	movlt.w	r6, #4294967295
   845c6:	89a3      	ldrh	r3, [r4, #12]
   845c8:	061b      	lsls	r3, r3, #24
   845ca:	d41c      	bmi.n	84606 <_fclose_r+0x76>
   845cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   845ce:	b141      	cbz	r1, 845e2 <_fclose_r+0x52>
   845d0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   845d4:	4299      	cmp	r1, r3
   845d6:	d002      	beq.n	845de <_fclose_r+0x4e>
   845d8:	4628      	mov	r0, r5
   845da:	f7fe fe01 	bl	831e0 <_free_r>
   845de:	2300      	movs	r3, #0
   845e0:	6323      	str	r3, [r4, #48]	; 0x30
   845e2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   845e4:	b121      	cbz	r1, 845f0 <_fclose_r+0x60>
   845e6:	4628      	mov	r0, r5
   845e8:	f7fe fdfa 	bl	831e0 <_free_r>
   845ec:	2300      	movs	r3, #0
   845ee:	6463      	str	r3, [r4, #68]	; 0x44
   845f0:	f7fe fd2c 	bl	8304c <__sfp_lock_acquire>
   845f4:	2300      	movs	r3, #0
   845f6:	81a3      	strh	r3, [r4, #12]
   845f8:	f7fe fd2a 	bl	83050 <__sfp_lock_release>
   845fc:	4630      	mov	r0, r6
   845fe:	bd70      	pop	{r4, r5, r6, pc}
   84600:	f7fe fcaa 	bl	82f58 <__sinit>
   84604:	e7cc      	b.n	845a0 <_fclose_r+0x10>
   84606:	4628      	mov	r0, r5
   84608:	6921      	ldr	r1, [r4, #16]
   8460a:	f7fe fde9 	bl	831e0 <_free_r>
   8460e:	e7dd      	b.n	845cc <_fclose_r+0x3c>

00084610 <fclose>:
   84610:	4b02      	ldr	r3, [pc, #8]	; (8461c <fclose+0xc>)
   84612:	4601      	mov	r1, r0
   84614:	6818      	ldr	r0, [r3, #0]
   84616:	f7ff bfbb 	b.w	84590 <_fclose_r>
   8461a:	bf00      	nop
   8461c:	20070568 	.word	0x20070568

00084620 <_fstat_r>:
   84620:	b538      	push	{r3, r4, r5, lr}
   84622:	4c08      	ldr	r4, [pc, #32]	; (84644 <_fstat_r+0x24>)
   84624:	2300      	movs	r3, #0
   84626:	4605      	mov	r5, r0
   84628:	4608      	mov	r0, r1
   8462a:	4611      	mov	r1, r2
   8462c:	6023      	str	r3, [r4, #0]
   8462e:	f7fc fb43 	bl	80cb8 <_fstat>
   84632:	1c43      	adds	r3, r0, #1
   84634:	d000      	beq.n	84638 <_fstat_r+0x18>
   84636:	bd38      	pop	{r3, r4, r5, pc}
   84638:	6823      	ldr	r3, [r4, #0]
   8463a:	2b00      	cmp	r3, #0
   8463c:	d0fb      	beq.n	84636 <_fstat_r+0x16>
   8463e:	602b      	str	r3, [r5, #0]
   84640:	bd38      	pop	{r3, r4, r5, pc}
   84642:	bf00      	nop
   84644:	20070a90 	.word	0x20070a90

00084648 <_isatty_r>:
   84648:	b538      	push	{r3, r4, r5, lr}
   8464a:	4c07      	ldr	r4, [pc, #28]	; (84668 <_isatty_r+0x20>)
   8464c:	2300      	movs	r3, #0
   8464e:	4605      	mov	r5, r0
   84650:	4608      	mov	r0, r1
   84652:	6023      	str	r3, [r4, #0]
   84654:	f7fc fb36 	bl	80cc4 <_isatty>
   84658:	1c43      	adds	r3, r0, #1
   8465a:	d000      	beq.n	8465e <_isatty_r+0x16>
   8465c:	bd38      	pop	{r3, r4, r5, pc}
   8465e:	6823      	ldr	r3, [r4, #0]
   84660:	2b00      	cmp	r3, #0
   84662:	d0fb      	beq.n	8465c <_isatty_r+0x14>
   84664:	602b      	str	r3, [r5, #0]
   84666:	bd38      	pop	{r3, r4, r5, pc}
   84668:	20070a90 	.word	0x20070a90

0008466c <_lseek_r>:
   8466c:	b570      	push	{r4, r5, r6, lr}
   8466e:	4c08      	ldr	r4, [pc, #32]	; (84690 <_lseek_r+0x24>)
   84670:	4606      	mov	r6, r0
   84672:	2500      	movs	r5, #0
   84674:	4608      	mov	r0, r1
   84676:	4611      	mov	r1, r2
   84678:	461a      	mov	r2, r3
   8467a:	6025      	str	r5, [r4, #0]
   8467c:	f7fc fb24 	bl	80cc8 <_lseek>
   84680:	1c43      	adds	r3, r0, #1
   84682:	d000      	beq.n	84686 <_lseek_r+0x1a>
   84684:	bd70      	pop	{r4, r5, r6, pc}
   84686:	6823      	ldr	r3, [r4, #0]
   84688:	2b00      	cmp	r3, #0
   8468a:	d0fb      	beq.n	84684 <_lseek_r+0x18>
   8468c:	6033      	str	r3, [r6, #0]
   8468e:	bd70      	pop	{r4, r5, r6, pc}
   84690:	20070a90 	.word	0x20070a90

00084694 <_read_r>:
   84694:	b570      	push	{r4, r5, r6, lr}
   84696:	4c08      	ldr	r4, [pc, #32]	; (846b8 <_read_r+0x24>)
   84698:	4606      	mov	r6, r0
   8469a:	2500      	movs	r5, #0
   8469c:	4608      	mov	r0, r1
   8469e:	4611      	mov	r1, r2
   846a0:	461a      	mov	r2, r3
   846a2:	6025      	str	r5, [r4, #0]
   846a4:	f7fb fe42 	bl	8032c <_read>
   846a8:	1c43      	adds	r3, r0, #1
   846aa:	d000      	beq.n	846ae <_read_r+0x1a>
   846ac:	bd70      	pop	{r4, r5, r6, pc}
   846ae:	6823      	ldr	r3, [r4, #0]
   846b0:	2b00      	cmp	r3, #0
   846b2:	d0fb      	beq.n	846ac <_read_r+0x18>
   846b4:	6033      	str	r3, [r6, #0]
   846b6:	bd70      	pop	{r4, r5, r6, pc}
   846b8:	20070a90 	.word	0x20070a90
   846bc:	736e6f43 	.word	0x736e6f43
   846c0:	20656c6f 	.word	0x20656c6f
   846c4:	64616572 	.word	0x64616572
   846c8:	00000a79 	.word	0x00000a79
   846cc:	3d3d3d3d 	.word	0x3d3d3d3d
   846d0:	3d3d3d3d 	.word	0x3d3d3d3d
   846d4:	3d3d3d3d 	.word	0x3d3d3d3d
   846d8:	00000a3d 	.word	0x00000a3d
   846dc:	00000043 	.word	0x00000043

000846e0 <_global_impure_ptr>:
   846e0:	20070140 33323130 37363534 42413938     @.. 0123456789AB
   846f0:	46454443 00000000 33323130 37363534     CDEF....01234567
   84700:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   84710:	0000296c                                l)..

00084714 <zeroes.6721>:
   84714:	30303030 30303030 30303030 30303030     0000000000000000

00084724 <blanks.6720>:
   84724:	20202020 20202020 20202020 20202020                     

00084734 <_init>:
   84734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84736:	bf00      	nop
   84738:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8473a:	bc08      	pop	{r3}
   8473c:	469e      	mov	lr, r3
   8473e:	4770      	bx	lr

00084740 <__init_array_start>:
   84740:	00082db9 	.word	0x00082db9

00084744 <__frame_dummy_init_array_entry>:
   84744:	00080119                                ....

00084748 <_fini>:
   84748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8474a:	bf00      	nop
   8474c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8474e:	bc08      	pop	{r3}
   84750:	469e      	mov	lr, r3
   84752:	4770      	bx	lr

00084754 <__fini_array_start>:
   84754:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070138 	.word	0x20070138

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <SystemCoreClock>:
20070138:	003d0900 00000000                       ..=.....

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	000846dc 00000000 00000000 00000000     .F..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	00084481                                .D..
